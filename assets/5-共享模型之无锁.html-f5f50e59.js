const n=JSON.parse('{"key":"v-3b00154c","path":"/JavaLang/Thread/5-%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E6%97%A0%E9%94%81.html","title":"5-共享模型之无锁","lang":"zh-CN","frontmatter":{"title":"5-共享模型之无锁","date":"2022-01-17T12:28:20.000Z","category":"Thread","tag":["Java","JavaSE","Thread"],"description":"乐观锁(无锁) 保护共享资源-加锁实现 有如下需求，保证account.withdraw取款方法的线程安全 import java.util.ArrayList; public interface Account { /** * 获取余额 */ Integer getBalance(); /** * 取款 */ void withdrawBalance(Integer amount); /** * 方法会启动1k个线程，每个线程做-10的操作，如果余额初始为10000那么正确的结果应该是0 * @param account Account账户实例对象 */ static void demo(Account account) { ArrayList&lt;Thread&gt; threads = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; 1000; i++) { threads.add(new Thread(() -&gt; { account.withdrawBalance(10); })); } long start = System.currentTimeMillis(); threads.forEach(Thread::start); threads.forEach(t -&gt; { try { // 等待线程执行结束 t.join(); } catch (InterruptedException e) { e.printStackTrace(); } }); long end = System.currentTimeMillis(); System.out.println(account.getBalance() + \\"cost\\" + (end - start) / 1000_000 + \\"ms\\"); } }","head":[["meta",{"property":"og:url","content":"http://www.amayakite.github.io/JavaLang/Thread/5-%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E6%97%A0%E9%94%81.html"}],["meta",{"property":"og:site_name","content":"Amayakite Blogs"}],["meta",{"property":"og:title","content":"5-共享模型之无锁"}],["meta",{"property":"og:description","content":"乐观锁(无锁) 保护共享资源-加锁实现 有如下需求，保证account.withdraw取款方法的线程安全 import java.util.ArrayList; public interface Account { /** * 获取余额 */ Integer getBalance(); /** * 取款 */ void withdrawBalance(Integer amount); /** * 方法会启动1k个线程，每个线程做-10的操作，如果余额初始为10000那么正确的结果应该是0 * @param account Account账户实例对象 */ static void demo(Account account) { ArrayList&lt;Thread&gt; threads = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; 1000; i++) { threads.add(new Thread(() -&gt; { account.withdrawBalance(10); })); } long start = System.currentTimeMillis(); threads.forEach(Thread::start); threads.forEach(t -&gt; { try { // 等待线程执行结束 t.join(); } catch (InterruptedException e) { e.printStackTrace(); } }); long end = System.currentTimeMillis(); System.out.println(account.getBalance() + \\"cost\\" + (end - start) / 1000_000 + \\"ms\\"); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-17T15:14:40.000Z"}],["meta",{"property":"article:author","content":"Amayakite"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaSE"}],["meta",{"property":"article:tag","content":"Thread"}],["meta",{"property":"article:published_time","content":"2022-01-17T12:28:20.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-17T15:14:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5-共享模型之无锁\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-17T12:28:20.000Z\\",\\"dateModified\\":\\"2023-06-17T15:14:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amayakite\\",\\"url\\":\\"https://github.com/Amayakite\\"}]}"]]},"headers":[{"level":2,"title":"乐观锁(无锁)","slug":"乐观锁-无锁","link":"#乐观锁-无锁","children":[{"level":3,"title":"保护共享资源-加锁实现","slug":"保护共享资源-加锁实现","link":"#保护共享资源-加锁实现","children":[]},{"level":3,"title":"保护共享资源-无锁实现","slug":"保护共享资源-无锁实现","link":"#保护共享资源-无锁实现","children":[]},{"level":3,"title":"CAS与volatile","slug":"cas与volatile","link":"#cas与volatile","children":[]},{"level":3,"title":"volatile","slug":"volatile","link":"#volatile","children":[]},{"level":3,"title":"为什么无锁效率更高","slug":"为什么无锁效率更高","link":"#为什么无锁效率更高","children":[]},{"level":3,"title":"CAS的特点","slug":"cas的特点","link":"#cas的特点","children":[]}]},{"level":2,"title":"原子整数","slug":"原子整数","link":"#原子整数","children":[{"level":3,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":3,"title":"手动实现updateAndGet","slug":"手动实现updateandget","link":"#手动实现updateandget","children":[]}]},{"level":2,"title":"原子引用","slug":"原子引用","link":"#原子引用","children":[{"level":3,"title":"基本概念及使用","slug":"基本概念及使用","link":"#基本概念及使用","children":[]},{"level":3,"title":"原子引用-ABA问题","slug":"原子引用-aba问题","link":"#原子引用-aba问题","children":[]},{"level":3,"title":"AtomicStampedReference","slug":"atomicstampedreference","link":"#atomicstampedreference","children":[]},{"level":3,"title":"AtomicMarkeableReference","slug":"atomicmarkeablereference","link":"#atomicmarkeablereference","children":[]}]},{"level":2,"title":"原子数组","slug":"原子数组","link":"#原子数组","children":[{"level":3,"title":"线程不安全的数组","slug":"线程不安全的数组","link":"#线程不安全的数组","children":[]},{"level":3,"title":"原子数组","slug":"原子数组-1","link":"#原子数组-1","children":[]}]},{"level":2,"title":"字段更新器","slug":"字段更新器","link":"#字段更新器","children":[]},{"level":2,"title":"原子累加器Adder","slug":"原子累加器adder","link":"#原子累加器adder","children":[{"level":3,"title":"基本使用","slug":"基本使用-1","link":"#基本使用-1","children":[]},{"level":3,"title":"LongAdder底层分析","slug":"longadder底层分析","link":"#longadder底层分析","children":[]}]},{"level":2,"title":"Unsafe","slug":"unsafe","link":"#unsafe","children":[]},{"level":2,"title":"日期的不可变类-DateTimeFormatter","slug":"日期的不可变类-datetimeformatter","link":"#日期的不可变类-datetimeformatter","children":[]},{"level":2,"title":"不可变类的设计-String","slug":"不可变类的设计-string","link":"#不可变类的设计-string","children":[]}],"git":{"createdTime":1687006308000,"updatedTime":1687014880000,"contributors":[{"name":"Amayakite","email":"amayakite@qq.com","commits":2}]},"readingTime":{"minutes":17.3,"words":5190},"filePathRelative":"JavaLang/Thread/5-共享模型之无锁.md","localizedDate":"2022年1月17日","excerpt":"<h2> 乐观锁(无锁)</h2>\\n<h3> 保护共享资源-加锁实现</h3>\\n<p>有如下需求，保证<code>account.withdraw</code>取款方法的线程安全</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">ArrayList</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">Account</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 获取余额\\n     */</span>\\n    <span class=\\"token class-name\\">Integer</span> <span class=\\"token function\\">getBalance</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 取款\\n     */</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">withdrawBalance</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Integer</span> amount<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 方法会启动1k个线程，每个线程做-10的操作，如果余额初始为10000那么正确的结果应该是0\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">account</span> Account账户实例对象\\n     */</span>\\n    <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">demo</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Account</span> account<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">&gt;</span></span> threads <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            threads<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span> <span class=\\"token punctuation\\">{</span>\\n                account<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">withdrawBalance</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">long</span> start <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">currentTimeMillis</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        threads<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Thread</span><span class=\\"token operator\\">::</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        threads<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span>t <span class=\\"token operator\\">-&gt;</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token comment\\">//                等待线程执行结束</span>\\n                t<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">InterruptedException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">long</span> end <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">currentTimeMillis</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>account<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBalance</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"cost\\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">(</span>end <span class=\\"token operator\\">-</span> start<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> <span class=\\"token number\\">1000_000</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"ms\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
