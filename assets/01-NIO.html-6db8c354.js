const e=JSON.parse('{"key":"v-5d0bb89e","path":"/JavaLang/Netty/01-NIO.html","title":"01-NIO","lang":"zh-CN","frontmatter":{"title":"01-NIO","date":"2022-05-09T20:18:55.000Z","category":"Netty","tag":["NIO","JavaNIO"],"description":"概述 Nio，异步非阻塞的一个概念，在你学习这个之前，首先需要熟悉Java：OOP、多线程、网络编程等 因为过了NIO就是Netty，Netty是一个非常牛逼的Java框架，就是用到了NIO的概念 这里说下I/O模型 就是用什么样的通道进行数据的发送和接收，很大程序上决定了程序的通讯性能 Java中共有三种编程模型/IO模式：BIO、NIO、AIO BIO：同步并阻塞（传统阻塞形），服务器实现为一个连接一个线程，也就是说，如果这个连接即使不做任何事情，也有不必要的开销 NIO：同步非阻塞：服务器实现模式为一个线程处理多个请求（连接），即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮循到连接有I/O请求就进行处理 AIO：异步非阻塞，AIO引入了异步通道的概念，才用的Proactor模式，简化了程序的编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序去处理，一般适用于连接数较多且时间长的应用","head":[["meta",{"property":"og:url","content":"http://www.amayakite.github.io/JavaLang/Netty/01-NIO.html"}],["meta",{"property":"og:site_name","content":"Amayakite Blogs"}],["meta",{"property":"og:title","content":"01-NIO"}],["meta",{"property":"og:description","content":"概述 Nio，异步非阻塞的一个概念，在你学习这个之前，首先需要熟悉Java：OOP、多线程、网络编程等 因为过了NIO就是Netty，Netty是一个非常牛逼的Java框架，就是用到了NIO的概念 这里说下I/O模型 就是用什么样的通道进行数据的发送和接收，很大程序上决定了程序的通讯性能 Java中共有三种编程模型/IO模式：BIO、NIO、AIO BIO：同步并阻塞（传统阻塞形），服务器实现为一个连接一个线程，也就是说，如果这个连接即使不做任何事情，也有不必要的开销 NIO：同步非阻塞：服务器实现模式为一个线程处理多个请求（连接），即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮循到连接有I/O请求就进行处理 AIO：异步非阻塞，AIO引入了异步通道的概念，才用的Proactor模式，简化了程序的编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序去处理，一般适用于连接数较多且时间长的应用"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-17T15:14:40.000Z"}],["meta",{"property":"article:author","content":"Amayakite"}],["meta",{"property":"article:tag","content":"NIO"}],["meta",{"property":"article:tag","content":"JavaNIO"}],["meta",{"property":"article:published_time","content":"2022-05-09T20:18:55.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-17T15:14:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01-NIO\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-09T20:18:55.000Z\\",\\"dateModified\\":\\"2023-06-17T15:14:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amayakite\\",\\"url\\":\\"https://github.com/Amayakite\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"NIO基本介绍","slug":"nio基本介绍","link":"#nio基本介绍","children":[]},{"level":2,"title":"NIO三大核心原理示意图","slug":"nio三大核心原理示意图","link":"#nio三大核心原理示意图","children":[]},{"level":2,"title":"缓冲区Buffer","slug":"缓冲区buffer","link":"#缓冲区buffer","children":[]},{"level":2,"title":"通道Channel","slug":"通道channel","link":"#通道channel","children":[{"level":3,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":3,"title":"FileBuffer","slug":"filebuffer","link":"#filebuffer","children":[]},{"level":3,"title":"Channel直接拷贝文件","slug":"channel直接拷贝文件","link":"#channel直接拷贝文件","children":[]},{"level":3,"title":"MappedByteBuffer 堆外内存操作","slug":"mappedbytebuffer-堆外内存操作","link":"#mappedbytebuffer-堆外内存操作","children":[]}]},{"level":2,"title":"Selector","slug":"selector","link":"#selector","children":[{"level":3,"title":"Selector Api一览","slug":"selector-api一览","link":"#selector-api一览","children":[]},{"level":3,"title":"NIO快速入门","slug":"nio快速入门","link":"#nio快速入门","children":[]}]},{"level":2,"title":"NIO和零拷贝","slug":"nio和零拷贝","link":"#nio和零拷贝","children":[]},{"level":2,"title":"AIO基本介绍","slug":"aio基本介绍","link":"#aio基本介绍","children":[]}],"git":{"createdTime":1687006308000,"updatedTime":1687014880000,"contributors":[{"name":"Amayakite","email":"amayakite@qq.com","commits":2}]},"readingTime":{"minutes":11.39,"words":3417},"filePathRelative":"JavaLang/Netty/01-NIO.md","localizedDate":"2022年5月9日","excerpt":"<h2> 概述</h2>\\n<p>Nio，异步非阻塞的一个概念，在你学习这个之前，首先需要熟悉Java：OOP、多线程、网络编程等</p>\\n<p>因为过了NIO就是Netty，Netty是一个非常牛逼的Java框架，就是用到了NIO的概念</p>\\n<p>这里说下I/O模型</p>\\n<ol>\\n<li>就是用什么样的通道进行数据的发送和接收，很大程序上决定了程序的通讯性能</li>\\n<li>Java中共有三种编程模型/IO模式：BIO、NIO、AIO</li>\\n<li>BIO：同步并阻塞（传统阻塞形），服务器实现为一个连接一个线程，也就是说，如果这个连接即使不做任何事情，也有不必要的开销</li>\\n<li>NIO：同步非阻塞：服务器实现模式为一个线程处理多个请求（连接），即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮循到连接有I/O请求就进行处理</li>\\n<li>AIO：异步非阻塞，AIO引入了异步通道的概念，才用的Proactor模式，简化了程序的编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序去处理，一般适用于连接数较多且时间长的应用</li>\\n</ol>","autoDesc":true}');export{e as data};
