import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-3ab2953d.js";const e="/images/Java/SpringCloud/23-幂等性问题/image-20220205230912892.png",p="/images/Java/SpringCloud/23-幂等性问题/image-20220205231128759.png",i="/images/Java/SpringCloud/23-幂等性问题/image-20220205231139251.png",o="/images/Java/SpringCloud/23-幂等性问题/image-20220205232637102.png",c="/images/Java/SpringCloud/23-幂等性问题/image-20220205232805452.png",l="/images/Java/SpringCloud/23-幂等性问题/image-20220205233823243.png",u="/images/Java/SpringCloud/23-幂等性问题/image-20220205234002287.png",r="/images/Java/SpringCloud/23-幂等性问题/image-20220205234154148.png",d="/images/Java/SpringCloud/23-幂等性问题/image-20220205234516413.png",k="/images/Java/SpringCloud/23-幂等性问题/image-20220205234548473.png",m="/images/Java/SpringCloud/23-幂等性问题/image-20220205234631175.png",g="/images/Java/SpringCloud/23-幂等性问题/image-20220205235150197.png",v={},b=t('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><figure><img src="'+e+'" alt="image-20220205230912892" tabindex="0" loading="lazy"><figcaption>image-20220205230912892</figcaption></figure><p>简单来说，就是一个订单的按钮，你点击一次，和点击一百次</p><p>或者一个登陆的按钮，你点击一次，和点击一百次，效果都是一样的</p><figure><img src="'+p+'" alt="image-20220205231128759" tabindex="0" loading="lazy"><figcaption>image-20220205231128759</figcaption></figure><figure><img src="'+i+'" alt="image-20220205231139251" tabindex="0" loading="lazy"><figcaption>image-20220205231139251</figcaption></figure><p>获取，对比，删除</p><h2 id="解决方案一览" tabindex="-1"><a class="header-anchor" href="#解决方案一览" aria-hidden="true">#</a> 解决方案一览</h2><figure><img src="'+o+'" alt="image-20220205232637102" tabindex="0" loading="lazy"><figcaption>image-20220205232637102</figcaption></figure><figure><img src="'+c+'" alt="image-20220205232805452" tabindex="0" loading="lazy"><figcaption>image-20220205232805452</figcaption></figure><p>有一种思路是验证码方式，可以运用在登陆的场景，每次生成的验证码都不一样，用完即删，使用Lua脚本进行验证，若不存在就那啥..</p><p>在其他场景，例如订单提交，则就可以在进入提交页面之后，发送一个获取订单令牌的请求，服务器收到请求后，随机生成一个令牌，value默认是0，同时存入用户的session和发送给用户，用户点击提交的时候，携带令牌进行提交，然后服务端进行校验，校验完毕后，给令牌的value额外添加一个标识符字段例如1，如果说用户并没有点击提交，则下次直接返回session中为0的，如果用户提交了，则下次申请获取令牌将失败</p><figure><img src="'+l+'" alt="image-20220205233823243" tabindex="0" loading="lazy"><figcaption>image-20220205233823243</figcaption></figure><p>当然也可以选择使用数据库来进行处理</p><figure><img src="'+u+'" alt="image-20220205234002287" tabindex="0" loading="lazy"><figcaption>image-20220205234002287</figcaption></figure><p>或者说分布式锁也可</p><figure><img src="'+r+'" alt="image-20220205234154148" tabindex="0" loading="lazy"><figcaption>image-20220205234154148</figcaption></figure><p>还有其他方式</p><figure><img src="'+d+'" alt="image-20220205234516413" tabindex="0" loading="lazy"><figcaption>image-20220205234516413</figcaption></figure><figure><img src="'+k+'" alt="image-20220205234548473" tabindex="0" loading="lazy"><figcaption>image-20220205234548473</figcaption></figure><figure><img src="'+m+'" alt="image-20220205234631175" tabindex="0" loading="lazy"><figcaption>image-20220205234631175</figcaption></figure><h2 id="订单提交的令牌处理" tabindex="-1"><a class="header-anchor" href="#订单提交的令牌处理" aria-hidden="true">#</a> 订单提交的令牌处理</h2><figure><img src="'+g+`" alt="image-20220205235150197" tabindex="0" loading="lazy"><figcaption>image-20220205235150197</figcaption></figure><p>依赖准备</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置准备</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">---</span> <span class="token comment">#</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> myserver
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">13002</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> amayakiteProjectRedis
    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模拟代码：</p><p>流程得先搞清楚</p><p>我们假设现在用户进入了购物车（也就是订单确认页），后台应该这样操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/getOrder&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">//        这个方法是来创建订单的，通过一大堆东西来创建一个订单（整体流程：购物车选择商品===&gt;提交订单，这里是进入到购物车选择商品的地方） 假设你把前面的步骤都做完了，然后存储数据成功至mysql或者redis之类的地方临时存储下 这个看具体业务吧</span>

    <span class="token comment">//        之前做了很多业务相关的内容，然后用雪花算法之类的生成了一个订单的id</span>
    <span class="token class-name">String</span> orderId <span class="token operator">=</span> <span class="token string">&quot;123456789&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">//        防重令牌</span>
    <span class="token class-name">UUID</span> uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">fastUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> token <span class="token operator">=</span> uuid<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//        把令牌封装到对象或者啥的，返回给前端一份，然后存储一份到redis中，过期时间自己决定 例如30分钟</span>
    stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;order:token:&quot;</span> <span class="token operator">+</span> orderId<span class="token punctuation">,</span> token<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//        返回给前端一份令牌</span>
    <span class="token keyword">return</span> token<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就是当用户在购物车或者订单页面点击了提交的时候</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/submitOrder&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submitOrder</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">,</span> <span class="token class-name">String</span> orderId<span class="token punctuation">,</span> <span class="token class-name">Object</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//        这里假设用户真正的点击了提交订单，然后你要接收一大堆东西，那一大堆东西待会慢慢处理</span>
    <span class="token comment">//        这些信息中一定有的是 一个订单id和一个令牌</span>
    
    <span class="token comment">// 首先是错误处理方式</span>
    <span class="token comment">//        先来获取token</span>
    <span class="token class-name">String</span> userToken <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;order:token:&quot;</span> <span class="token operator">+</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>userToken <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>userToken<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//            令牌不对，不能提交订单</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;订单令牌不正确&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//        上面是单线程的处理方式，接下来使用原子性的处理方式</span>
    
    
    <span class="token comment">//        也就是从获取到对比到删除都是原子性的操作（三步） 我们可以把这个操作放到一个lua脚本中，分别传入key和value，然后调用lua脚本，这样就可以实现原子性的操作了</span>
    <span class="token comment">//        删除成功，返回1，删除失败，返回0 如果key不存在之类的都是返回0</span>
    <span class="token class-name">String</span> script <span class="token operator">=</span> <span class="token string">&quot;if redis.call(&#39;get&#39;, KEYS[1]) == ARGV[1] then return redis.call(&#39;del&#39;, KEYS[1]) else return 0 end&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//        脚本提交 第一个参数规定 返回值用long来接收，第二个值要传入一个list（key），第三个及之后是value</span>
    <span class="token class-name">Long</span> execute <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">&quot;order:token:&quot;</span> <span class="token operator">+</span> orderId<span class="token punctuation">)</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>execute <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//            令牌不对，不能提交订单</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;订单令牌不正确&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//        令牌对了，提交订单</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;订单令牌验证成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//        然后开始之后的操作 整体的下单流程</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33),f=[b];function _(y,h){return s(),a("div",null,f)}const q=n(v,[["render",_],["__file","23-幂等性问题.html.vue"]]);export{q as default};
