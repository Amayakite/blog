const n=JSON.parse('{"key":"v-532a2e6f","path":"/JavaLang/Thread/2-Java%E7%BA%BF%E7%A8%8B.html","title":"2-Java线程","lang":"zh-CN","frontmatter":{"title":"2-Java线程","date":"2022-01-15T16:12:30.000Z","category":"Thread","tag":["Java","JavaSE","Thread"],"description":"创建和运行线程 方法一直接使用Thread 非常简单，只需要实现run方法即可，然后创建线程对象，并调用start方法即可。 import lombok.extern.slf4j.Slf4j; @Slf4j(topic = \\"c.testThread\\") public class MyThread extends Thread { public void run() { // 创建线程对象，并重写run方法，这个之前已经看腻了 Thread t = new Thread(() -&gt; log.info(\\"这是线程的run方法\\")); // 指定线程名称 t.setName(\\"我是线程1\\"); // 启动线程 t.start(); log.debug(\\"主线程\\"); } }","head":[["meta",{"property":"og:url","content":"http://www.amayakite.github.io/JavaLang/Thread/2-Java%E7%BA%BF%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Amayakite Blogs"}],["meta",{"property":"og:title","content":"2-Java线程"}],["meta",{"property":"og:description","content":"创建和运行线程 方法一直接使用Thread 非常简单，只需要实现run方法即可，然后创建线程对象，并调用start方法即可。 import lombok.extern.slf4j.Slf4j; @Slf4j(topic = \\"c.testThread\\") public class MyThread extends Thread { public void run() { // 创建线程对象，并重写run方法，这个之前已经看腻了 Thread t = new Thread(() -&gt; log.info(\\"这是线程的run方法\\")); // 指定线程名称 t.setName(\\"我是线程1\\"); // 启动线程 t.start(); log.debug(\\"主线程\\"); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-17T15:14:40.000Z"}],["meta",{"property":"article:author","content":"Amayakite"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaSE"}],["meta",{"property":"article:tag","content":"Thread"}],["meta",{"property":"article:published_time","content":"2022-01-15T16:12:30.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-17T15:14:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2-Java线程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-15T16:12:30.000Z\\",\\"dateModified\\":\\"2023-06-17T15:14:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amayakite\\",\\"url\\":\\"https://github.com/Amayakite\\"}]}"]]},"headers":[{"level":2,"title":"创建和运行线程","slug":"创建和运行线程","link":"#创建和运行线程","children":[{"level":3,"title":"方法一直接使用Thread","slug":"方法一直接使用thread","link":"#方法一直接使用thread","children":[]},{"level":3,"title":"方法二使用Runnable配合Thread","slug":"方法二使用runnable配合thread","link":"#方法二使用runnable配合thread","children":[]},{"level":3,"title":"方法三FutureTask配合Thread","slug":"方法三futuretask配合thread","link":"#方法三futuretask配合thread","children":[]},{"level":3,"title":"查看进程线程的方法","slug":"查看进程线程的方法","link":"#查看进程线程的方法","children":[]}]},{"level":2,"title":"原理之线程运行","slug":"原理之线程运行","link":"#原理之线程运行","children":[{"level":3,"title":"栈与栈帧","slug":"栈与栈帧","link":"#栈与栈帧","children":[]},{"level":3,"title":"线程的上下文切换(Thread Context Switch)","slug":"线程的上下文切换-thread-context-switch","link":"#线程的上下文切换-thread-context-switch","children":[]}]},{"level":2,"title":"线程的方法","slug":"线程的方法","link":"#线程的方法","children":[{"level":3,"title":"常用方法一览","slug":"常用方法一览","link":"#常用方法一览","children":[]},{"level":3,"title":"Sleep","slug":"sleep","link":"#sleep","children":[]},{"level":3,"title":"Yield","slug":"yield","link":"#yield","children":[]},{"level":3,"title":"线程优先级","slug":"线程优先级","link":"#线程优先级","children":[]},{"level":3,"title":"join","slug":"join","link":"#join","children":[]},{"level":3,"title":"Join的应用实例：同步应用","slug":"join的应用实例-同步应用","link":"#join的应用实例-同步应用","children":[]},{"level":3,"title":"Join设定最大时间","slug":"join设定最大时间","link":"#join设定最大时间","children":[]},{"level":3,"title":"interrupt打断阻塞中的sleep、wait、join的线程","slug":"interrupt打断阻塞中的sleep、wait、join的线程","link":"#interrupt打断阻塞中的sleep、wait、join的线程","children":[]},{"level":3,"title":"interrupt打断正常的线程","slug":"interrupt打断正常的线程","link":"#interrupt打断正常的线程","children":[]},{"level":3,"title":"interrupt实例：两阶段终止模式","slug":"interrupt实例-两阶段终止模式","link":"#interrupt实例-两阶段终止模式","children":[]},{"level":3,"title":"Thread.isInterrupted和普通的isInterrupted的区别","slug":"thread-isinterrupted和普通的isinterrupted的区别","link":"#thread-isinterrupted和普通的isinterrupted的区别","children":[]},{"level":3,"title":"interrupt打断park线程","slug":"interrupt打断park线程","link":"#interrupt打断park线程","children":[]},{"level":3,"title":"不推荐使用的方法","slug":"不推荐使用的方法","link":"#不推荐使用的方法","children":[]},{"level":3,"title":"主线程和守护线程","slug":"主线程和守护线程","link":"#主线程和守护线程","children":[]},{"level":3,"title":"线程的五种状态","slug":"线程的五种状态","link":"#线程的五种状态","children":[]},{"level":3,"title":"线程的六种状态","slug":"线程的六种状态","link":"#线程的六种状态","children":[]}]}],"git":{"createdTime":1687006308000,"updatedTime":1687014880000,"contributors":[{"name":"Amayakite","email":"amayakite@qq.com","commits":2}]},"readingTime":{"minutes":19.27,"words":5782},"filePathRelative":"JavaLang/Thread/2-Java线程.md","localizedDate":"2022年1月15日","excerpt":"<h2> 创建和运行线程</h2>\\n<h3> 方法一直接使用Thread</h3>\\n<p>非常简单，只需要实现run方法即可，然后创建线程对象，并调用start方法即可。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">lombok<span class=\\"token punctuation\\">.</span>extern<span class=\\"token punctuation\\">.</span>slf4j<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Slf4j</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token annotation punctuation\\">@Slf4j</span><span class=\\"token punctuation\\">(</span>topic <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"c.testThread\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyThread</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Thread</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token comment\\">//        创建线程对象，并重写run方法，这个之前已经看腻了</span>\\n        <span class=\\"token class-name\\">Thread</span> t <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span> log<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">info</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"这是线程的run方法\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//        指定线程名称</span>\\n        t<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setName</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"我是线程1\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//        启动线程</span>\\n        t<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        log<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">debug</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"主线程\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
