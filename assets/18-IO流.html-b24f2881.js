import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-3ab2953d.js";const i="/images/Java/JavaSE/18-IO流/文件流的概念-16368079080021.svg",u="/images/Java/JavaSE/18-IO流/文件流的概念1.svg",r="/images/Java/JavaSE/18-IO流/image-20211113210418512.png",d="/images/Java/JavaSE/18-IO流/image-20211113223551420.png",k="/images/Java/JavaSE/18-IO流/image-20211113224951257.png",m="/images/Java/JavaSE/18-IO流/image-20211113225231021.png",v="/images/Java/JavaSE/18-IO流/image-20211113225003082.png",b="/images/Java/JavaSE/18-IO流/image-20211113225259642.png",g="/images/Java/JavaSE/18-IO流/Java之IO流.svg",f="/images/Java/JavaSE/18-IO流/image-20211113233244380.png",y="/images/Java/JavaSE/18-IO流/image-20211113233608670.png",w="/images/Java/JavaSE/18-IO流/image-20211113233706976.png",h="/images/Java/JavaSE/18-IO流/image-20211114113542537.png",S="/images/Java/JavaSE/18-IO流/image-20211114113328836.png",q="/images/Java/JavaSE/18-IO流/image-20211114113348070.png",x="/images/Java/JavaSE/18-IO流/image-20211114121718636.png",_="/images/Java/JavaSE/18-IO流/image.svg",I="/images/Java/JavaSE/18-IO流/images.svg",O="/images/Java/JavaSE/18-IO流/image-20211114175317610.png",j="/images/Java/JavaSE/18-IO流/image-20211114175212713.png",F="/images/Java/JavaSE/18-IO流/传输原理.svg",B="/images/Java/JavaSE/18-IO流/image-20211114235905170.png",P="/images/Java/JavaSE/18-IO流/image-20211115114236906.png",R={},E=e('<h2 id="文件" tabindex="-1"><a class="header-anchor" href="#文件" aria-hidden="true">#</a> 文件</h2><p>对于这玩意我们已经习以为常了，就是保存数据的地方，比如一张图片，一个文档，一个表格，一个json数据集等</p><p>不过那些都不是重点，接下来说说文件流的概念</p><h3 id="文件流" tabindex="-1"><a class="header-anchor" href="#文件流" aria-hidden="true">#</a> 文件流</h3><p>文件在程序中是以流的形式来操作的</p><figure><img src="'+i+'" alt="文件流的概念" tabindex="0" loading="lazy"><figcaption>文件流的概念</figcaption></figure><p>流：<strong>数据在数据源（文件）和程序（内存）之间经历的路径</strong></p><p>输入流：<strong>数据从数据源（文件）到程序（内存）的路径</strong></p><p>输出流：<strong>程序从（内存）到数据源（文件）的路径</strong></p><p>上面这些是比较重要的..建议倒背如流，如果背不下来就记住：输入流是把数据从文件中提取到程序里，输出流是把数据丢到文件里，如果还是不懂的话：</p><figure><img src="'+u+'" alt="文件流的概念1" tabindex="0" loading="lazy"><figcaption>文件流的概念1</figcaption></figure><p>是不是突然就明白了</p><p>那么接下来说说该怎么操作文件：</p><p>（其实相比于集合，多线程，这玩意真的算是挺简单的）</p><h3 id="file-常用的文件操作" tabindex="-1"><a class="header-anchor" href="#file-常用的文件操作" aria-hidden="true">#</a> File-常用的文件操作</h3><blockquote><p>创建文件对象相关构造器和方法</p></blockquote><ul><li><code>new File(String pathname)</code>根据路径结构创建一个FIle对象</li><li><code>new File(File parent,String child)</code>根据父目录<strong>文件</strong>+子路径构建</li><li><code>new File(String parent,String child)</code>根据父目录+子路径构建</li></ul><figure><img src="'+r+`" alt="image-20211113210418512" tabindex="0" loading="lazy"><figcaption>image-20211113210418512</figcaption></figure><p>接下来简单的演示下创建文件：</p><p>方法1：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//创建file对象 这个file只是一个对象而已，只有当他使用了createNewFile才会真正的将文件放入到本地磁盘</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;d:/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里用 / 或者\\\\ 都可以 看个人习惯 我是用习惯了Linux所以才/</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">//调用方法创建文件</span>
        file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里可能会抛出IO异常</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件创建成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法2:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">File</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;d:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        这里通过parent来创建 如果说前缀是个盘符的话 直接xx: 就可以了</span>
    <span class="token comment">//        如果要在目录下创建的话 就要用File(&quot;xx:/filePath&quot;)</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span><span class="token string">&quot;b.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;创建成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法3:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//        第三种方式</span>
    <span class="token class-name">String</span> parentPath <span class="token operator">=</span> <span class="token string">&quot;d:/&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">&quot;c.txt&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>parentPath<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>常用的获取文件信息的相关方法</p></blockquote><ul><li><code>getName</code> 获取名称</li><li><code>getAbsolutePath</code> 获取绝对路径</li><li><code>getParent</code> 获取父级路径</li><li><code>length</code> 文件大小(字节)</li><li><code>exists</code> 这个文件是否存在</li><li><code>isFile</code> 是不是一个文件夹</li><li><code>isDirectory</code> 是不是一个文件夹</li></ul><p>通常来说，想获取啥百度即可，但是也有例外：(下面这些代码全都是我刚装上的GitHub Copilot插件自动生成的..)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//txt: Hello 123456 你好</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//        随便拿一个文件测试</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件名：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件路径：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;绝对路径：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;父级路径：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件大小：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是否存在：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是不是一个文件：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是不是一个文件夹：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是不是隐藏文件：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">isHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是不是只读文件：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是不是可写文件：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是不是可执行文件：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">canExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件最后修改时间：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//    文件名：a.txt</span>
<span class="token comment">//    文件路径：D:\\a.txt</span>
<span class="token comment">//    绝对路径：D:\\a.txt</span>
<span class="token comment">//    父级路径：D:\\</span>
<span class="token comment">//    文件大小：19</span>
<span class="token comment">//    是否存在：true</span>
<span class="token comment">//    是不是一个文件：true</span>
<span class="token comment">//    是不是一个文件夹：false</span>
<span class="token comment">//    是不是隐藏文件：false</span>
<span class="token comment">//    是不是只读文件：true</span>
<span class="token comment">//    是不是可写文件：true</span>
<span class="token comment">//    是不是可执行文件：true</span>
<span class="token comment">//    文件最后修改时间：1636812170769</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于字节：一个汉字三个字节，一个字母/数字/符号1个字节</p><blockquote><p>目录的操作和文件删除</p></blockquote><p><code>mkdir</code>创建一级目录，<code>mkdirs</code>创建多级目录，<code>delete</code>删除空目录或文件</p><blockquote><p>删除一个文件</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;d:/new1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        判断是否存在</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//          删除</span>
        file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;删除成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>删除或创建一个目录</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//    判断 d:/demo2目录是否存在，存在就删除，否则就创建</span>
<span class="token comment">//    在Java编程中，目录也被当作文件</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;d:/demo2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;删除成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;删除失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;目录不存在.正在创建&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;创建成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;创建失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>删除多级目录</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//    判断 d:/demo/a/b/c目录是否存在，如果存在就提示已存在，否则就创建</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">File</span> directoryPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;d:/demo/a/b/c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>directoryPath<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;该目录已存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//            创建多级目录 mkdirs() ;mkdir()--创建一级目录</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>directoryPath<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;创建成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;创建失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些差不多就是最简单的操作文件流程了，不过真的要往里面写、读数据，就得用到IO流：</p><h2 id="io流原理及流的分类" tabindex="-1"><a class="header-anchor" href="#io流原理及流的分类" aria-hidden="true">#</a> IO流原理及流的分类</h2><p>先来说说他的原理</p><ul><li>I/O是Input/Output的缩写，I/O技术是非常实用的技术，用于处理数据传输，例如读写文件，网络通讯等</li><li>Java程序中，对于数据的输入、输出操作类似于<code>流(Stream)</code>方式进行</li><li><code>java.io</code>包下提供了各种&quot;流&quot;类和接口，用于获取不同类型的数据，并通过方法输入或输出数据</li><li>输入<code>input</code>：读取外部数据(磁盘，光盘，数据库，网络，另一个程序)等存储设备的数据到程序（内存）中</li><li>输出<code>output</code>:将(内存)数据输出到相应的存储设备中</li></ul><figure><img src="`+d+'" alt="image-20211113223551420" tabindex="0" loading="lazy"><figcaption>image-20211113223551420</figcaption></figure><h3 id="流的分类" tabindex="-1"><a class="header-anchor" href="#流的分类" aria-hidden="true">#</a> 流的分类</h3><ul><li>在Java编程中，按操作数据单位不同分为：字节流(8-bit)，字符流(按字符，对应几个字节跟文件编码挂钩(ASCII,UTF-8,Uncode...)) <ul><li>如果说从操作的单位来说，字符流的效率更高，字节流每次读取的单位比较少（一个字节一个字节的读取），效率会低一些，<strong>文本文件</strong>使用字符流来操作比较好</li><li>在操作<strong>二进制文件</strong>的时候(声音，视频，Word文档等文件)，使用字节流的方式来操作，能保证我们的操作是无损操作</li></ul></li><li>按数据流的流向不同分为：输入流，输出流</li><li>按流的角色不同分为：节点流，处理流/包装流</li></ul><table><thead><tr><th style="text-align:center;">抽象基类</th><th style="text-align:center;">字节流</th><th style="text-align:center;">字符流</th></tr></thead><tbody><tr><td style="text-align:center;">输入流</td><td style="text-align:center;"><code>inputStream</code></td><td style="text-align:center;"><code>Reader</code></td></tr><tr><td style="text-align:center;">输出流</td><td style="text-align:center;"><code>OutputStream</code></td><td style="text-align:center;"><code>Writer</code></td></tr></tbody></table><figure><img src="'+k+'" alt="image-20211113225259642" tabindex="0" loading="lazy"><figcaption>image-20211113225259642</figcaption></figure><figure><img src="'+m+'" alt="image-20211113225231021" tabindex="0" loading="lazy"><figcaption>image-20211113225231021</figcaption></figure><figure><img src="'+v+'" alt="image-20211113225003082" tabindex="0" loading="lazy"><figcaption>image-20211113225003082</figcaption></figure><figure><img src="'+b+'" alt="image-20211113225259642.png" tabindex="0" loading="lazy"><figcaption>image-20211113225259642.png</figcaption></figure><p>上方是这四个类的继承关系图，查看他们的源码可以发现：他们<strong>都是抽象类</strong>，没有直接实现的方法，所以一般我们操作他们都是通过他们的<strong>实现类</strong>来进行</p><ol><li>Java的IO流共涉及40多个类，实际上他们非常规则，都是从上述4个抽象基类派生的</li><li>由这四个类派生出来的子类名称都是以其父类名称作为子类名后缀</li></ol><p>在正式开始前，再回顾下，<code>流</code>和<code>文件</code>的关系：</p><p>如果说文件像是一个物流中心，我们的程序像是一个用户，那么流就像是外卖小哥一样，从物流中心把文件拿出来，送到用户手上，如果说用户要寄东西也是先让外卖小哥过来取东西，让后送到物流中心，然后传递给更多的用户，流就是一个中间件</p><h3 id="java-io流结构图" tabindex="-1"><a class="header-anchor" href="#java-io流结构图" aria-hidden="true">#</a> Java IO流结构图</h3><figure><img src="'+g+'" alt="Java之IO流" tabindex="0" loading="lazy"><figcaption>Java之IO流</figcaption></figure><p>前面也说到过，这玩意子类特别多，但是实际上我们只需要掌握其中几个就行，其他的都是大同小异。</p><p>接下来一个一个的了解：</p><h2 id="inputerstream-字节输入流" tabindex="-1"><a class="header-anchor" href="#inputerstream-字节输入流" aria-hidden="true">#</a> <code>InputerStream</code> 字节输入流</h2><ul><li><code>InputStream</code>抽象类是所有类字节输入流的超类</li><li><code>InputStream</code>常用子类 <ol><li><code>FileInputStream</code> 文件输入流</li><li><code>BufferedInputStream</code>缓冲字节输入流</li><li><code>ObjectInputStream</code>对象字节输入流</li></ol></li></ul><p>结构图：</p><figure><img src="'+f+'" alt="image-20211113233244380" tabindex="0" loading="lazy"><figcaption>image-20211113233244380</figcaption></figure><h3 id="fileinputstream文件字节输入流" tabindex="-1"><a class="header-anchor" href="#fileinputstream文件字节输入流" aria-hidden="true">#</a> <code>FileInputStream</code>文件字节输入流</h3>',63),D={href:"https://www.matools.com/file/manual/jdk_api_1.8_google/java/io/FileInputStream.html",target:"_blank",rel:"noopener noreferrer"},W=e('<p>构造方法：</p><figure><img src="'+y+'" alt="image-20211113233608670" tabindex="0" loading="lazy"><figcaption>image-20211113233608670</figcaption></figure><p>所有方法：</p><figure><img src="'+w+`" alt="image-20211113233706976" tabindex="0" loading="lazy"><figcaption>image-20211113233706976</figcaption></figure><p>可以看到，他里面包含的方法并不是很多，除去构造函数，只有9个</p><p>最常用的个人认为是这个：<code>read(byte[] b ,int off ,int len)</code> 将输入流中最多len个字节的数据读取入一个byte数组中</p><p>接下来演示下：</p><blockquote><p>单个字节读取</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* 演示读取文件 单个字节的读取 效率比较低
* <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span> IO异常
*/</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">&quot;d:/a.txt&quot;</span><span class="token punctuation">;</span> <span class="token comment">// a.txt:Hello 123456 你好</span>
    <span class="token keyword">int</span> read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//        创建哦们的FileInputStream对象，用于读取文件</span>
    <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//会抛出 FileNotFoundException 编译异常-文件可能不存在</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token comment">//从该输出流读取文件的一个字节，如果到达末尾，则返回-1</span>
        <span class="token comment">//read可能会抛出的异常IOException</span>
        
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回的是int类型，把int转换成char打印</span>
        <span class="token comment">//out: Hello 123456 ä½ å¥½</span>
        <span class="token comment">//可以看到 中文乱码了... 一个汉字占用三个字节  read一次读取一个字节</span>
    <span class="token punctuation">}</span>


    <span class="token comment">//读取完毕后一定要关闭流，这里是以演示为目的将异常Throws，实际使用时需要</span>
    <span class="token comment">//try...catch...finally(在这里关闭流)</span>
    <span class="token comment">//不关闭流的话，会造成极大的资源浪费（尤其是多线程处理时）</span>
    
    fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//这里关闭的时候也可能会抛出IOException异常 一般情况下来说，close在运行时出现异常都是致命的错误导致的</span>
    
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>一次性读取多个值</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 演示读取文件 单个字节的读取 效率比较低--&gt;使用read(byte[])来解决
     *
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span> IO异常
     */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">&quot;d:/a.txt&quot;</span><span class="token punctuation">;</span> <span class="token comment">//Hello 123456</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 一次读取8个数据</span>
    <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//        如果读取正常这里返回到的是我们实际读取到的字节数</span>
    <span class="token comment">//        int read = fileInputStream.read(buffer); //read的是读取到的字节数</span>


    <span class="token keyword">while</span> <span class="token punctuation">(</span>fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//Hello 123456</span>
        <span class="token comment">//            可以看到 英文依旧是没有任何问题 (如果是中文的话问题会依旧)</span>
        <span class="token comment">//            第一次： [H,e,l,l,o, ,1,2]</span>
        <span class="token comment">//            第二次： [3,4,5,6,负数 ,负数,负数,负数]</span>

    <span class="token punctuation">}</span>
    fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fileoutputstream-文件字节输出流" tabindex="-1"><a class="header-anchor" href="#fileoutputstream-文件字节输出流" aria-hidden="true">#</a> <code>FileOutputStream</code> 文件字节输出流</h3><figure><img src="`+h+'" alt="image-20211114113542537" tabindex="0" loading="lazy"><figcaption>image-20211114113542537</figcaption></figure>',13),J=n("code",null,"InputStream",-1),T=n("code",null,"InputStream",-1),z={href:"https://www.matools.com/file/manual/jdk_api_1.8_google/java/io/FileOutputStream.html",target:"_blank",rel:"noopener noreferrer"},N=e('<figure><img src="'+S+'" alt="image-20211114113328836" tabindex="0" loading="lazy"><figcaption>image-20211114113328836</figcaption></figure><figure><img src="'+q+`" alt="image-20211114113348070" tabindex="0" loading="lazy"><figcaption>image-20211114113348070</figcaption></figure><p>接下来使用<code>FIleOutPutStream</code>在文件a.txt中写入 <code>hello , world. </code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 演示使用FileOutputStream 写入文件
     * 将数据写到文件中
     * 如果该文件不存在，则创建该文件
     */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//创建 FileOutputStream对象</span>
    <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">&quot;e:/aaa.txt&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
<span class="token comment">//得到FileOutputStream对象</span>
        
<span class="token comment">//1.  new FileOutputStream(filePath);这是覆盖创建，当写入内容时，会覆盖原来的内容</span>
<span class="token comment">//fileOutputStream = new FileOutputStream(filePath);</span>
<span class="token comment">//这里也有可能会有FileNotFoundException异常，可以直接在下面用IO流异常抛出</span>

<span class="token comment">//2. 可以看到构造方法中还有一个append参数的方法。并且可以得知将该项设置为true就是追加写入</span>
fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//3. 无论使用哪种方式来创建文件写入流，文件不存在都会被创建</span>

<span class="token comment">//写入一个字节</span>
<span class="token comment">//fileOutputStream.write(&#39;a&#39;);//Char 会自动转换成int</span>

<span class="token comment">//写入字符串</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
        
<span class="token comment">//fileOutputStream.write(str.getBytes(StandardCharsets.UTF_8));</span>
<span class="token comment">//字符串本身提供了一个getBytes方法 可以将字符串转换成一个byte[]数组，而且可以指定编码</span>
<span class="token comment">//简而言之，这个方法可以把一个字符串转换成一个字节数组</span>

<span class="token comment">//还有一个方法来写入字符串，指定数量</span>
<span class="token comment">//fileOutputStream.write(str.getBytes(StandardCharsets.UTF_8),0,str.length());</span>
<span class="token comment">//指定从0开始，到str.length结束（全部写进去）</span>
        
        fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//只写入前5个字节:hello</span>


        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;写入成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里依旧可能有异常，老一套处理</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>小练：使用字字节输入流完成图片、音乐、软件的copy</p></blockquote><p>思路：</p><figure><img src="`+x+`" alt="image-20211114121718636" tabindex="0" loading="lazy"><figcaption>image-20211114121718636</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">//            获取输入流（打开文件）</span>
        fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;d:/壁纸/不动鸣神，泡影断灭-2560x1440.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//            源文件</span>

        <span class="token comment">//            获取输出流</span>
        fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;d:/test.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//            要写入的文件</span>

        <span class="token comment">//            定义每次读取的长度 每次读取1024字节/1kb 提高读取速度（每次读取1byte太慢了）</span>
        <span class="token comment">//            当然也可以:1024*1024 1MB</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">//            读取文件</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>count<span class="token operator">=</span>fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//                边度边写</span>
            <span class="token comment">//                使用len的方法是因为：防止最后一次额外填写无意义的0</span>
            <span class="token comment">//                假如这个文件是1039byte</span>
            <span class="token comment">//                 第一次读取了1024byte</span>
            <span class="token comment">//                那么还剩余15byte</span>
            <span class="token comment">//                如果不用这个方法，第二次写进去的还是1024byte</span>
            <span class="token comment">//                也就是多写了数据进文件，就会导致文件异常</span>
            <span class="token comment">//                所以每次只写入byte[]中有意义的数据</span>
            fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;复制成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//                关闭流  当然一般情况下使用的时候要：if(xxx!=null) xxx.close</span>
            fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;关闭流成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="filereader和filewriter" tabindex="-1"><a class="header-anchor" href="#filereader和filewriter" aria-hidden="true">#</a> <code>FileReader</code>和<code>FileWriter</code></h2><h2 id="节点流和处理流" tabindex="-1"><a class="header-anchor" href="#节点流和处理流" aria-hidden="true">#</a> 节点流和处理流</h2><p>节点流可以从一个特定的数据源读写数据，如<code>FileReader</code>、<code>FileWriter</code></p><p>节点流的所属</p><table><thead><tr><th style="text-align:center;">分类</th><th style="text-align:center;">字节输入流</th><th style="text-align:center;">字节数出流</th><th style="text-align:center;">字符输入流</th><th style="text-align:center;">字符输出流</th></tr></thead><tbody><tr><td style="text-align:center;">抽象基类</td><td style="text-align:center;">InputStream</td><td style="text-align:center;">OutputStream</td><td style="text-align:center;">Reader</td><td style="text-align:center;">Writer</td></tr><tr><td style="text-align:center;">访问文件</td><td style="text-align:center;">FileInputStream</td><td style="text-align:center;">FileOutputStream</td><td style="text-align:center;">FileReader</td><td style="text-align:center;">FileWriter</td></tr><tr><td style="text-align:center;">访问数组</td><td style="text-align:center;">ByteArrayInputStream</td><td style="text-align:center;">ByteArrayOutputStream</td><td style="text-align:center;">CharArrayReader</td><td style="text-align:center;">CharArrayWriter</td></tr><tr><td style="text-align:center;">访问管道</td><td style="text-align:center;">PipedInputStream</td><td style="text-align:center;">PipedOutputStream</td><td style="text-align:center;">PipedReader</td><td style="text-align:center;">PipedWriter</td></tr><tr><td style="text-align:center;">访问字符串</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">StringReader</td><td style="text-align:center;">StringWriter</td></tr></tbody></table><figure><img src="`+_+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>节点流可以直接操作数据，好处是零距离和数据接触，坏处是他的灵活性可能会收到一些影响，功能性不是很强大</p><p>Java的设计者为了解决这个点，制造了一个<strong>处理流</strong>（也叫包装流），是<code>连接</code><strong>已存在的流</strong>（节点流或处理流）之上，为程序提供更为强大的读写功能，如<code>BufferedReader</code>、<code>BufferedWriter</code></p><p><code>BufferedReader</code>类中，有属性Reader，即可以封装一个节点流，<strong>该节点流可以是任意的</strong>，只要是Reader子类</p><figure><img src="'+I+`" alt="images" tabindex="0" loading="lazy"><figcaption>images</figcaption></figure><p>处理流所用的模式也叫<strong>修饰器模式</strong></p><table><thead><tr><th style="text-align:center;">分类</th><th style="text-align:center;">字节输入流</th><th style="text-align:center;">字节输出流</th><th style="text-align:center;">字符输入流</th><th style="text-align:center;">字符输出流</th></tr></thead><tbody><tr><td style="text-align:center;">缓冲流</td><td style="text-align:center;">BufferedInputStream</td><td style="text-align:center;">BufferedOutputStream</td><td style="text-align:center;">BufferedReader</td><td style="text-align:center;">BufferedWriter</td></tr><tr><td style="text-align:center;">转换流</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">InputStreamReader</td><td style="text-align:center;">OutputStreamWriter</td></tr><tr><td style="text-align:center;">对象类</td><td style="text-align:center;">ObjectInputStream</td><td style="text-align:center;">ObjectoutputStream</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">抽象基类</td><td style="text-align:center;">FilterInputStream</td><td style="text-align:center;">FilterOutputStream</td><td style="text-align:center;">FilterReader</td><td style="text-align:center;">FilterWriter</td></tr><tr><td style="text-align:center;">打印流</td><td style="text-align:center;"></td><td style="text-align:center;">PrintStream</td><td style="text-align:center;"></td><td style="text-align:center;">PrintWriter</td></tr><tr><td style="text-align:center;">推回输入流</td><td style="text-align:center;">PushbackInputStream</td><td style="text-align:center;"></td><td style="text-align:center;">PushbackReader</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">特殊流</td><td style="text-align:center;">DataInputStream</td><td style="text-align:center;">DataOutputStream</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><h3 id="节点流和处理流的区别和联系" tabindex="-1"><a class="header-anchor" href="#节点流和处理流的区别和联系" aria-hidden="true">#</a> 节点流和处理流的区别和联系</h3><ol><li>节点流是底层流/低级流，直接跟数据源相接</li><li>处理流（<strong>包装流</strong>）包装节点流，既可以消除不同节点流之间的差异，也可以提供更方便的方式来完成输入输出</li><li>处理流对节点流进行包装，采用了修饰器模式，不会直接与数据源相连</li></ol><blockquote><p>模拟修饰器模式</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> testReaderene_ <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyBufferedReader_</span> myBufferedReader_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBufferedReader_</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyFileReader_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myBufferedReader_<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">MyBufferedReader_</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyStringReader_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MyReader_</span> <span class="token punctuation">{</span> <span class="token comment">//抽象类 可以把这个类看成Reader</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//这个就可以当做节点流</span>
<span class="token keyword">class</span> <span class="token class-name">MyFileReader_</span> <span class="token keyword">extends</span> <span class="token class-name">MyReader_</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;对文件进行读取&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//这个同上</span>
<span class="token keyword">class</span> <span class="token class-name">MyStringReader_</span> <span class="token keyword">extends</span> <span class="token class-name">MyReader_</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;对字符串进行读取&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 做成处理流/包装流
 */</span>
<span class="token keyword">class</span> <span class="token class-name">MyBufferedReader_</span> <span class="token keyword">extends</span> <span class="token class-name">MyReader_</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">MyReader_</span> reader_<span class="token punctuation">;</span><span class="token comment">//属性时myReader类型</span>

    <span class="token comment">//    接收MyReader_子类对象</span>
    <span class="token keyword">public</span> <span class="token class-name">MyBufferedReader_</span><span class="token punctuation">(</span><span class="token class-name">MyReader_</span> reader_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>reader_ <span class="token operator">=</span> reader_<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//封装一层</span>
        reader_<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//    让方法更灵活  扩展了原先的readFile</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            reader_<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//    扩展 readString</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readString</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            reader_<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理流的功能主要体现在以下两个方面：</p><ol><li>性能的提高：主要以增加缓冲的方式来提高输入输出的效率</li><li>操作的便捷：处理流可能提供了一系列便捷方式来一次输入输出大批量数据，使用更加灵活方便</li></ol><h2 id="处理流-bufferedreader和bufferedwriter" tabindex="-1"><a class="header-anchor" href="#处理流-bufferedreader和bufferedwriter" aria-hidden="true">#</a> 处理流-BufferedReader和BufferedWriter</h2>`,27),H=n("li",null,[n("code",null,"BufferedReader"),s("和"),n("code",null,"BufferedWriter"),s("属于字符流，是按照字符来读取数据的")],-1),M=n("li",null,"关闭时，只需要关闭外层流即可，即，只需要关闭处理流（根据之前的分析也可以得出，真正来操作数据的其实还是我们的节点流，处理流是帮助我们让操作数据更加简单方便，所以处理流中大概率是有封装close的）",-1),U={href:"https://www.matools.com/file/manual/jdk_api_1.8_google/java/io/BufferedReader.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.matools.com/file/manual/jdk_api_1.8_google/java/io/BufferedWriter.html",target:"_blank",rel:"noopener noreferrer"},L=e('<p>这两位是用来处理字符流的，即：Reader和Writer下的流都可以经由他们之手</p><figure><img src="'+O+`" alt="image-20211114175317610" tabindex="0" loading="lazy"><figcaption>image-20211114175317610</figcaption></figure><blockquote><p>使用BufferedReader读取文本文件，并展示在控制台</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建一个BufferedReader对象</span>
    <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">&quot;D:\\\\JavaStudy\\\\10-线程\\\\src\\\\com\\\\work_\\\\testPool.java&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">BufferedReader</span> bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//FileReader可能会出异常，直接throws</span>
    <span class="token comment">//        读取，其实底层用的还是fileReader的读取</span>
    <span class="token class-name">String</span> line<span class="token punctuation">;</span> <span class="token comment">//按行读取 性能效率高</span>
    <span class="token comment">//        说明：</span>
    <span class="token comment">//        1.bufferedReader.readLine() 是按行读取，</span>
    <span class="token comment">//        当返回null时表示文件读取完毕</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//        关闭流 这里只需要关闭包装流（BufferedReader）即可 看源码可以发现他底层会调用节点流的close</span>
    bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用BufferedWriter写入文件</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBufferedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">&quot;d:/a.txt&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//        创建一个BufferedWriter</span>
    <span class="token class-name">BufferedWriter</span> bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        要追加的话和往常一样在FileWrite中加个true即可</span>
    <span class="token comment">//        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(filePath, true));</span>

    bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        插入一个换行</span>
    <span class="token comment">//        bufferedWriter.write(&#39;\\r&#39;);</span>
    bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这也是插入一个换行，自动决定换行符是\\r还是\\n</span>
    bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用BufferedWriter和BufferedReady拷贝非二进制文件</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//        特别说明：</span>
    <span class="token comment">//        BufferedWriter和BufferedReader是按照字符来读取和操作的</span>
    <span class="token comment">//        所以不要去操作二进制文件</span>
    <span class="token comment">//        如果操作二进制文件[声音，视频，office文档，PDF，psd等]，可能会造成文件的损坏</span>

    <span class="token comment">//        使用BufferedReader和BufferedWriter来拷贝文集N</span>
    <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">&quot;E:\\\\MyProject\\\\blog_server\\\\modules\\\\admin/files.js&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> destFile <span class="token operator">=</span> <span class="token string">&quot;d:/a.txt&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> line<span class="token punctuation">;</span> <span class="token comment">//按行来读取</span>
    <span class="token comment">//        readline是读取一行的内容，但是没有带换行符</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//            读取完一行后换行，如果不换行的话整个文件都是在一行里了</span>
        writer<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;拷贝完毕&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;流和文件关闭完毕&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="处理流-bufferedinputstream和bufferedoutputstream" tabindex="-1"><a class="header-anchor" href="#处理流-bufferedinputstream和bufferedoutputstream" aria-hidden="true">#</a> 处理流-BufferedInputStream和BufferedOutputStream</h2><p>和刚刚的那两位很像，这两个也是包装流，来包装InputStream和OutputStream中的流：</p><figure><img src="`+j+`" alt="image-20211114175212713" tabindex="0" loading="lazy"><figcaption>image-20211114175212713</figcaption></figure><blockquote><p>接下来使用BufferedOutputStream和BufferInputStream来完成对图片的拷贝</p><p>当然，使用他也可以对文本文件进行复制（无论是否有汉字） 因为他们相当于是对</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copyImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">&quot;D:\\\\软件安装目录/Uninstall.exe&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> destFile <span class="token operator">=</span> <span class="token string">&quot;d:/a.exe&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">BufferedInputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BufferedOutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len<span class="token punctuation">;</span>
<span class="token comment">//        本质上跟FileInputStream和FileOutputStream是一样的用法</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;copy成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="深入理解处理-包装流" tabindex="-1"><a class="header-anchor" href="#深入理解处理-包装流" aria-hidden="true">#</a> 深入理解处理/包装流</h2><p>在上方案例中，可以看到，无论是字符包装流还是字节包装流，使用起来的方法都跟普通的一模一样，除了字符包装流中可以进行的换行之外，并没有感觉到任何的不同，反而还让整个程序变得套娃了起来...</p><p>那为什么要用它呢？</p><p>先来看下它的原理图：</p><figure><img src="`+F+`" alt="传输原理" tabindex="0" loading="lazy"><figcaption>传输原理</figcaption></figure><p>先来回顾下开始我们复制文件的情景</p><ul><li>当我们只使用<code>FileInputStream</code>和<code>FileOutputStream</code>来进行数据复制时，每次从数据源（文件）中读取一个字节，然后交给<code>b</code>，然后<code>b</code>再给<code>FileOutputStream</code>写入存储目的地（文件中），<strong>每此存储一个字节需要访问硬盘两次</strong>，以此往复直至存储完毕</li><li>如果使用了<code>BufferInputStream</code>和<code>BufferOutPutStream</code>来包装他们（作为缓冲区），<code>BufferInputStream</code>中自带一个8192大小的字节数组（可以翻看源码看到，同时在JDK文档中也可以发现，他有一个重载构造方法，传入一个int，该int的值将替换8192为缓冲数据大小），也就是说，每次可以从数据源（文件）中读取8192个字节的数据，然后一个一个的交给<code>b</code>，然后<code>b</code>存入<code>BuffetOutPutStream</code>的数组中，如果<code>BufferedOutputStream</code>中数据存放的数据满了，将会将数据写入到数据传输终点，然后<code>BufferInputStream</code>再从新从数据源读取8192大小的数据，以此往复直至存储完毕</li></ul><p>假设现在要存储一个8kb(8192个字节)大小的数据，需要复制到终点</p><table><thead><tr><th>方式</th><th>单次传输流程</th><th>访问硬存次数</th></tr></thead><tbody><tr><td>传统方法</td><td>每次传输一个字节需要访问一次数据源一次数据传输终点<br>共访问两次硬存</td><td>8x1024x2=16384</td></tr><tr><td>使用处理流包装</td><td>BufferedInputStream一次将所有数据读取完毕存入数组中<br>然后一个一个给b再存入BufferedOutputStream的数组<br>最终一次存入硬盘</td><td>2次<br>读取一次<br>存储一次</td></tr></tbody></table><p>使用<code>BufferedInputStream</code>和<code>BufferedOutputStream</code>虽然传输8KB的数据只需要访问2次硬盘，但是同样也需要在内存中一个一个的进行转存，这样感觉不是没什么区别吗？</p><p>此时就是计算机中最重要的特点了：</p><ul><li><strong>内存的访问速度（运算效率）比硬盘的访问速度（运算效率）要高得多的多</strong></li><li><code>BufferedInputStream</code>和<code>BufferedOutputStream</code>的工作基本都是在内存中完成的，对硬盘的操作次数十分少，这就相对的提高了效率</li><li>现在举例只是以8KB为例，使用<code>BufferedInputStream</code>和<code>BufferedOutputStream</code>就能比单使用<code>FileInputStream</code>和<code>FileOutputStream</code>的效率提高很多很多</li><li>我们现实生活中随便一个文件基本都是以MB为单位或者GB为单位，这时两者的效率就天差地别了，所以这就是使用<code>BufferedInputStream</code>和<code>BufferedOutputStream</code>作为缓冲区传输的原因。</li></ul><h2 id="对象流-objectinputstream和objectoutputstream" tabindex="-1"><a class="header-anchor" href="#对象流-objectinputstream和objectoutputstream" aria-hidden="true">#</a> 对象流-ObjectInputStream和ObjectOutputStream</h2><p>先来看一个需求：</p><ol><li>将 <code>int num =100</code>这个int数据保存到文件中，注意不是100数字，而是 int 100，并且能够从文件中直接恢复 int 100</li><li>将<code>Dog dog = new Dog(&quot;小黄&quot;,3)</code>这个dog对象保存到文件中，并且能够从文件中恢复</li><li>上面的要求，就是能够将基本数据类型或者对象进行<strong>序列化</strong>和<strong>反序列化</strong>操作</li></ol><h3 id="序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#序列化和反序列化" aria-hidden="true">#</a> 序列化和反序列化</h3><ol><li>序列化就是在保存数据时，<strong>保存数据的值</strong>和<strong>数据类型</strong></li><li>返序列化就是在恢复数据时，<strong>恢复数据的值</strong>和<strong>数据类型</strong></li><li>需要让某个对象支持序列化的机制，则必须让其是可序列化的，为了让某个类是可序列化的，该类必须要实现如下两个接口之一： <ul><li><code></code> 这是一个标记接口，没有方法</li><li><code>Externalizable</code> 这个接口有方法需要实现，因此一般都是使用<code>Serializable</code></li></ul></li></ol><h3 id="objectoutputstream和objectinputstream的简单介绍" tabindex="-1"><a class="header-anchor" href="#objectoutputstream和objectinputstream的简单介绍" aria-hidden="true">#</a> ObjectOutPutStream和ObjectInputStream的简单介绍</h3><ol><li>功能：提供了对基本类型或对象类型的序列化和反序列化功能</li><li><code>ObjectOutputStream</code>提供 <strong>序列化</strong>功能</li><li><code>ObjectInputStream</code>提供 <strong>反序列化</strong>功能</li><li>均为处理/包装流，因此需要传入<code>InputStream</code>和<code>OutputStream</code></li></ol><blockquote><p>简单演示</p></blockquote><p>序列化并存入文件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>outputStream_</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> testobjectoutputStream_ <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
<span class="token comment">//        序列化后，保存的文件格式不是纯文本，而是按照它的格式来保存</span>
        <span class="token class-name">String</span> filename <span class="token operator">=</span> <span class="token string">&quot;d:/data.txt&quot;</span><span class="token punctuation">;</span> <span class="token comment">//后缀随意，一般是dat</span>
        <span class="token class-name">ObjectOutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        序列化数据到d:/data.txt</span>
        outputStream<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int在底层会自动装箱，同时Integer实现了Serializable接口</span>
        outputStream<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//其他基本类型同理 建议是按照这种指定数据类型的存放</span>
        outputStream<span class="token punctuation">.</span><span class="token function">writeChar</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        outputStream<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span><span class="token number">155.3333</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        outputStream<span class="token punctuation">.</span><span class="token function">writeFloat</span><span class="token punctuation">(</span><span class="token number">9.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        切记：使用outPutStream不能直接write()</span>
<span class="token comment">//        因为write()并没有表示任何数据类型，比如write(100) 仅仅是存放了个100，而不是int 100</span>


        outputStream<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//放字符串是UTF String也是实现了Serializable接口</span>
<span class="token comment">//        保存一个Dog</span>
        outputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&quot;旺财&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        如果Dog没有实现序列化接口，运行时会抛出：java.io.NotSerializableException: com.outputStream_.Dog</span>
<span class="token comment">//        该类因为没有实现Serializable接口，所以不能被序列化 而导致的异常</span>

        outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数据保存完毕（序列化形式）&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//只需要实现这个借口即可，并不需要额外的去做任何事情</span>
<span class="token comment">//一般情况下来说，需要序列化的类都是public类，等下读取的时候会说到</span>
<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Dog{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>读取</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runDataForObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
    <span class="token comment">//        反序列化的文件</span>
    <span class="token class-name">String</span> filename <span class="token operator">=</span> <span class="token string">&quot;d:/data.txt&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//        读取</span>
    <span class="token comment">//        读取（反序列化）的顺序一定要和保存数据（序列化）的存放的顺序一致</span>
    <span class="token comment">//        否则就会出现异常</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objectInputStream<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objectInputStream<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objectInputStream<span class="token punctuation">.</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objectInputStream<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objectInputStream<span class="token punctuation">.</span><span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objectInputStream<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Object</span> readObject <span class="token operator">=</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ClassNotFoundException可能会抛出这个异常</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>readObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Dog{name=&#39;旺财&#39;, age=10}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>readObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//class com.outputStream_.Dog</span>

    <span class="token comment">//        这里有特别重要的细节</span>
    <span class="token comment">//        如果我们希望调用Dog的方法，比如getName</span>
    <span class="token comment">//        那么就要进行向下转型((Dog) readObject).getName();</span>
    <span class="token comment">//       那么 一定要将Dog包设置为共有 public 或者拷贝到跟这个包处于相同的目录之下（编译后目录） 总之，要这里能够引用到</span>
    <span class="token comment">//        当然上面这个只是小问题，应该可以通过import 的方式来解决</span>
    <span class="token comment">//        其次这个才是重要的问题：</span>
    <span class="token comment">//        在序列化的时候，可以理解为底层会根据这个Dog类中的所有属性和方法及其内容生成一个序列化ID</span>
    <span class="token comment">//        然后我在给他序列化并存放到文件的时候</span>
    <span class="token comment">//        并没有给Dog设置GetName方法</span>
    <span class="token comment">//        假设这个时候Dog的序列化ID是:123456789</span>
    <span class="token comment">//        然后我我现在给Dog加了个getName,那么它的序列化ID也会进行相应的改变：比如变成了高987654321</span>
    <span class="token comment">//        相当于是版本号不符</span>
    <span class="token comment">//        当我们尝试向下转型的时候，系统就会对比他们的序列化ID，如果不相同，则抛出异常</span>
    <span class="token comment">//        java.io.InvalidClassException: com.outputStream_.Dog;</span>
    <span class="token comment">//        local class incompatible: stream classdesc serialVersionUID = -6349792222849284547,</span>
    <span class="token comment">//        local class serialVersionUID = -7229961481147053677</span>
    <span class="token comment">//        所以在更改了Dog的方法、属性后，需要重新序列化保存再读取，即可解决问题</span>

    <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span> readObject<span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">//        关闭流</span>
    objectInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象读写流及序列化的注意事项和使用细节" tabindex="-1"><a class="header-anchor" href="#对象读写流及序列化的注意事项和使用细节" aria-hidden="true">#</a> 对象读写流及序列化的注意事项和使用细节</h3>`,38),V=n("ol",null,[n("li",null,[n("p",null,"读写顺序要一致")]),n("li",null,[n("p",null,[s("要求实现序列化或反序列化对象，需要实现"),n("code",null,"Serializable")])]),n("li",null,[n("p",null,[s("序列化的类中建议添加"),n("code",null,"SerializableUID"),s("，为了提高版本的兼容性")]),n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Dog"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"Serializable"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" name"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"int"),s(" age"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"//    serialVersionUID 序列化的版本号，可以提高序列化的兼容性"),s(`
`),n("span",{class:"token comment"},"//    加了这个后，当我们序列化完毕时，再给Dog添加属性，如：    public int hobby = 123;"),s(`
`),n("span",{class:"token comment"},"//    再进行反序列化，将不会抛出异常，而是返回该类型的默认值0/null等"),s(`
`),n("span",{class:"token comment"},"//    也就是说，加了这个，就相当于让他们对比的时候，不会认为我后面修改的这个Dog是一个新的对象"),s(`
`),n("span",{class:"token comment"},"//    而是将它认为是我之前这个Dog的扩充版-高级版"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token keyword"},"long"),s(" serialVersionUID "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1L"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"int"),s(" hobby "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"123"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])]),n("li",null,[n("p",null,[s("序列化对象时，默认将里面所有属性都进行了序列化，但"),n("code",null,"static"),s("和"),n("code",null,"transienet"),s("修饰的成员不会被序列化（放弃对这个值的序列化，最终反序列化的时候将没有这个信息-->返回这个"),n("code",null,"static"),s("在Dog类中的值、"),n("code",null,"transienet"),s("所属类型的默认值"),n("code",null,"0/null"),s("）")]),n("ul",null,[n("li",null,[n("p",null,[n("code",null,"transienet"),s("短暂的 转瞬即逝的 不可被序列化的：")])]),n("li",null,[n("p",null,"比方说我在Dog类中添加了两个属性"),n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token class-name"},"Blob"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"Hello World"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"transient"),s(),n("span",{class:"token class-name"},"String"),s(" color"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])])]),n("li",null,[n("p",null,'然后构造函数什么正常走，然后序列化，序列化完毕后我将Blob的值替换成了"HHH"')]),n("li",null,[n("p",null,"那么反序列化的后的输出结果为："),n("ul",null,[n("li",{name:"'旺财',",age:"10,",hobby:"123,",color:"'null'"},"toString()：Dog"),n("li",null,"Blob：HHH")])])])]),n("li",null,[n("p",null,"序列化对象时，要求里面属性的类型也需要实现序列化接口"),n("ul",null,[n("li",null,[s("比方说我在Dog中添加一个属性"),n("code",null,"Master master =new Master()")]),n("li",null,[s("但是我的Master类并没有实现"),n("code",null,"Serializable"),s("接口")]),n("li",null,[s("那么序列化的时候将会报错，所以实际使用的时候"),n("code",null,"Master"),s("也需要进行序列化（实现"),n("code",null,"Serializable"),s("接口）")])])]),n("li",null,[n("p",null,"序列化具备可继承性，也就是如果某类已经实现了序列化，则它的所有子类也已默认实现了序列化"),n("ul",null,[n("li",null,[s("就比如看看"),n("code",null,"Integer"),s("，它继承自"),n("code",null,"Number"),s(" ,"),n("code",null,"Number"),s("实现了序列化接口"),n("code",null,"Serializable"),s("，所以"),n("code",null,"Integer"),s("也实现了该接口")])])])],-1),K=n("h2",{id:"标准输入输出流",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#标准输入输出流","aria-hidden":"true"},"#"),s(" 标准输入输出流")],-1),G=n("p",null,[s("这玩意在我们的开发中用的还是比较多的。比如一个很久前就开始使用的："),n("code",null,"System.in"),s("，以及天天都在用的"),n("code",null,"System.out.println()")],-1),A=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}}),n("th",{style:{"text-align":"center"}},"编译类型"),n("th",{style:{"text-align":"center"}},"运行类型"),n("th",{style:{"text-align":"center"}},"默认设备")])],-1),Q={style:{"text-align":"center"}},X={href:"http://System.in",target:"_blank",rel:"noopener noreferrer"},Y=n("td",{style:{"text-align":"center"}},"InputStream",-1),Z=n("td",{style:{"text-align":"center"}},"BufferInputStream",-1),$=n("td",{style:{"text-align":"center"}},"键盘",-1),nn=n("tr",null,[n("td",{style:{"text-align":"center"}},"System.out 标准输出"),n("td",{style:{"text-align":"center"}},"PrintStream"),n("td",{style:{"text-align":"center"}},"PrintStream"),n("td",{style:{"text-align":"center"}},"显示器")],-1),sn=e(`<ul><li>传统方法<code>System.out.println()</code>就是使用out将对象输出到显示器</li><li>传统方法<code>Scanner</code>是从标准输入 键盘接收数据</li></ul><h2 id="转换流-inputstreamreader和outputstreamwriter" tabindex="-1"><a class="header-anchor" href="#转换流-inputstreamreader和outputstreamwriter" aria-hidden="true">#</a> 转换流-InputStreamReader和OutputStreamWriter</h2><p>接下来先放一个简单的读取文本的代码:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuestion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;D:/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;接收到的内容&quot;</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文本内容是：Hello Fiance 世界你好</p><p>正常情况下，读取出的结果是没问题的，因为文本文档默认是采用了UTF-8的编码</p>`,6),an={href:"https://blog.csdn.net/imxiangzi/article/details/77370160",target:"_blank",rel:"noopener noreferrer"},tn=e('<figure><img src="'+B+`" alt="image-20211114235905170" tabindex="0" loading="lazy"><figcaption>image-20211114235905170</figcaption></figure><p>这时候再去读取：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>接收到的内容Hello Fiance �������
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>哦豁 出现了乱码</p><p>也就是说，归根结底出现问题是因为我们没有去指定读取这个文件的编码方式，如果我们能去指定方式的话，就能轻松的解决这个问题了，这时候就要用到我们的<strong>转换流</strong>了</p><h3 id="基本介绍及使用" tabindex="-1"><a class="header-anchor" href="#基本介绍及使用" aria-hidden="true">#</a> 基本介绍及使用</h3><ol><li><code>InputStreamReader</code> Reader的子类，可以将<code>InputStream</code>(字节流)包装成<code>Reader</code>（字符流）</li><li><code>OutputStreamWriter</code>Writer的子类，可以将<code>OutputStream</code>(字节流)包装成<code>Reader</code>（字符流）</li><li>当处理纯文本数据时，如果使用字符流效率更高，并且可以有效的解决中文问题，所以建议将字节流转换成字符流</li><li>可以在使用指定编码格式（如:UTF-8、GBK、GB2312、ISO-8859-1等）</li></ol><blockquote><p>应用案例</p></blockquote><p>将字节流包装成InputStreamReader，对文件进行读取（按照utf-8,gbk格式），进而包装成BufferedReader</p><p>看着有点绕，但是实际上用起来并不难..</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuestion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//        把new FileInputStream(&quot;d:/a.txt&quot;)转换成了InputStreamReader 同时指定了编码</span>
    <span class="token class-name">InputStreamReader</span> inputStreamReader <span class="token operator">=</span> 
        <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;d:/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;gbk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        把inputSteamReader传入BufferReader来去读取文本内容</span>
    <span class="token comment">//        相当于包装了两次</span>
    <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;读取到的内容&quot;</span> <span class="token operator">+</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 读取到的内容Hello Fiance 世界你好</span>
<span class="token comment">// 其实像上面那样写是有点啰嗦的，正常的程序员实际项目中一般都是 合在一起写：</span>
reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;d:/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;gbk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>指定写入编码：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//        指定GBK写入</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;测试一下，以GBK方式写入流，是什么样的效果🐉🐍🐎🐏&quot;</span><span class="token punctuation">;</span> <span class="token comment">//GBK存不了这种表情</span>
    <span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;d:/aaa.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;gbk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;写入完毕&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//测试一下，以GBK方式写入流，是什么样的效果????</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="打印流-printstream和printwriter" tabindex="-1"><a class="header-anchor" href="#打印流-printstream和printwriter" aria-hidden="true">#</a> 打印流-PrintStream和PrintWriter</h2><p>打印流只有输出流，没有输入流</p>`,15),en=n("code",null,"PrintStream",-1),pn=n("strong",null,"字节打印流",-1),on=n("code",null,"FilterOutputStream",-1),cn=n("code",null,"OutputStream",-1),ln={href:"https://www.matools.com/file/manual/jdk_api_1.8_google/java/io/PrintStream.html",target:"_blank",rel:"noopener noreferrer"},un=n("code",null,"PrintWriter",-1),rn=n("strong",null,"字符打印流",-1),dn=n("code",null,"Writer",-1),kn={href:"https://www.matools.com/file/manual/jdk_api_1.8_google/java/io/PrintWriter.html",target:"_blank",rel:"noopener noreferrer"},mn=e(`<p>接下来简单演示下怎么用：</p><p>字节打印流：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 演示PrintStream(字节打印流)
     */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

    <span class="token comment">//        System.out就是一个字节打印流-PrintStream</span>
    <span class="token class-name">PrintStream</span> out <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>
    <span class="token comment">//        在默认情况下，PrintStream数据的输出位置时 标准输出 即：显示器（控制台）</span>
    out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        因为print的底层是write方法，所以我们也可以直接调用这个write方法来进行打印</span>
    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;世界你好&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        这两个方法本质上是一样的</span>

    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        我们也可以去修改打印输出流的位置、设备</span>
    <span class="token comment">//        可以通过修改打印流的set方法来进行设置</span>
    <span class="token comment">//        修改到d:/f1.txt</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token string">&quot;d:/f1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*        public static void setOut(PrintStream out) {
            checkIO();
            setOut0(out);
            看到这个熟悉的0了吗，没错他也是个native方法，修改了out
        }*/</span>

    <span class="token comment">//        鱼跃此时海，花开彼岸天 这局话将会被打印在文件d:/f1.txt中</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;鱼跃此时海，花开彼岸天&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="properties类" tabindex="-1"><a class="header-anchor" href="#properties类" aria-hidden="true">#</a> Properties类</h2><p>之前在集合类中提到过这个类，可以通过它来轻松的读取配置文件和写入配置文件</p><p>在使用之前，先看一个需求：</p><p>有一个配置文件<code>mysql.properties</code></p><p>ip=localhost</p><p>port=3306</p><p>user=root</p><p>password=123456</p><p>使用编程读写这些值</p><figure><img src="`+P+`" alt="image-20211115114236906" tabindex="0" loading="lazy"><figcaption>image-20211115114236906</figcaption></figure><p>如果不用Properties的话，就得这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">traditional</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//        使用传统的方法来读取</span>
    <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;src/mysql.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        循环的读取</span>
    <span class="token class-name">String</span> line <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//循环读取</span>
        <span class="token comment">//            System.out.println(line);</span>
        <span class="token comment">//            拆分字符串</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;的值是：&quot;</span> <span class="token operator">+</span> split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//            虽然是可以读取的，但是用起来还是有点麻烦，并且如果想要修改的话还更麻烦。。</span>
        <span class="token comment">//            而且如果要求指定得到ip 就得加个if(&quot;ip&quot;.equals（split[0]）){....}</span>
    <span class="token punctuation">}</span>
    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="properties的使用" tabindex="-1"><a class="header-anchor" href="#properties的使用" aria-hidden="true">#</a> Properties的使用</h3><p>它是专门用于读写配置文件的集合类</p><p>配置文件的格式：</p><p>key=value</p><p>key=value</p><p>键值对不需要有空格，值不需要用引号，默认类型是String</p><p>常用方法：</p><ul><li><code>load</code> 加载配置文件的键值对到Properties对象</li><li><code>list</code>将数据显示到指定设备</li><li><code>getProperty(key)</code> 根据键获取值</li><li><code>setProperty(key,value)</code> 设置键值对到Properties对象</li><li><code>store</code>将Properties键值对保存到配置文件中，在Idea中，保存信息的配置文件，如果含有中文，将会存储为unicode码</li></ul><blockquote><p>使用Properties完成对mysql.properties的读取</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 读取
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span> IO异常
     */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//        使用Properties类 来读取 mysql.properties文件</span>
    <span class="token comment">//        1 创建Properties对象</span>
    <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        2 加载指定的配置文件</span>
    properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;src/mysql.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        3 把k-v显示到控制台</span>
    properties<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//        4 根据key 获取对应的value</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Login的用户：&quot;</span> <span class="token operator">+</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;PassWord：&quot;</span> <span class="token operator">+</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>修改 创建</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createAndUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        创建 键值对</span>
    <span class="token comment">//        如果该文件没有key 就是创建 如果有该key 就是修改其值</span>
    <span class="token comment">//        Prperties的父类是HashTable ，底层就是HashTable</span>
    <span class="token comment">//        核心方法：</span>
    <span class="token comment">/*        public synchronized V put (K key, V value){
            // Make sure the value is not null
            if (value == null) {
                throw new NullPointerException();
            }

            // Makes sure the key is not already in the hashtable.
            Hashtable.Entry&lt;?, ?&gt; tab[] = table;
            int hash = key.hashCode();
            int index = (hash &amp; 0x7FFFFFFF) % tab.length;
            @SuppressWarnings(&quot;unchecked&quot;)
            Hashtable.Entry&lt;K, V&gt; entry = (Hashtable.Entry&lt;K, V&gt;) tab[index];
            for (; entry != null; entry = entry.next) {
                if ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) {
                    V old = entry.value;
                    entry.value = value; 如果这个key存在，就替换
                    return old;
                }
            }

            addEntry(hash, key, value, index); 如果是新的key，就add
            return null;
        }*/</span>
    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;charset&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;汤姆&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//注意保存时，是中文的Unicode码</span>
    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;pwd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;65165156156165fsdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        将kv存储到文件中  第二个参数是注释（头注释） 传null就不会有注释 一般情况下是直接传null</span>
    properties<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;src/mysql2.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;汤姆&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;保存配置文件成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩展-小练" tabindex="-1"><a class="header-anchor" href="#扩展-小练" aria-hidden="true">#</a> 扩展-小练</h3><ol><li><p>HomeWork01.java</p><ol><li>在d盘下查看是否有文件夹mytemp，如果没有就创建，mytemp</li><li>在d:/mytemp目录下，创建文件hello.txt</li><li>如果hello.txt已存在，就提示该文件已存在，不重复创建</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">home1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;d:/temp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">File</span> file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>file1<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt已经存在，不重复创建&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>file1<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt创建成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件夹不存在，正在创建....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        file<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件夹创建成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">home1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>HomeWork02.java</p><ol><li>使用BufferedReader读取一个文本文件，为每行添加上行号，再连同内容一并输出到屏幕上</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">home2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> filepath <span class="token operator">=</span> <span class="token string">&quot;D:\\\\WebProject\\\\02 DOM\\\\js/reloadImg.js&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;第%s行的内容为:%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">++</span>count<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件读取完毕，Over&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>HomeWork03.java</p><ol><li>编写一个dog.properties在src目录下 <ol><li>name age color 三个字段</li></ol></li><li>编写Dog类，构造方法为上面三个字段，然后创建一个Dog对象，读取dog.properties用相应的内容完成属性初始化，并输出</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">home3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Properties</span> writerFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writerFile<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writerFile<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writerFile<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writerFile<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;src/dog.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;TomDog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;存储完毕，正在读取并创建Dog对象&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        读取：</span>
    <span class="token class-name">Properties</span> readerFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    readerFile<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;src/dog.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> readerFile<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>readerFile<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> color <span class="token operator">=</span> readerFile<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;读取完毕，打印Dog对象&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,29);function vn(bn,gn){const a=o("ExternalLinkIcon");return c(),l("div",null,[E,n("p",null,[s("文档"),n("a",D,[s("速链"),t(a)])]),W,n("p",null,[s("这个构造方法和所有方法都和"),J,s("基本没啥区别，最大的差别就它是write，"),T,s("是read，"),n("a",z,[s("文档地址"),t(a)])]),N,n("ul",null,[H,M,n("li",null,[s("详细文档： "),n("ul",null,[n("li",null,[n("a",U,[s("BufferedReader中文手册"),t(a)])]),n("li",null,[n("a",C,[s("BufferedWriter中文手册"),t(a)])])])])]),L,V,K,G,n("table",null,[A,n("tbody",null,[n("tr",null,[n("td",Q,[n("a",X,[s("System.in"),t(a)]),s(" 标准输入")]),Y,Z,$]),nn])]),sn,n("p",null,[s("但是我偏不，我重新保存了下文件，将编码设置为ASNI（国标码，根据系统决定，具体可以看"),n("a",an,[s("这篇文档"),t(a)]),s("，默认情况下，设置为中文的电脑国标码指向GBK编码）")]),tn,n("p",null,[en,pn,s("直接父类："),on,s(" ，属于"),cn,s("，"),n("a",ln,[s("中文文档"),t(a)])]),n("p",null,[un,rn,s("直接父类："),dn,s("，"),n("a",kn,[s("中文文档"),t(a)])]),mn])}const wn=p(R,[["render",vn],["__file","18-IO流.html.vue"]]);export{wn as default};
