const e=JSON.parse('{"key":"v-1998b28d","path":"/GoLang/Base/06-%E7%BD%91%E7%BB%9C%E5%92%8C%E6%B5%8B%E8%AF%95.html","title":"06-网络和测试","lang":"zh-CN","frontmatter":{"title":"06-网络和测试","date":"2022-03-24T19:01:09.000Z","category":"GoLang","tag":["GoLang","Web","Socket","Http","Test"],"description":"概述 嘛，这个也不多说了，之前在Java学习的过程中也了解了一些网络的内容，其实总体来说就一句话 万物基于TCP，所有的协议都基于Socket Socket TCP服务端 也就是Socket服务端，一个TCP服务端可以连接多个客户端，因为在Go语言中创建多个goRoutine非常的简单和高效，所以我们可以每当在建立一次连接时就创建一个goroutie去处理 TCP需要完成如下内容 监听端口 接收客户端请求建立连接 创建goroutine处理连接","head":[["meta",{"property":"og:url","content":"http://www.amayakite.github.io/GoLang/Base/06-%E7%BD%91%E7%BB%9C%E5%92%8C%E6%B5%8B%E8%AF%95.html"}],["meta",{"property":"og:site_name","content":"Amayakite Blogs"}],["meta",{"property":"og:title","content":"06-网络和测试"}],["meta",{"property":"og:description","content":"概述 嘛，这个也不多说了，之前在Java学习的过程中也了解了一些网络的内容，其实总体来说就一句话 万物基于TCP，所有的协议都基于Socket Socket TCP服务端 也就是Socket服务端，一个TCP服务端可以连接多个客户端，因为在Go语言中创建多个goRoutine非常的简单和高效，所以我们可以每当在建立一次连接时就创建一个goroutie去处理 TCP需要完成如下内容 监听端口 接收客户端请求建立连接 创建goroutine处理连接"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-17T12:51:48.000Z"}],["meta",{"property":"article:author","content":"Amayakite"}],["meta",{"property":"article:tag","content":"GoLang"}],["meta",{"property":"article:tag","content":"Web"}],["meta",{"property":"article:tag","content":"Socket"}],["meta",{"property":"article:tag","content":"Http"}],["meta",{"property":"article:tag","content":"Test"}],["meta",{"property":"article:published_time","content":"2022-03-24T19:01:09.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-17T12:51:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"06-网络和测试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-24T19:01:09.000Z\\",\\"dateModified\\":\\"2023-06-17T12:51:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amayakite\\",\\"url\\":\\"https://github.com/Amayakite\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"Socket","slug":"socket","link":"#socket","children":[{"level":3,"title":"TCP服务端","slug":"tcp服务端","link":"#tcp服务端","children":[]},{"level":3,"title":"客户端","slug":"客户端","link":"#客户端","children":[]},{"level":3,"title":"扩展-获取程序启动时的附带参数","slug":"扩展-获取程序启动时的附带参数","link":"#扩展-获取程序启动时的附带参数","children":[]},{"level":3,"title":"扩展-获取命令行输入","slug":"扩展-获取命令行输入","link":"#扩展-获取命令行输入","children":[]}]},{"level":2,"title":"Http","slug":"http","link":"#http","children":[{"level":3,"title":"服务端的基本搭建","slug":"服务端的基本搭建","link":"#服务端的基本搭建","children":[]},{"level":3,"title":"服务端中获取请求的相关参数","slug":"服务端中获取请求的相关参数","link":"#服务端中获取请求的相关参数","children":[]},{"level":3,"title":"HTTP客户端","slug":"http客户端","link":"#http客户端","children":[]}]},{"level":2,"title":"单元测试","slug":"单元测试","link":"#单元测试","children":[{"level":3,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":3,"title":"使用测试","slug":"使用测试","link":"#使用测试","children":[]}]},{"level":2,"title":"基准测试","slug":"基准测试","link":"#基准测试","children":[{"level":3,"title":"使用基准测试","slug":"使用基准测试","link":"#使用基准测试","children":[]},{"level":3,"title":"多个函数的性能测试","slug":"多个函数的性能测试","link":"#多个函数的性能测试","children":[]},{"level":3,"title":"手动开始测试","slug":"手动开始测试","link":"#手动开始测试","children":[]}]},{"level":2,"title":"Example-示例","slug":"example-示例","link":"#example-示例","children":[]},{"level":2,"title":"Flag包-更优雅的从命令行获取内容","slug":"flag包-更优雅的从命令行获取内容","link":"#flag包-更优雅的从命令行获取内容","children":[]}],"git":{"createdTime":1687006308000,"updatedTime":1687006308000,"contributors":[{"name":"Amayakite","email":"amayakite@qq.com","commits":1}]},"readingTime":{"minutes":10.3,"words":3091},"filePathRelative":"GoLang/Base/06-网络和测试.md","localizedDate":"2022年3月24日","excerpt":"<h2> 概述</h2>\\n<p>嘛，这个也不多说了，之前在Java学习的过程中也了解了一些网络的内容，其实总体来说就一句话</p>\\n<blockquote>\\n<p><strong>万物基于TCP，所有的协议都基于Socket</strong></p>\\n</blockquote>\\n<h2> Socket</h2>\\n<h3> TCP服务端</h3>\\n<p>也就是Socket服务端，一个TCP服务端可以连接多个客户端，因为在Go语言中创建多个goRoutine非常的简单和高效，所以我们可以每当在建立一次连接时就创建一个goroutie去处理</p>\\n<p>TCP需要完成如下内容</p>\\n<ol>\\n<li>监听端口</li>\\n<li>接收客户端请求建立连接</li>\\n<li>创建goroutine处理连接</li>\\n</ol>","autoDesc":true}');export{e as data};
