const e=JSON.parse('{"key":"v-3ad2419b","path":"/JavaLang/SpringFrameWork/03-Spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91.html","title":"03-Spring注解开发","lang":"zh-CN","frontmatter":{"title":"03-Spring注解开发","date":"2021-12-10T14:59:30.000Z","category":"Spring-FrameWork","tag":["Java","Spring","Junit"],"description":"一些问题 在开始前，我们得再了解一下Spring ​ Spring是轻代码而重配置的框架，配置比较繁重，在之前的配置中（基本的配置。注入。注入Properties）中也可以得出这一点，我们实际上并没有写多少代码，大部分时间都在解耦合 ​ 所以我们就得用到注解来进行开发，Spring的注解就像之前在JavaWeb中，我们用的@WebServlet那样，能够代替XML进行文件，进行简化配置，提高效率 ​ 也就是说，我们不应该面向xml编程，而是面向注解编程 Spring的注解分为两种，但是实际上都可以用","head":[["meta",{"property":"og:url","content":"http://www.amayakite.github.io/JavaLang/SpringFrameWork/03-Spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91.html"}],["meta",{"property":"og:site_name","content":"Amayakite Blogs"}],["meta",{"property":"og:title","content":"03-Spring注解开发"}],["meta",{"property":"og:description","content":"一些问题 在开始前，我们得再了解一下Spring ​ Spring是轻代码而重配置的框架，配置比较繁重，在之前的配置中（基本的配置。注入。注入Properties）中也可以得出这一点，我们实际上并没有写多少代码，大部分时间都在解耦合 ​ 所以我们就得用到注解来进行开发，Spring的注解就像之前在JavaWeb中，我们用的@WebServlet那样，能够代替XML进行文件，进行简化配置，提高效率 ​ 也就是说，我们不应该面向xml编程，而是面向注解编程 Spring的注解分为两种，但是实际上都可以用"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-17T12:51:48.000Z"}],["meta",{"property":"article:author","content":"Amayakite"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"Junit"}],["meta",{"property":"article:published_time","content":"2021-12-10T14:59:30.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-17T12:51:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"03-Spring注解开发\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-12-10T14:59:30.000Z\\",\\"dateModified\\":\\"2023-06-17T12:51:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amayakite\\",\\"url\\":\\"https://github.com/Amayakite\\"}]}"]]},"headers":[{"level":2,"title":"一些问题","slug":"一些问题","link":"#一些问题","children":[]},{"level":2,"title":"Spring的原始注解","slug":"spring的原始注解","link":"#spring的原始注解","children":[]},{"level":2,"title":"✨原始注解中包含的内容一览","slug":"✨原始注解中包含的内容一览","link":"#✨原始注解中包含的内容一览","children":[{"level":3,"title":"使用Spring注解前要准备的东西（先用Bean来制作一遍）","slug":"使用spring注解前要准备的东西-先用bean来制作一遍","link":"#使用spring注解前要准备的东西-先用bean来制作一遍","children":[]},{"level":3,"title":"@Component 声明","slug":"component-声明","link":"#component-声明","children":[]},{"level":3,"title":"@Autowired和@Qualifier","slug":"autowired和-qualifier","link":"#autowired和-qualifier","children":[]},{"level":3,"title":"使用注解开发的注意事项：一定要配置组件扫描","slug":"使用注解开发的注意事项-一定要配置组件扫描","link":"#使用注解开发的注意事项-一定要配置组件扫描","children":[]},{"level":3,"title":"@Component的替代品","slug":"component的替代品","link":"#component的替代品","children":[]},{"level":3,"title":"使用@Autowired和@Qualifier的额外技巧","slug":"使用-autowired和-qualifier的额外技巧","link":"#使用-autowired和-qualifier的额外技巧","children":[]},{"level":3,"title":"@Resource的使用-@Autowired的替代品","slug":"resource的使用-autowired的替代品","link":"#resource的使用-autowired的替代品","children":[]},{"level":3,"title":"@Value注入普通属性、el表达式注入配置文件中的内容","slug":"value注入普通属性、el表达式注入配置文件中的内容","link":"#value注入普通属性、el表达式注入配置文件中的内容","children":[]},{"level":3,"title":"@Scope 设置作用范围","slug":"scope-设置作用范围","link":"#scope-设置作用范围","children":[]},{"level":3,"title":"@PostConstruct和@PreDestory 创建和销毁时调用的方法","slug":"postconstruct和-predestory-创建和销毁时调用的方法","link":"#postconstruct和-predestory-创建和销毁时调用的方法","children":[]}]},{"level":2,"title":"Spring新注解","slug":"spring新注解","link":"#spring新注解","children":[]},{"level":2,"title":"✨新注解中包含的内容一览","slug":"✨新注解中包含的内容一览","link":"#✨新注解中包含的内容一览","children":[{"level":3,"title":"新注解的使用","slug":"新注解的使用","link":"#新注解的使用","children":[]},{"level":3,"title":"在程序中使用新注解容器","slug":"在程序中使用新注解容器","link":"#在程序中使用新注解容器","children":[]},{"level":3,"title":"AnnotationConfigApplicationContext的使用","slug":"annotationconfigapplicationcontext的使用","link":"#annotationconfigapplicationcontext的使用","children":[]}]},{"level":2,"title":"Spring继承Junit","slug":"spring继承junit","link":"#spring继承junit","children":[{"level":3,"title":"✨Spring继承Junit的步骤","slug":"✨spring继承junit的步骤","link":"#✨spring继承junit的步骤","children":[]}]}],"git":{"createdTime":1687006308000,"updatedTime":1687006308000,"contributors":[{"name":"Amayakite","email":"amayakite@qq.com","commits":1}]},"readingTime":{"minutes":12.98,"words":3895},"filePathRelative":"JavaLang/SpringFrameWork/03-Spring注解开发.md","localizedDate":"2021年12月10日","excerpt":"<h2> 一些问题</h2>\\n<p>在开始前，我们得再了解一下Spring</p>\\n<p>​  Spring是轻代码而重配置的框架，配置比较繁重，在之前的配置中（基本的配置。注入。注入Properties）中也可以得出这一点，我们实际上并没有写多少代码，大部分时间都在解耦合</p>\\n<p>​  所以我们就得用到注解来进行开发，Spring的注解就像之前在JavaWeb中，我们用的@WebServlet那样，能够代替XML进行文件，进行简化配置，提高效率</p>\\n<p>​  也就是说，我们不应该面向xml编程，而是面向注解编程</p>\\n<p>Spring的注解分为两种，但是实际上都可以用</p>","autoDesc":true}');export{e as data};
