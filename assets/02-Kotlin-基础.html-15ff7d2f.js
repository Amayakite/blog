import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-3ab2953d.js";const p="/images/Java/Android/02-Kotlin-基础/image-20220505214535520.png",e="/images/Java/Android/02-Kotlin-基础/image-20220505214612985.png",o="/images/Java/Android/02-Kotlin-基础/image-20220505214638151.png",i="/images/Java/Android/02-Kotlin-基础/image-20220505215010060.png",l="/images/Java/Android/02-Kotlin-基础/image-20220505215534390.png",c="/images/Java/Android/02-Kotlin-基础/image-20220505220959295.png",u="/images/Java/Android/02-Kotlin-基础/image-20220505221735552.png",r="/images/Java/Android/02-Kotlin-基础/image-20220505222521997.png",k="/images/Java/Android/02-Kotlin-基础/image-20220505222915659.png",d="/images/Java/Android/02-Kotlin-基础/image-20220506145843647.png",v="/images/Java/Android/02-Kotlin-基础/image-20220506154756594.png",m="/images/Java/Android/02-Kotlin-基础/image-20220506163943325.png",g="/images/Java/Android/02-Kotlin-基础/image-20220506192545125.png",b="/images/Java/Android/02-Kotlin-基础/image-20220506223530079.png",f="/images/Java/Android/02-Kotlin-基础/image-20220506223552653.png",y="/images/Java/Android/02-Kotlin-基础/image-20220506232001999.png",h="/images/Java/Android/02-Kotlin-基础/image-20220507141555685.png",q="/images/Java/Android/02-Kotlin-基础/image-20220507143117842.png",w="/images/Java/Android/02-Kotlin-基础/image-20220507145041915.png",x={},S=t('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>这个是基于JVM的语言，IDEA对其支持度非常好（亲儿子），在Java的基础上多了非常多的新特性，同理，上手起来比golang之类的语言更难...</p><p>在Android和近几年的新项目上，用Kotlin的比Java的多得多，由于其语法简单的特性（其实一堆注解之类的玩起来也不简单了），深受Android开发的喜爱（雾？），同时也是Google的亲儿子一样</p><p>Kotlin语法简洁，具备现代高级语言的特性，并且能和Java一流代码无缝操作，因为具备这些优势，至今为止越来越多的公司使用它来进行开发（无论是后端还是Android）</p><p>甚至<strong>可以编译成二进制源码</strong></p><figure><img src="'+p+'" alt="image-20220505214535520" tabindex="0" loading="lazy"><figcaption>image-20220505214535520</figcaption></figure><figure><img src="'+e+'" alt="image-20220505214612985" tabindex="0" loading="lazy"><figcaption>image-20220505214612985</figcaption></figure><figure><img src="'+o+'" alt="image-20220505214638151" tabindex="0" loading="lazy"><figcaption>image-20220505214638151</figcaption></figure><h2 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手" aria-hidden="true">#</a> 快速上手</h2><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><p>我们先创建一个Kotlin项目（IEDA 2022.1），这里使用了gradle来管理依赖</p><figure><img src="'+i+'" alt="image-20220505215010060" tabindex="0" loading="lazy"><figcaption>image-20220505215010060</figcaption></figure><p>然后发现build.gradle后面多了个kts，并且语法也变了...</p><figure><img src="'+l+`" alt="image-20220505215534390" tabindex="0" loading="lazy"><figcaption>image-20220505215534390</figcaption></figure><p>等到他加载完毕后，顺利的吃了我1G的硬盘</p><p>添加依赖去maven仓库看看即可，有一套专属语法</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>dependencies <span class="token punctuation">{</span>
    <span class="token function">testImplementation</span><span class="token punctuation">(</span><span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;test&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// https://mvnrepository.com/artifact/com.alibaba/fastjson</span>
    <span class="token comment">// 这样即可</span>
    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.alibaba:fastjson:1.2.80&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们新建一个Kotlin文件</p><figure><img src="`+c+`" alt="image-20220505220959295" tabindex="0" loading="lazy"><figcaption>image-20220505220959295</figcaption></figure><p>注意，是文件，不是类</p><p>然后开始Hello World 吧</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello, Kotlin!&quot;</span></span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变量、常量和内置数据类型" tabindex="-1"><a class="header-anchor" href="#变量、常量和内置数据类型" aria-hidden="true">#</a> 变量、常量和内置数据类型</h3><p>emm和原生Java差不多，定义变量的方式</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello World&quot;</span></span>
    a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;World&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Kotlin&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要定义一个<strong>只读变量</strong>（并不是绝对不能修改的，之后会说到），则可以用val(L，L，L，别看错了)</p><blockquote><p>PS：这模板字符串不能说是和groovy非常相像了，只能说是一模一样</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> MyName <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;user.name&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">MyName</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是<strong>常量</strong>（编译时常量），则按照下方方式定义，注意，编译时常量只能是<strong>Java的基本类型</strong></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 一定是 const val 才是编译时常量</span>
<span class="token keyword">const</span> <span class="token keyword">val</span> USERNAME<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Amayakite&quot;</span></span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果试图在方法内定义，则编译器会报错</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">USERNAME</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后有一个自动类型推断，Over</p><p>至于内置数据类型，有这些</p><figure><img src="`+u+'" alt="image-20220505221735552" tabindex="0" loading="lazy"><figcaption>image-20220505221735552</figcaption></figure><h3 id="如何查看kotlin的字节码文件" tabindex="-1"><a class="header-anchor" href="#如何查看kotlin的字节码文件" aria-hidden="true">#</a> 如何查看Kotlin的字节码文件</h3><figure><img src="'+r+`" alt="image-20220505222521997" tabindex="0" loading="lazy"><figcaption>image-20220505222521997</figcaption></figure><p>得到了如下内容</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">kotlin<span class="token punctuation">.</span></span><span class="token class-name">Metadata</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">NotNull</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Metadata</span><span class="token punctuation">(</span>
   mv <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
   k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
   d1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;\\u0000\\u000e\\n\\u0000\\n\\u0002\\u0010\\u000e\\n\\u0000\\n\\u0002\\u0010\\u0002\\n\\u0000\\u001a\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\\&quot;\\u000e\\u0010\\u0000\\u001a\\u00020\\u0001X\\u0086T¢\\u0006\\u0002\\n\\u0000¨\\u0006\\u0004&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
   d2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;USERNAME&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;KotlinStudy&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HelloKotlinKt</span> <span class="token punctuation">{</span>
   <span class="token annotation punctuation">@NotNull</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">USERNAME</span> <span class="token operator">=</span> <span class="token string">&quot;Amayakite&quot;</span><span class="token punctuation">;</span>

   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">String</span> var0 <span class="token operator">=</span> <span class="token string">&quot;Hello, Amayakite&quot;</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var0<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// $FF: synthetic method</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再加点料看看效果</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">const</span> <span class="token keyword">val</span> USERNAME<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Amayakite&quot;</span></span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">USERNAME</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> Age <span class="token operator">=</span> <span class="token number">18</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">Age</span></span><span class="token string"> years old&quot;</span></span><span class="token punctuation">)</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果。。。可以发现int是一个基本数据类型...</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">kotlin<span class="token punctuation">.</span></span><span class="token class-name">Metadata</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">NotNull</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Metadata</span><span class="token punctuation">(</span>
   mv <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
   k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
   d1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;\\u0000\\u000e\\n\\u0000\\n\\u0002\\u0010\\u000e\\n\\u0000\\n\\u0002\\u0010\\u0002\\n\\u0000\\u001a\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\\&quot;\\u000e\\u0010\\u0000\\u001a\\u00020\\u0001X\\u0086T¢\\u0006\\u0002\\n\\u0000¨\\u0006\\u0004&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
   d2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;USERNAME&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;KotlinStudy&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HelloKotlinKt</span> <span class="token punctuation">{</span>
   <span class="token annotation punctuation">@NotNull</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">USERNAME</span> <span class="token operator">=</span> <span class="token string">&quot;Amayakite&quot;</span><span class="token punctuation">;</span>

   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">String</span> var0 <span class="token operator">=</span> <span class="token string">&quot;Hello, Amayakite&quot;</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var0<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> <span class="token class-name">Age</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> var1 <span class="token operator">=</span> <span class="token string">&quot;I am &quot;</span> <span class="token operator">+</span> <span class="token class-name">Age</span> <span class="token operator">+</span> <span class="token string">&quot; years old&quot;</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// $FF: synthetic method</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者按两下shift，输入 show kotlin byte即可</p><figure><img src="`+k+`" alt="image-20220505222915659" tabindex="0" loading="lazy"><figcaption>image-20220505222915659</figcaption></figure><h3 id="条件语句" tabindex="-1"><a class="header-anchor" href="#条件语句" aria-hidden="true">#</a> 条件语句</h3><p>if语句和Java是一模一样的</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> myAge <span class="token operator">=</span> <span class="token number">20</span>
    <span class="token keyword">var</span> div <span class="token operator">=</span> myAge<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>div <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;div is positive,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">div</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;div is negative,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">div</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是in：可以判断一个值是否在某个区段之间</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> myAge <span class="token operator">=</span> <span class="token number">20</span>
    <span class="token keyword">var</span> div <span class="token operator">=</span> myAge<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token comment">// 判断这个div是否处于1~10之间</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>div <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;div is in 1..10&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;div is not in 1..10，div = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">div</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反编译后是....</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> myAge <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> div <span class="token operator">=</span> myAge <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> var2<span class="token punctuation">;</span>
    <span class="token comment">// 草，有点牛逼</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;=</span> div<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">&gt;=</span> div<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            var2 <span class="token operator">=</span> <span class="token string">&quot;div is in 1..10&quot;</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    var2 <span class="token operator">=</span> <span class="token string">&quot;div is not in 1..10，div = &quot;</span> <span class="token operator">+</span> div<span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是when表达式，这个东西允许有返回值（增强版的switch）</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">const</span> <span class="token keyword">val</span> USERNAME<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Amayakite&quot;</span></span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> newNumber <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>newNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token number">10</span> <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;Success&quot;</span></span>
        <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">9</span> <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;Failure&quot;</span></span>
        <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;Unknown&quot;</span></span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反编译后是这样的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> newNumber <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> var10000<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newNumber <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        var10000 <span class="token operator">=</span> <span class="token string">&quot;Success&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 用label 太草了hhh</span>
        label15<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;=</span> newNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">&gt;=</span> newNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    var10000 <span class="token operator">=</span> <span class="token string">&quot;Failure&quot;</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span> label15<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            var10000 <span class="token operator">=</span> <span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">String</span> result <span class="token operator">=</span> var10000<span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模板字符串" tabindex="-1"><a class="header-anchor" href="#模板字符串" aria-hidden="true">#</a> 模板字符串</h3><p>和在JavaScript中差不多，美中不足的是不支持三元运算符（好像java是支持的吧？）</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">const</span> <span class="token keyword">val</span> USERNAME<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Amayakite&quot;</span></span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> orgin <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Jack&quot;</span></span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>orgin <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;AAA&quot;</span></span><span class="token punctuation">)</span> <span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span> <span class="token keyword">else</span> <span class="token string-literal singleline"><span class="token string">&quot;李四&quot;</span></span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><h3 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h3><p>可以使用private来声明函数做用域（和Java一样），并且返回值可以用这种写法（md感觉还是三元运算更舒服些）</p><p>整体来说，这个语法更像是Typescript或者Python</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>age<span class="token operator">:</span> Int<span class="token punctuation">,</span> flag<span class="token operator">:</span> Boolean<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;</span> <span class="token number">18</span> <span class="token operator">||</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token string-literal singleline"><span class="token string">&quot;World&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数默认值和具名传参" tabindex="-1"><a class="header-anchor" href="#参数默认值和具名传参" aria-hidden="true">#</a> 参数默认值和具名传参</h3><p>如果不打算传入值参，就可以先设定默认值</p><p>如果使用命名值传参，就可以不用管值参的顺序</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token function">fix</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">fix</span><span class="token punctuation">(</span>age <span class="token operator">=</span> <span class="token number">888</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;李四&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">fix</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;王五&quot;</span></span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">fix</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> age<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;name:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">,age:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译成字节码后(md怎么感觉怪怪的)</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> HelloKotlinKt <span class="token punctuation">{</span>
   <span class="token keyword">public</span> static <span class="token keyword">final</span> void <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      fix$<span class="token function">default</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      String var0 <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;李四&quot;</span></span><span class="token punctuation">;</span>
      short var1 <span class="token operator">=</span> <span class="token number">888</span><span class="token punctuation">;</span>
      <span class="token function">fix</span><span class="token punctuation">(</span>var0<span class="token punctuation">,</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
      fix$<span class="token function">default</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;王五&quot;</span></span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// $FF: synthetic method</span>
   <span class="token keyword">public</span> static void <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> var0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">public</span> static <span class="token keyword">final</span> void <span class="token function">fix</span><span class="token punctuation">(</span><span class="token annotation builtin">@NotNull</span> String name<span class="token punctuation">,</span> int age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Intrinsics<span class="token punctuation">.</span><span class="token function">checkNotNullParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      String var2 <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;name:&quot;</span></span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">&quot;,age:&quot;</span></span> <span class="token operator">+</span> age<span class="token punctuation">;</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// $FF: synthetic method</span>
   <span class="token keyword">public</span> static void fix$<span class="token function">default</span><span class="token punctuation">(</span>String var0<span class="token punctuation">,</span> int var1<span class="token punctuation">,</span> int var2<span class="token punctuation">,</span> Object var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>var2 &amp; <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         var1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token function">fix</span><span class="token punctuation">(</span>var0<span class="token punctuation">,</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unit函数-void" tabindex="-1"><a class="header-anchor" href="#unit函数-void" aria-hidden="true">#</a> Unit函数（Void）</h3><p>就是Java中的<code>void methodName(xxx){xxx}</code></p><p>Kotlin中没有返回值的函数叫做Unit函数，也就是说他们返回的类型是Unit，在Kotlin之前，函数不返回任何东西用Void描述，意思是没有返回类型，不会带来什么，忽略它，也就是说如果函数不返回任何内容就忽略类型，但是，void这种解决方法无法解释现代语言的一个重要特征-泛型</p><h3 id="todo函数来抛出异常和自己抛出异常" tabindex="-1"><a class="header-anchor" href="#todo函数来抛出异常和自己抛出异常" aria-hidden="true">#</a> Todo函数来抛出异常和自己抛出异常</h3><p>TODO函数的任务就是抛出异常，就是永远别指望它运行成功，返回一个Error</p><p>它的源码如下</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token label symbol">@kotlin</span><span class="token punctuation">.</span>internal<span class="token punctuation">.</span>InlineOnly
<span class="token keyword">public</span> <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">TODO</span><span class="token punctuation">(</span>reason<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Nothing <span class="token operator">=</span> <span class="token keyword">throw</span> <span class="token function">NotImplementedError</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;An operation is not implemented: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">reason</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// 上面这个写法相当于Java中的</span>
<span class="token keyword">public</span> <span class="token function">TODO</span><span class="token punctuation">(</span>message String<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">throw</span> new <span class="token function">NotImplementedError</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<strong>这不是Java中的Exception类型，而是Error，所以需要特定的捕获语法</strong></p><p>PS：Error继承自Throwable</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">fix</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token comment">// 这里可以自己指定返回Nothing类型，不过指不指定都无所谓</span>
<span class="token keyword">fun</span> <span class="token function">fix</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> age<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;name:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">,age:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用TODO的好处是，编译器有提示，同时你的代码也有提示（真·运行层面的的TODO）</p><p>如果想要自己抛出异常的话，也比较简单（就把Exception换成Error即可）</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">fix</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>javaClass<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">fix</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> age<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string"> 年龄不足&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token comment">// 运行结果：</span>
java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Error
张三 年龄不足
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="带有空格和特殊字符的函数名" tabindex="-1"><a class="header-anchor" href="#带有空格和特殊字符的函数名" aria-hidden="true">#</a> 带有空格和特殊字符的函数名</h3><p>想要用空格之类的函数可以，不过要用一个反引号括起来，用的时候也要用反引号括起来</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">\`hello****world user name 阿啊啊\`</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">\`hello****world user name 阿啊啊\`</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> age<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello world </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">, age is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数" aria-hidden="true">#</a> 匿名函数</h2><p>这貌似是Kotlin中比较精髓的存在，先来看一个代码吧</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> count <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;/Hello World/&quot;</span></span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
    <span class="token keyword">val</span> count1 <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;abcabcabc&quot;</span></span><span class="token punctuation">.</span><span class="token function">count</span> <span class="token punctuation">{</span> it <span class="token operator">==</span> <span class="token char">&#39;a&#39;</span> <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span>count1<span class="token punctuation">)</span>
    <span class="token keyword">val</span> count2 <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;abcabcabc&quot;</span></span><span class="token punctuation">.</span><span class="token function">count</span> <span class="token punctuation">{</span> letter <span class="token operator">-&gt;</span> letter <span class="token operator">==</span> <span class="token char">&#39;b&#39;</span> <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span>count2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 结果：</span>
<span class="token number">13</span>
<span class="token number">3</span>
<span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，上述的count直接就...成为了String的函数，并且还能在里面传入表达式</p><p>接下来看看怎么自己写一个吧</p><h3 id="创建一个最简单的匿名函数" tabindex="-1"><a class="header-anchor" href="#创建一个最简单的匿名函数" aria-hidden="true">#</a> 创建一个最简单的匿名函数</h3><p>非常简单，只需要像emm用JavaScript ES6语法那样就可，例如我在函数内部创建一个匿名函数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>fun <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 					类型-&gt;返回值</span>
    val blessingFunction<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token comment">// 和groovy一样，最后一句默认为返回值，所以不用写return</span>
        <span class="token string">&quot;Hello Kotlin&quot;</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">blessingFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到底层实际上是用了反射</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HelloKotlinKt</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// 应该是反射吧？</span>
      <span class="token class-name">Function0</span> blessingFunction <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Function0</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
      <span class="token class-name">Object</span> var1 <span class="token operator">=</span> blessingFunction<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// $FF: synthetic method</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接收参数" tabindex="-1"><a class="header-anchor" href="#接收参数" aria-hidden="true">#</a> 接收参数</h3><p>参数类型写在定义那，参数名写在函数里面或者it替代</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//    方式1</span>
    <span class="token keyword">val</span> sayHello<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> String <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> String <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span>
    <span class="token comment">// or </span>
    <span class="token keyword">val</span> sayHello<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> String <span class="token operator">=</span> <span class="token punctuation">{</span> name <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Kotlin&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//    方式2</span>
    <span class="token keyword">val</span> sayHello2<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> String <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sayHello2</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Kotlin&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="it关键字" tabindex="-1"><a class="header-anchor" href="#it关键字" aria-hidden="true">#</a> It关键字</h3><p>PS：无论咋样做可读性都不咋地，建议是去ieda里面的设置-编辑器-嵌入提示中找到Kotlin并全部勾上</p><p>定义只有一个参数的匿名函数时，可以使用it关键字来表示参数名，当你要传入两个时，it就不能用了</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> sayHello2<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> String <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sayHello2</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Kotlin&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时没有参数时你还可以省略下声明</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">val</span> sayHello <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> String <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Kotlin&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">val</span> sayHello2 <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello world&quot;</span></span><span class="token punctuation">)</span>
        <span class="token number">100</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sayHello2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有参数的话，则</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> getAge <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> year<span class="token operator">:</span> Int <span class="token operator">-&gt;</span>
<span class="token comment">//        获取现在的年份</span>
        <span class="token keyword">val</span> nowYear <span class="token operator">=</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>year <span class="token operator">+</span> <span class="token number">1900</span>
<span class="token comment">//        计算年龄</span>
        <span class="token keyword">val</span> i <span class="token operator">=</span> nowYear <span class="token operator">-</span> year
        <span class="token string-literal singleline"><span class="token string">&quot;name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">, age: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string">&quot;</span></span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;AAA&quot;</span></span><span class="token punctuation">,</span> <span class="token number">1949</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lambda" tabindex="-1"><a class="header-anchor" href="#lambda" aria-hidden="true">#</a> Lambda</h2><p>例如我刚刚写的年龄的，在idea中最后是这样展现</p><figure><img src="`+d+`" alt="image-20220506145843647" tabindex="0" loading="lazy"><figcaption>image-20220506145843647</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果你并没有显示这些白色的东西，则可以去<strong>设置-编辑器-嵌入提示</strong>中找到Kotlin并全部勾上</p></div><p>一般匿名函数称为lambda，将它的定义称为lambda表达式，它的返回值称为lambda的结果</p><p>emm就是匿名函数的高端叫法（md天天一堆啥都不会的人张口闭口xxx的lambda天下第一的，贼烦人）</p><h3 id="函数的参数是函数" tabindex="-1"><a class="header-anchor" href="#函数的参数是函数" aria-hidden="true">#</a> 函数的参数是函数</h3><p>emm就像是java中要传入一个匿名内部类一样，例如new Thread需要传入一个Runnable接口，但是可以缩写成</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Say Hello&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但众所周知，实际上Thread接收的一直都只是Runnbale的实现类 ，只不过是语法糖帮我们简化了而已</p><p>但是在Kotlin中，却直接可以传入函数进一个方法中，例子：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>random<span class="token punctuation">.</span>Random

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> showName <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> age<span class="token operator">:</span> Int <span class="token operator">-&gt;</span>
        <span class="token string-literal singleline"><span class="token string">&quot;My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string"> and I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string"> years old&quot;</span></span>
    <span class="token punctuation">}</span>
    <span class="token function">showOnBoard</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;测试文本&quot;</span></span><span class="token punctuation">,</span> showName<span class="token punctuation">)</span>
<span class="token punctuation">}</span>


<span class="token keyword">fun</span> <span class="token function">showOnBoard</span><span class="token punctuation">(</span>goodsName<span class="token operator">:</span> String<span class="token punctuation">,</span> getDiscountWords<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> nextInt <span class="token operator">=</span> <span class="token function">Random</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getDiscountWords</span><span class="token punctuation">(</span>goodsName<span class="token punctuation">,</span> nextInt<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，还可以简化成这样</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>random<span class="token punctuation">.</span>Random

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">showOnBoard</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;测试文本&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token operator">-&gt;</span>
        <span class="token string-literal singleline"><span class="token string">&quot;My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string"> and I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string"> years old&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">fun</span> <span class="token function">showOnBoard</span><span class="token punctuation">(</span>goodsName<span class="token operator">:</span> String<span class="token punctuation">,</span> getDiscountWords<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> nextInt <span class="token operator">=</span> <span class="token function">Random</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getDiscountWords</span><span class="token punctuation">(</span>goodsName<span class="token punctuation">,</span> nextInt<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果说函数的参数只有一个，且是函数的话，则还可以简写成这样</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>random<span class="token punctuation">.</span>Random

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    showMessage <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">&quot;Number is a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">showMessage</span><span class="token punctuation">(</span>messageFunction<span class="token operator">:</span> <span class="token punctuation">(</span>num<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> nextInt <span class="token operator">=</span> <span class="token function">Random</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">messageFunction</span><span class="token punctuation">(</span>nextInt<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可读性极差了属于是...敲代码一时爽，维护火葬场</p><h3 id="返回值是函数" tabindex="-1"><a class="header-anchor" href="#返回值是函数" aria-hidden="true">#</a> 返回值是函数</h3><p>直接上代码吧，相当于返回了一个可以随时执行的函数</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> configCallBack <span class="token operator">=</span> <span class="token function">configCallBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">configCallBack</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">configCallBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> String <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> goodsName<span class="token operator">:</span> String <span class="token operator">-&gt;</span>
        <span class="token keyword">val</span> currentYear <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span>
        <span class="token string-literal singleline"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">goodsName</span></span><span class="token string">! The current year is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">currentYear</span></span><span class="token string">&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果说给那个currentYear加了作用域的话，例如定义在这个return前面，则对后续调用它的所有人来说，都是固定的值</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> configCallBack <span class="token operator">=</span> <span class="token function">configCallBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">configCallBack</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">configCallBack</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三1&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">configCallBack</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三2&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">configCallBack</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三3&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">configCallBack</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三4&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">configCallBack</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三5&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">configCallBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> String <span class="token punctuation">{</span>
    <span class="token keyword">val</span> currentYear <span class="token operator">=</span> <span class="token function">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> goodsName<span class="token operator">:</span> String <span class="token operator">-&gt;</span>
        <span class="token string-literal singleline"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">goodsName</span></span><span class="token string">! The current year is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">currentYear</span></span><span class="token string">&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就类似于这样</p><figure><img src="`+v+'" alt="image-20220506154756594" tabindex="0" loading="lazy"><figcaption>image-20220506154756594</figcaption></figure><h2 id="null的处理" tabindex="-1"><a class="header-anchor" href="#null的处理" aria-hidden="true">#</a> Null的处理</h2><figure><img src="'+m+`" alt="image-20220506163943325" tabindex="0" loading="lazy"><figcaption>image-20220506163943325</figcaption></figure><p>在Kotlin中，除非另有规定，不然变量不可为空值，这样一来，运行时崩溃从根源上解决</p><h3 id="声明可空类型" tabindex="-1"><a class="header-anchor" href="#声明可空类型" aria-hidden="true">#</a> 声明可空类型</h3><p>但是为了避免NullPointerException，Kotlin的做法是不让我们给非空类型变量赋null值，但是Null在Kotlin中依然存在</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想让一个对象是可空的呢？</p><p>只需要这样</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> myStr<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>myStr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>myStr<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;myStr is null&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="null的安全处理-操作符和let" tabindex="-1"><a class="header-anchor" href="#null的安全处理-操作符和let" aria-hidden="true">#</a> null的安全处理-操作符和let</h3><p>如下</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> capitalize<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">val</span> capitalize1 <span class="token operator">=</span> capitalize<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>capitalize1<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那个<code>?</code>的作用是如果说为空的话，就执行后面的函数，而是返回前面的值，如果是不为空的话，则执行后面的函数</p><p>同理，判断空了之后，还可以使用let来对其进行<strong>进一步的判断和操作</strong>，例如判断是否是空字符串（let：需要接受一个字符串，返回一个字符串）</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> capitalize<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
    <span class="token keyword">val</span> endValue <span class="token operator">=</span> capitalize<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里的it类型是String，而不是String?</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token string-literal singleline"><span class="token string">&quot;This is a null or empty string&quot;</span></span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            it<span class="token punctuation">.</span><span class="token function">uppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span>endValue<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="null的安全处理-非空断言操作符" tabindex="-1"><a class="header-anchor" href="#null的安全处理-非空断言操作符" aria-hidden="true">#</a> Null的安全处理-非空断言操作符</h3><p><code>!!</code>两个感叹号，表示该变量一定不为空，当变量为空的时候，使用它将会抛出Java的空异常<code>java.lang.NullPointerException</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> capitalize<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">val</span> endValue <span class="token operator">=</span> capitalize<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>endValue<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="null的安全处理-if语句" tabindex="-1"><a class="header-anchor" href="#null的安全处理-if语句" aria-hidden="true">#</a> Null的安全处理-If语句</h3><p>这就是用Java的语法了，直接用即可</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> capitalize<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>capitalize <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>capitalize<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;capitalize is null&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然可以用if，但是相比之下安全调用操作符更灵活一些，代码也更简洁，安全调用操作符支持多函数链式调用</p><p>例如</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> capitalize<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token comment">// ?: 当左边的为空的时候，返回右边的，否则</span>
    <span class="token function">println</span><span class="token punctuation">(</span>capitalize <span class="token operator">?:</span> <span class="token string-literal singleline"><span class="token string">&quot;This is a null value&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h2><h3 id="自定义异常和异常处理" tabindex="-1"><a class="header-anchor" href="#自定义异常和异常处理" aria-hidden="true">#</a> 自定义异常和异常处理</h3><p>比较简单，这里就一笔带过</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">MyTest</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> MyException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> MyException <span class="token operator">:</span> <span class="token function">RuntimeException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;自定义异常&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">MyTest</span><span class="token punctuation">(</span>num<span class="token operator">:</span> Int<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断是是否为空</span>
    num <span class="token operator">?:</span> <span class="token keyword">throw</span> <span class="token function">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 判断value</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token function">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;num = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">num</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="先决条件函数" tabindex="-1"><a class="header-anchor" href="#先决条件函数" aria-hidden="true">#</a> 先决条件函数</h3><p>Kotlin标准库提供了一些遍历函数，使用这些内置函数，可以抛出带有自定义信息的异常，这些便利函数叫先决条件函数，可以使用它来定义先决条件，<strong>条件必须满足，目标代码才可以执行</strong></p><figure><img src="`+g+`" alt="image-20220506192545125" tabindex="0" loading="lazy"><figcaption>image-20220506192545125</figcaption></figure><p>例子</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">checkOperator</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">checkOperator</span><span class="token punctuation">(</span>number<span class="token operator">:</span> Int<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//    如果值为空，则抛出一个IllegalStateException，该异常带有调用lazyMessage的结果。否则返回非空值。</span>
    <span class="token comment">// 如果这里传入了一个空，则后续的println将不会执行</span>
    <span class="token keyword">val</span> checkNotNull <span class="token operator">=</span> <span class="token function">checkNotNull</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">&quot;这是一个null值&quot;</span></span> <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Number is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">checkNotNull</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>源码是这样的</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token label symbol">@kotlin</span><span class="token punctuation">.</span>internal<span class="token punctuation">.</span>InlineOnly
<span class="token keyword">public</span> <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T <span class="token operator">:</span> Any<span class="token operator">&gt;</span> <span class="token function">checkNotNull</span><span class="token punctuation">(</span>value<span class="token operator">:</span> T<span class="token operator">?</span><span class="token punctuation">,</span> lazyMessage<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Any<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>
    contract <span class="token punctuation">{</span>
        <span class="token function">returns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">implies</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> message <span class="token operator">=</span> <span class="token function">lazyMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token function">IllegalStateException</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串操作" tabindex="-1"><a class="header-anchor" href="#字符串操作" aria-hidden="true">#</a> 字符串操作</h2><h3 id="截取字符串substring" tabindex="-1"><a class="header-anchor" href="#截取字符串substring" aria-hidden="true">#</a> 截取字符串subString</h3><p>其余的和Java一样，但是额外支持intRange类型（一个整数范围的类型）的参数，until创建的范围不包括上限值</p><p>例子：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">const</span> <span class="token keyword">val</span> NAME <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Amayakite&quot;</span></span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> index <span class="token operator">=</span> NAME<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;y&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">//    0-2:Ama</span>
    <span class="token keyword">val</span> substring <span class="token operator">=</span> NAME<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span> until index<span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>substring<span class="token punctuation">)</span>
<span class="token comment">//    0-4:Amaya</span>
    <span class="token keyword">val</span> substring1 <span class="token operator">=</span> NAME<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..</span><span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>substring1<span class="token punctuation">)</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相当于是可以跟方便的定义截取的片段了</p><h3 id="转换集合split" tabindex="-1"><a class="header-anchor" href="#转换集合split" aria-hidden="true">#</a> 转换集合split</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">const</span> <span class="token keyword">val</span> NAMES <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;jack,jacky,jason&quot;</span></span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//    原先基础用法</span>
    <span class="token keyword">val</span> nameList <span class="token operator">=</span> NAMES<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;,&quot;</span></span><span class="token punctuation">)</span>
    nameList<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token comment">//    同时在List中，支持使用解构赋值的方式来获取元素</span>
    <span class="token keyword">val</span> <span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> third<span class="token punctuation">)</span> <span class="token operator">=</span> nameList
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;first: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">first</span></span><span class="token string">, second: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">second</span></span><span class="token string">, third: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">third</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">//    当然，也可以直接获取到切片就这样做</span>
    <span class="token keyword">val</span> <span class="token punctuation">(</span>j1<span class="token punctuation">,</span> j2<span class="token punctuation">,</span> j3<span class="token punctuation">)</span> <span class="token operator">=</span> NAMES<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;,&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;j1: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">j1</span></span><span class="token string">, j2: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">j2</span></span><span class="token string">, j3: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">j3</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="replace高级语法" tabindex="-1"><a class="header-anchor" href="#replace高级语法" aria-hidden="true">#</a> replace高级语法</h3><p>它支持指定的字替换成哪些内容</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">const</span> <span class="token keyword">val</span> NAME <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;The people of the world&quot;</span></span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 第一个参数：正则表达式</span>
    <span class="token keyword">val</span> replace <span class="token operator">=</span> NAME<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token function">Regex</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;[peol]&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 第二个参数：一个函数，传入一个 MatchResult对象，返回一个Str</span>
        <span class="token keyword">when</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token string-literal singleline"><span class="token string">&quot;p&quot;</span></span> <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span>
            <span class="token string-literal singleline"><span class="token string">&quot;e&quot;</span></span> <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;2&quot;</span></span>
            <span class="token string-literal singleline"><span class="token string">&quot;o&quot;</span></span> <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;3&quot;</span></span>
            <span class="token string-literal singleline"><span class="token string">&quot;l&quot;</span></span> <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;4&quot;</span></span>
            <span class="token keyword">else</span> <span class="token operator">-&gt;</span> it<span class="token punctuation">.</span>value
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span>replace<span class="token punctuation">)</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="比较字符串或对象" tabindex="-1"><a class="header-anchor" href="#比较字符串或对象" aria-hidden="true">#</a> 比较字符串或对象</h3><p>和Java一样的是，可以通过equals来进行比较</p><p>不一样的是，多了一个<code>===</code>，并且<code>==</code>从地址比较变成了等效于equals，<code>===</code>才是比较地址</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> charArrayOf <span class="token operator">=</span> <span class="token function">charArrayOf</span><span class="token punctuation">(</span><span class="token char">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;o&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>charArrayOf<span class="token punctuation">)</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span>
    <span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token comment">// true 因为本质是equals</span>
    <span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token comment">// 比较地址 相当于原生java的==</span>
    <span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 不多说明</span>
<span class="token punctuation">}</span>

<span class="token comment">// 结果：</span>
<span class="token boolean">true</span>
<span class="token boolean">false</span>
<span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到编译后的代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HelloKotlinKt</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArrayOf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token char">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;o&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>charArrayOf<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
       <span class="token comment">// 第一个 ==</span>
      <span class="token keyword">boolean</span> var3 <span class="token operator">=</span> <span class="token class-name">Intrinsics</span><span class="token punctuation">.</span><span class="token function">areEqual</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">// 第二个 ===</span>
      var3 <span class="token operator">=</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">// 第三个</span>
      var3 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数值" tabindex="-1"><a class="header-anchor" href="#数值" aria-hidden="true">#</a> 数值</h2><h3 id="安全转换数值" tabindex="-1"><a class="header-anchor" href="#安全转换数值" aria-hidden="true">#</a> 安全转换数值</h3><p>可以通过<code>toXXxOrNull</code>来进行方便快捷的转换</p><p>例如转换一个东西为int</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> toIntOrNull <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;88.88&quot;</span></span><span class="token punctuation">.</span><span class="token function">toIntOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>toIntOrNull<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 传入的没法转换成int，返回null，可以转换成int，则转换成int</span>
<span class="token comment">// 上面传入的是一个double，无法转换成int，返回null</span>

<span class="token comment">// 下方转换double，可以转换，所以返回的是一个double数值 fun main() {</span>
<span class="token keyword">val</span> toIntOrNull <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;88.88&quot;</span></span><span class="token punctuation">.</span><span class="token function">toDoubleOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">println</span><span class="token punctuation">(</span>toIntOrNull<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="标准库" tabindex="-1"><a class="header-anchor" href="#标准库" aria-hidden="true">#</a> 标准库</h2><p>就像是javautil那样，或者golang的fmt、strconv等</p><h3 id="apply" tabindex="-1"><a class="header-anchor" href="#apply" aria-hidden="true">#</a> apply</h3><p>直接看例子吧</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File


<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello.kt&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">//    可读</span>
    file<span class="token punctuation">.</span><span class="token function">setReadable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">//    可写</span>
    file<span class="token punctuation">.</span><span class="token function">setWritable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">//    不可执行</span>
    file<span class="token punctuation">.</span><span class="token function">setExecutable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>

<span class="token comment">//    上方可以通过apply函数来简化代码</span>
    <span class="token keyword">var</span> file1 <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello.kt&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>
        <span class="token function">setReadable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token function">setWritable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token function">setExecutable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+b+`" alt="image-20220506223530079" tabindex="0" loading="lazy"><figcaption>image-20220506223530079</figcaption></figure><p>它的源码是这样的</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token label symbol">@kotlin</span><span class="token punctuation">.</span>internal<span class="token punctuation">.</span>InlineOnly
<span class="token keyword">public</span> <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> T<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>block<span class="token operator">:</span> T<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>
    contract <span class="token punctuation">{</span>
        <span class="token function">callsInPlace</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> InvocationKind<span class="token punctuation">.</span>EXACTLY_ONCE<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个之后会说明</p><h3 id="let" tabindex="-1"><a class="header-anchor" href="#let" aria-hidden="true">#</a> let</h3><figure><img src="`+f+`" alt="image-20220506223552653" tabindex="0" loading="lazy"><figcaption>image-20220506223552653</figcaption></figure><p>例如：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// last() 取最后一个，let 获取这个值 并且自己调整 然后返回</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span> listOf<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>
        it <span class="token operator">*</span> it
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不用let的话，是长这样的</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span> listOf<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    result <span class="token operator">*=</span> result
    <span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>let也时常用来动态返回值</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">formatGreeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">formatGreeter</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">formatGreeter</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
<span class="token comment">//    1. 如果开始不为空，则为Hello, $name 所以返回左边的，否则返回右边的</span>
    <span class="token keyword">return</span> name<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span> <span class="token operator">?:</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello, anonymous&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="run" tabindex="-1"><a class="header-anchor" href="#run" aria-hidden="true">#</a> run</h3><p>光看作用域行为，run和apply差不多，但是与其不同的是，run函数不返回接收者，run返回的是<strong>Lambda的结果</strong>，也就是最后行代码的结果</p><p>例如</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> filePath <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;E:\\\\MyProject\\\\blog_vite\\\\package.json&quot;</span></span>
    <span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>
    <span class="token keyword">var</span> run <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{</span>
        <span class="token function">setReadable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">//        读取文件内的所有内容（如果超过了2G不建议用这个 这个是一次性读取）</span>
        <span class="token function">readText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//                查看是否包含某些内容，这个方法返回一个boolean值</span>
<span class="token comment">//                如果不写下面这一行，则返回的是读取到的所有内容</span>
            <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;vue-router&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时，它里面也可以直接传入一个函数</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">var</span> run <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;The People&#39;s Republic of China&quot;</span></span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token operator">::</span>isLongStr<span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span>

<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">isLongStr</span><span class="token punctuation">(</span>str<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token operator">=</span> str<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">10</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，还可以链试调用</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">var</span> run <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;The People&#39;s Republic of China&quot;</span></span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token operator">::</span>isLongStr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token operator">::</span>showMessage<span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span>

<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">isLongStr</span><span class="token punctuation">(</span>str<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token operator">=</span> str<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">10</span>

<span class="token keyword">fun</span> <span class="token function">showMessage</span><span class="token punctuation">(</span>isLong<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isLong<span class="token punctuation">)</span> <span class="token string-literal singleline"><span class="token string">&quot;message is long &quot;</span></span> <span class="token keyword">else</span> <span class="token string-literal singleline"><span class="token string">&quot;please input message &quot;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="with" tabindex="-1"><a class="header-anchor" href="#with" aria-hidden="true">#</a> With</h3><p>和run的用途一样，唯一不同的是，run是直接调用，而with需要传入我们的内容</p><p>例子</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">var</span> with <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello World This is a User&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">with</span><span class="token punctuation">(</span><span class="token function">isLongStr</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span>with<span class="token punctuation">)</span>


<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">isLongStr</span><span class="token punctuation">(</span>str<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token operator">=</span> str<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">10</span>

<span class="token keyword">fun</span> <span class="token function">showMessage</span><span class="token punctuation">(</span>isLong<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isLong<span class="token punctuation">)</span> <span class="token string-literal singleline"><span class="token string">&quot;message is long &quot;</span></span> <span class="token keyword">else</span> <span class="token string-literal singleline"><span class="token string">&quot;please input message &quot;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="also" tabindex="-1"><a class="header-anchor" href="#also" aria-hidden="true">#</a> also</h3><p>这个和let比较像，不同的地方是，let返回的是最终的结果，而这个最终返回的是开始的调用的值，也就是说，可以基于一个值去做一些别的事情而不会影响到原来的值</p><ul><li>Let：传入一个值（源值），最终通过源值获取到其他值</li><li>also：基于源值进行一些特定的操作，最后将没有被修改过的源值返回</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">var</span> also <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>it <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>
        it <span class="token operator">+</span> <span class="token number">20</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 这里获取到的依旧是1</span>
    <span class="token function">println</span><span class="token punctuation">(</span>also<span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，光是这样肯定是不够的，拿文件举例</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">var</span> fileContextList<span class="token operator">:</span> List<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>
    <span class="token keyword">val</span> filePath <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;E:\\\\MyProject\\\\blog_vite\\\\package.json&quot;</span></span>
    <span class="token keyword">val</span> file <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>
    file<span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;fileName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">it<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;filePath = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">it<span class="token punctuation">.</span>path</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;fileAbsolutePath = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">it<span class="token punctuation">.</span>absolutePath</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;fileParent = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">it<span class="token punctuation">.</span>parent</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;fileParentFile = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">it<span class="token punctuation">.</span>parentFile</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>
        <span class="token comment">// readLines 读取文件，按照每一行来读取，返回一个list&lt;String&gt;</span>
        fileContextList <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">readLines</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    fileContextList<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+y+`" alt="image-20220506232001999" tabindex="0" loading="lazy"><figcaption>image-20220506232001999</figcaption></figure><h3 id="takeif" tabindex="-1"><a class="header-anchor" href="#takeif" aria-hidden="true">#</a> takeIf</h3><p>和其他标准函数有点不同，它需要判断lambda中提供的条件表达式，给出true或者false结果</p><p>如果判断结果是true，则takeIf返回调用者，如果是false，则返回null</p><p>如果需要判断某个条件是否满足，再决定是否可以赋值变量或执行某项任务，takeIf就非常有用，概念上讲，takeIf函数类似于If语句，但它的优势在于可以直接在对象实例上调用，避免了临时变量赋值的麻烦</p><p>例如：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> filePath <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;E:\\\\MyProject\\\\blog_vite\\\\package.json&quot;</span></span>
    <span class="token keyword">val</span> file <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>
<span class="token comment">//    先判断是否可读写再进行后续的操作</span>
    <span class="token keyword">val</span> let <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">takeIf</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> it<span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;File is readable and writable&quot;</span></span><span class="token punctuation">)</span>
        it<span class="token punctuation">.</span><span class="token function">readText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span>let<span class="token punctuation">)</span>

<span class="token comment">//    如果不是用的takeIf,则要这样</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;File is readable and writable&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">readText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fakeunless" tabindex="-1"><a class="header-anchor" href="#fakeunless" aria-hidden="true">#</a> fakeUnless</h3><p>和takeIf是反着来的，只有我们给定的判定结果为false时，takeUnless才回返回原始接收者对象，否则返回null</p><p>例如：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> filePath <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;E:\\\\MyProject\\\\blog_vite\\\\package.jsonaaa&quot;</span></span>
    <span class="token keyword">val</span> file <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>
<span class="token comment">//    先判断是否可执行再进行后续的操作</span>
    <span class="token keyword">val</span> let <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">takeUnless</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>
        <span class="token string-literal singleline"><span class="token string">&quot;文件不存在&quot;</span></span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span>let<span class="token punctuation">)</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h2><p>和其他类型一样，在Kotlin中，List、set、Map的变量也分为两类：<strong>只读和可变</strong></p><h3 id="不可变list的创建和获取" tabindex="-1"><a class="header-anchor" href="#不可变list的创建和获取" aria-hidden="true">#</a> 不可变List的创建和获取</h3><p>emm就是创建完毕后 不能增删改元素，只能查元素，使用ListOf来创建，就当是<strong>Java中的数组</strong>即可</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> listOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;李四&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;王五&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;李四&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 运行结果：</span>
<span class="token punctuation">[</span>张三<span class="token punctuation">,</span> 李四<span class="token punctuation">,</span> 王五<span class="token punctuation">]</span>
张三
张三
张三
王五
<span class="token number">3</span>
<span class="token boolean">false</span>
<span class="token boolean">true</span>
<span class="token boolean">true</span>
<span class="token number">0</span>
<span class="token number">0</span>
<span class="token punctuation">[</span>张三<span class="token punctuation">,</span> 李四<span class="token punctuation">]</span>
<span class="token punctuation">[</span>张三<span class="token punctuation">,</span> 李四<span class="token punctuation">,</span> 王五<span class="token punctuation">]</span>
<span class="token punctuation">[</span>Ljava<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">;</span><span class="token label symbol">@6193b845</span>

进程已结束<span class="token punctuation">,</span>退出代码<span class="token number">0</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安全的获取list内的元素" tabindex="-1"><a class="header-anchor" href="#安全的获取list内的元素" aria-hidden="true">#</a> 安全的获取List内的元素</h3><p>使用<code>getOrElse即可</code></p><figure><img src="`+h+`" alt="image-20220507141555685" tabindex="0" loading="lazy"><figcaption>image-20220507141555685</figcaption></figure><p>首先你直接取出一个不存在的东西的话，会抛出如下异常</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> listOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;李四&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;王五&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
<span class="token comment">// 抛出ArrayIndexOutOfBoundsException</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用上安全的获取就是这样的</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> listOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;李四&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;王五&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string"> 位置的索引不存在，返回默认字符串&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> s <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getOrNull</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token string-literal singleline"><span class="token string">&quot;位置不存在，返回null&quot;</span></span>
    <span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可变list" tabindex="-1"><a class="header-anchor" href="#可变list" aria-hidden="true">#</a> 可变List</h3><p>就是Java中的普通列表，可以自由的给它增删改查元素</p><p>当然，除了下面这种方法，还可以直接用Java中的<code>ArrayList</code>之类的来进行创建</p><figure><img src="`+q+`" alt="image-20220507143117842" tabindex="0" loading="lazy"><figcaption>image-20220507143117842</figcaption></figure><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;one&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;two&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;three&quot;</span></span><span class="token punctuation">)</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;four&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">//    添加，通过运算符+=</span>
    list <span class="token operator">+=</span> <span class="token string-literal singleline"><span class="token string">&quot;five&quot;</span></span>
<span class="token comment">//    指定位置插入（在指定位置之前）</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;zero&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>
<span class="token comment">//    删除-通过元素</span>
    list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;two&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">//    删除-通过位置</span>
    list<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">//    删除：通过运算符-=</span>
    list <span class="token operator">-=</span> <span class="token string-literal singleline"><span class="token string">&quot;three&quot;</span></span>
<span class="token comment">//    删除-通过语法糖</span>
    list<span class="token punctuation">.</span><span class="token function">removeIf</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;o&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>
<span class="token comment">//    替换</span>
    list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;zero&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">//    或者直接赋值</span>
    list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;abc&quot;</span></span>
<span class="token comment">//    查询</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">//    获取多个</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//    转换成不可变集合</span>
    <span class="token keyword">val</span> list2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="遍历-索引遍历" tabindex="-1"><a class="header-anchor" href="#遍历-索引遍历" aria-hidden="true">#</a> 遍历（索引遍历）</h3><p>这里就不写基础的了，有个包含index的快速遍历函数</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> listOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;one&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;two&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;three&quot;</span></span><span class="token punctuation">)</span>
    list<span class="token punctuation">.</span><span class="token function">forEachIndexed</span> <span class="token punctuation">{</span> index<span class="token punctuation">,</span> s <span class="token operator">-&gt;</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">index</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">s</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token comment">// 底层代码</span>
<span class="token keyword">public</span> <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> Iterable<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">forEachIndexed</span><span class="token punctuation">(</span>action<span class="token operator">:</span> <span class="token punctuation">(</span>index<span class="token operator">:</span> Int<span class="token punctuation">,</span> T<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token punctuation">{</span>
    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>item <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token function">checkIndexOverflow</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构和过滤" tabindex="-1"><a class="header-anchor" href="#结构和过滤" aria-hidden="true">#</a> 结构和过滤</h3><p>可以通过<code>_</code>过滤不想要的元素（和golang很像），在Kotlin的结构中，是使用小括号进行包裹的</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> listOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;one&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;two&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;three&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> <span class="token punctuation">(</span>one<span class="token punctuation">,</span> _<span class="token punctuation">,</span> three<span class="token punctuation">)</span> <span class="token operator">=</span> list
    <span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>three<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h3><p>这个比较简单，和Java一样不允许重复，但是这里面的set支持使用index索引（elementAt函数，只支持这个）</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> myset <span class="token operator">=</span> setOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;one&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;two&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;three&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>myset<span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>myset<span class="token punctuation">.</span><span class="token function">elementAtOrElse</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">&quot;default&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    myset<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，也支持可变的</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 底层创建的是LinkedHashSet</span>
    <span class="token keyword">val</span> myset <span class="token operator">=</span> mutableSetOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;one&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;two&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;three&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>myset<span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>myset<span class="token punctuation">.</span><span class="token function">elementAtOrElse</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">&quot;default&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    myset<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span>
    myset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;four&quot;</span></span><span class="token punctuation">)</span>
    myset<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span>
    myset<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;one&quot;</span></span><span class="token punctuation">)</span>
    myset<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span>
    myset<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    myset<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span>myset<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>myset<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>myset<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;one&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><figure><img src="`+w+`" alt="image-20220507145041915" tabindex="0" loading="lazy"><figcaption>image-20220507145041915</figcaption></figure><p>例子</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> myArray <span class="token operator">=</span> arrayOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;one&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;two&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;three&quot;</span></span><span class="token punctuation">)</span>
    myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;zero&quot;</span></span>
    <span class="token function">println</span><span class="token punctuation">(</span>myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反编译结果</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;zero&quot;</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> var1 <span class="token operator">=</span> myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="map的操作" tabindex="-1"><a class="header-anchor" href="#map的操作" aria-hidden="true">#</a> Map的操作</h3><p>整的来说和其他的一样</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//    使用mapof这类东西创建的时候，可以 xx to xx来给定初始值</span>
    <span class="token keyword">val</span> myMap <span class="token operator">=</span> mutableMapOf<span class="token operator">&lt;</span>Int<span class="token punctuation">,</span> String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">to</span> <span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">to</span> <span class="token string-literal singleline"><span class="token string">&quot;李四&quot;</span></span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token keyword">to</span> <span class="token string-literal singleline"><span class="token string">&quot;王五&quot;</span></span><span class="token punctuation">)</span>
    myMap<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token operator">-&gt;</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">key</span></span><span class="token string"> -&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;==============================&quot;</span></span><span class="token punctuation">)</span>
    myMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;赵六&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">// 或者</span>
    myMap <span class="token operator">+=</span> <span class="token number">66</span> <span class="token keyword">to</span> <span class="token string-literal singleline"><span class="token string">&quot;aaa&quot;</span></span>
    <span class="token comment">// 获取一个值，如果没有就添加</span>
    myMap<span class="token punctuation">.</span><span class="token function">getOrPut</span><span class="token punctuation">(</span><span class="token number">4444</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//    或者</span>
    myMap<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;田七&quot;</span></span>
<span class="token comment">//    修改</span>
    myMap<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;张三1&quot;</span></span>
<span class="token comment">//    删除</span>
    myMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    myMap<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token operator">-&gt;</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">key</span></span><span class="token string"> -&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 取值的话 [key] 的方式取 如果不存在返回null</span>
    <span class="token comment">// getValue(key) 不存在则抛出异常</span>
    <span class="token comment">// getOrElse 取值，如果不能在则返回匿名函数的值</span>
    <span class="token comment">// getOrDefault 如果不存在，则返回给定的第二个参数的值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上to是一个语法糖，mutableMapOf实际接收的是一堆Pair列表</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">&gt;</span> <span class="token function">mutableMapOf</span><span class="token punctuation">(</span><span class="token keyword">vararg</span> pairs<span class="token operator">:</span> Pair<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> MutableMap<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">&gt;</span> <span class="token operator">=</span>
    LinkedHashMap<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token function">mapCapacity</span><span class="token punctuation">(</span>pairs<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span> <span class="token function">putAll</span><span class="token punctuation">(</span>pairs<span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以我们也可以直接传入Pair，等效于上面的to</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> myMap <span class="token operator">=</span> mutableMapOf<span class="token operator">&lt;</span>Int<span class="token punctuation">,</span> String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token function">Pair</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;One&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Two&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Three&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    myMap<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,273),A=[S];function E(N,j){return s(),a("div",null,A)}const I=n(x,[["render",E],["__file","02-Kotlin-基础.html.vue"]]);export{I as default};
