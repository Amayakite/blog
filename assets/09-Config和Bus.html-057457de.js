import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o,c as p,a as n,b as a,d as t,e}from"./app-3ab2953d.js";const c="/images/Java/SpringCloud/09-Config和Bus/image-20220108171346242.png",u="/images/Java/SpringCloud/09-Config和Bus/image-20220108171543877.png",r="/images/Java/SpringCloud/09-Config和Bus/image-20220108172329947.png",g="/images/Java/SpringCloud/09-Config和Bus/image-20220108172730837.png",d="/images/Java/SpringCloud/09-Config和Bus/image-20220108180050474.png",k="/images/Java/SpringCloud/09-Config和Bus/image-20220108180229992.png",m="/images/Java/SpringCloud/09-Config和Bus/image-20220108190011583.png",b="/images/Java/SpringCloud/09-Config和Bus/image-20220108190055153.png",v="/images/Java/SpringCloud/09-Config和Bus/image-20220108190113967.png",f="/images/Java/SpringCloud/09-Config和Bus/image-20220108191650052.png",h="/images/Java/SpringCloud/09-Config和Bus/image-20220108215121638.png",y="/images/Java/SpringCloud/09-Config和Bus/image-20220108215221391.png",_="/images/Java/SpringCloud/09-Config和Bus/image-20220108215245821.png",C="/images/Java/SpringCloud/09-Config和Bus/image-20220108215335793.png",x="/images/Java/SpringCloud/09-Config和Bus/image-20220108215355430.png",S="/images/Java/SpringCloud/09-Config和Bus/image-20220108215605239.png",I="/images/Java/SpringCloud/09-Config和Bus/image-20220108215443902.png",B="/images/Java/SpringCloud/09-Config和Bus/image-20220108215454549.png",w="/images/Java/SpringCloud/09-Config和Bus/image-20220108221335357.png",z="/images/Java/SpringCloud/09-Config和Bus/image-20220108221355017.png",J="/images/Java/SpringCloud/09-Config和Bus/image-20220108221454309.png",q="/images/Java/SpringCloud/09-Config和Bus/image-20220108221626341.png",j="/images/Java/SpringCloud/09-Config和Bus/image-20220108221636942.png",A="/images/Java/SpringCloud/09-Config和Bus/image-20220108222037135.png",R="/images/Java/SpringCloud/09-Config和Bus/image-20220108222704984.png",E="/images/Java/SpringCloud/09-Config和Bus/image-20220108222837482.png",G="/images/Java/SpringCloud/09-Config和Bus/image-20220108222934588.png",M="/images/Java/SpringCloud/09-Config和Bus/image-20220108224139699.png",P="/images/Java/SpringCloud/09-Config和Bus/image-20220108224929613.png",T="/images/Java/SpringCloud/09-Config和Bus/image-20220108225807785.png",V="/images/Java/SpringCloud/09-Config和Bus/image-20220108225832255.png",L="/images/Java/SpringCloud/09-Config和Bus/image-20220108232415761.png",$="/images/Java/SpringCloud/09-Config和Bus/image-20220108232423863.png",N="/images/Java/SpringCloud/09-Config和Bus/image-20220108232434128.png",Q="/images/Java/SpringCloud/09-Config和Bus/image-20220108232507071.png",D="/images/Java/SpringCloud/09-Config和Bus/image-20220108234237871.png",O="/images/Java/SpringCloud/09-Config和Bus/image-20220108232712902.png",U="/images/Java/SpringCloud/09-Config和Bus/image-20220108232730938.png",H="/images/Java/SpringCloud/09-Config和Bus/image-20220108232735432.png",F="/images/Java/SpringCloud/09-Config和Bus/image-20220108234341945.png",X="/images/Java/SpringCloud/09-Config和Bus/image-20220108235416183.png",K="/images/Java/SpringCloud/09-Config和Bus/image-20220108235429862.png",W="/images/Java/SpringCloud/09-Config和Bus/image-20220108235440607.png",Y="/images/Java/SpringCloud/09-Config和Bus/image-20220108235530802.png",Z="/images/Java/SpringCloud/09-Config和Bus/image-20220108235552600.png",nn="/images/Java/SpringCloud/09-Config和Bus/image-20220108235602407.png",an="/images/Java/SpringCloud/09-Config和Bus/image-20220108235856681.png",sn={},tn=e('<h2 id="config概述" tabindex="-1"><a class="header-anchor" href="#config概述" aria-hidden="true">#</a> Config概述</h2><p>Spring Cloud Config是做服务配置的，Bus则是做服务总线的，他们两都做的非常好，但奈何阿里巴巴的Nacos太过强大..几乎垄断了半壁江山</p><figure><img src="'+c+'" alt="image-20220108171346242" tabindex="0" loading="lazy"><figcaption>image-20220108171346242</figcaption></figure><p>在开始之前，我们先看看目前分布式系统中存在的问题</p><figure><img src="'+u+'" alt="image-20220108171543877" tabindex="0" loading="lazy"><figcaption>image-20220108171543877</figcaption></figure><p>不知不觉已经这么多了啊….</p><p>不知道你有没有注意到，我们的每个工程内都有<code>application.yaml</code></p><p>虽然说东西并不多，但是每个都写起来非常痛苦，加啥我们现在最下面的4个module都要连接同一个数据库，那么我们没有一个统一的配置的玩意的话，这些都需要自己手动配置，非常痛苦</p><p>而且这还是4个的情况，如果是40个的话…要改40次</p><p>而且我们实际工作中，往往有一堆对应的环境，例如dev，prod，test，就需要三套配置</p><p>大厂中更多：dev、test、SIT、UAT、准生产、生产</p><p>所以SpringCloud提供了ConfigServer来解决这个问题</p><p>它使用方便，且一次配置处处生效</p><figure><img src="'+r+'" alt="image-20220108172329947" tabindex="0" loading="lazy"><figcaption>image-20220108172329947</figcaption></figure><figure><img src="'+g+'" alt="image-20220108172730837" tabindex="0" loading="lazy"><figcaption>image-20220108172730837</figcaption></figure><p>至于配置文件存放到哪里</p>',16),en={href:"https://baike.baidu.com/item/SVN/3311103?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},ln=n("p",null,"Git的话，国内推荐Gitee，局域网推荐GitLab",-1),on={href:"https://hub.docker.com/r/twang2218/gitlab-ce-zh",target:"_blank",rel:"noopener noreferrer"},pn=e('<h2 id="简单使用config" tabindex="-1"><a class="header-anchor" href="#简单使用config" aria-hidden="true">#</a> 简单使用Config</h2><h3 id="前期准备" tabindex="-1"><a class="header-anchor" href="#前期准备" aria-hidden="true">#</a> 前期准备</h3><p>这里我假设你会用git了，然后我现在用的是GitLab的仓库 你也可以自己在github上新建仓库</p><p>spring-cloud-config</p><p>然后克隆到本地</p><figure><img src="'+d+`" alt="image-20220108180050474" tabindex="0" loading="lazy"><figcaption>image-20220108180050474</figcaption></figure><p>新建如上文件 并提交</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;init yml&quot;</span>
<span class="token function">git</span> push origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="image-20220108180229992" tabindex="0" loading="lazy"><figcaption>image-20220108180229992</figcaption></figure><p>我这里用的是gitlab</p><h3 id="配置中心的创建" tabindex="-1"><a class="header-anchor" href="#配置中心的创建" aria-hidden="true">#</a> 配置中心的创建</h3><p>都是刚需 主要是第一个，hystrix不用也可</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着编辑下你的配置文件</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3344</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>server
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">server</span><span class="token punctuation">:</span>
        <span class="token key atrule">git</span><span class="token punctuation">:</span>
          <span class="token comment"># git上面的仓库地址 可以是ssh url也可以是http/https 如果使用ssh的话要先准备好公钥</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//xxxxxxx.xxxx.xxxx/xxxxx/spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>config.git
          <span class="token comment"># 搜索目录</span>
          <span class="token key atrule">search-paths</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>config
          <span class="token comment"># 如果使用的是https或者ssh协议 都需要提供账号密码之类的（密码可以是token】）</span>
          <span class="token key atrule">password</span><span class="token punctuation">:</span> xxxxx
          <span class="token key atrule">username</span><span class="token punctuation">:</span> xxxxx
          <span class="token comment"># 如果使用的是https，则需要加上下面这个配置</span>
         <span class="token comment">#skip-ssl-validation: true</span>
      <span class="token comment"># 分支</span>
      <span class="token key atrule">label</span><span class="token punctuation">:</span> master
    <span class="token comment"># Consul相关配置</span>
    <span class="token key atrule">consul</span><span class="token punctuation">:</span>
      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span>
        <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> 全局配置中心
<span class="token comment">#        hostname: 127.0.0.1</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着编辑下启动类</p>`,16),cn=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@SpringBootApplication"),a(`
`),n("span",{class:"token annotation punctuation"},"@EnableDiscoveryClient"),a(`
`),n("span",{class:"token annotation punctuation"},"@EnableConfigServer"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"ConfigCloud3344Application"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"static"),a(),n("span",{class:"token keyword"},"void"),a(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),a(" args"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token class-name"},"SpringApplication"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"run"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ConfigCloud3344Application"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},","),a(" args"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`

`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),un=e(`<p>注意第三行的代码不要漏了</p><h3 id="配置中心使用" tabindex="-1"><a class="header-anchor" href="#配置中心使用" aria-hidden="true">#</a> 配置中心使用</h3><p>返回git，给config-dev.yaml添加一点内容并提交</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token key atrule">info</span><span class="token punctuation">:</span> <span class="token string">&quot;master branch,spring-cloud-config/config-dev.yaml version=1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+'" alt="image-20220108190011583" tabindex="0" loading="lazy"><figcaption>image-20220108190011583</figcaption></figure>',5),rn={href:"http://localhost:3344/master/config-dev.yaml",target:"_blank",rel:"noopener noreferrer"},gn=n("figure",null,[n("img",{src:b,alt:"image-20220108190055153",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20220108190055153")],-1),dn=n("p",null,"支持的Controller",-1),kn=n("figure",null,[n("img",{src:v,alt:"image-20220108190113967",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20220108190113967")],-1),mn=n("p",null,"这个格式稍微有点奇怪，但是总得来说可以分为三种，注意，只支持如下三种，也就是说我们在Git上的文件必须是中横线风格命名的方式",-1),bn=n("code",null,"/{label}/{applicatgion}-{profile}.yaml||yml",-1),vn={href:"http://localhost:3344/master/config-dev.yaml",target:"_blank",rel:"noopener noreferrer"},fn={href:"http://localhost:3344/master/config-prod.yaml",target:"_blank",rel:"noopener noreferrer"},hn={href:"http://localhost:3344/master/config-test.yaml",target:"_blank",rel:"noopener noreferrer"},yn=n("li",null,[a("或者"),n("code",null,"/dev/xxxx-xxx.yml"),a("也可以，不过要访问dev分支的话，需要仓库内先有dev分支")],-1),_n=n("code",null,"/{application}-{profile}.yml",-1),Cn={href:"http://localhost:3344/config-dev.yaml",target:"_blank",rel:"noopener noreferrer"},xn={href:"http://localhost:3344/config-prod.yaml",target:"_blank",rel:"noopener noreferrer"},Sn={href:"http://localhost:3344/config-test.yaml",target:"_blank",rel:"noopener noreferrer"},In=n("li",null,"它这里是使用的仓库默认分支 你仓库默认是什么分支 它就是什么内容",-1),Bn=n("code",null,"/{application}/{profile}[/{label}]",-1),wn={href:"http://localhost:3344/config/dev/master",target:"_blank",rel:"noopener noreferrer"},zn={href:"http://localhost:3344/config/prod/master",target:"_blank",rel:"noopener noreferrer"},Jn={href:"http://localhost:3344/config/dev",target:"_blank",rel:"noopener noreferrer"},qn=n("li",null,[a("返回的是Json字符串而并非是yaml"),n("br"),n("img",{src:f,alt:"image-20220108191650052",loading:"lazy"})],-1),jn=n("li",null,"….就是把第一个反过来一样，这个用的比较少，因为需要手动解析",-1),An=n("blockquote",null,[n("p",null,"至此，我们成功实现了Spring Cloud Config通过GitHub获取配置信息")],-1),Rn=n("h3",{id:"客户端的搭建-依赖",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#客户端的搭建-依赖","aria-hidden":"true"},"#"),a(" 客户端的搭建-依赖")],-1),En=n("p",null,"我们新建一个cloud-config-client-3355",-1),Gn=n("p",null,"依赖 注意 有两个额外的 一个是config的客户端 另一个待会说",-1),Mn=n("div",{class:"language-xml line-numbers-mode","data-ext":"xml"},[n("pre",{xml:"",class:"language-xml"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("dependencies")]),n("span",{class:"token punctuation"},">")]),a(`
    
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("dependency")]),n("span",{class:"token punctuation"},">")]),a(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("groupId")]),n("span",{class:"token punctuation"},">")]),a("org.springframework.cloud"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("groupId")]),n("span",{class:"token punctuation"},">")]),a(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("artifactId")]),n("span",{class:"token punctuation"},">")]),a("spring-cloud-starter-config"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("artifactId")]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("dependency")]),n("span",{class:"token punctuation"},">")]),a(`

    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("dependency")]),n("span",{class:"token punctuation"},">")]),a(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("groupId")]),n("span",{class:"token punctuation"},">")]),a("org.springframework.cloud"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("groupId")]),n("span",{class:"token punctuation"},">")]),a(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("artifactId")]),n("span",{class:"token punctuation"},">")]),a("spring-cloud-starter-bootstrap"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("artifactId")]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("dependency")]),n("span",{class:"token punctuation"},">")]),a(`

    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("dependency")]),n("span",{class:"token punctuation"},">")]),a(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("groupId")]),n("span",{class:"token punctuation"},">")]),a("org.springframework.cloud"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("groupId")]),n("span",{class:"token punctuation"},">")]),a(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("artifactId")]),n("span",{class:"token punctuation"},">")]),a("spring-cloud-starter-consul-discovery"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("artifactId")]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("dependency")]),n("span",{class:"token punctuation"},">")]),a(`


    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("dependency")]),n("span",{class:"token punctuation"},">")]),a(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("groupId")]),n("span",{class:"token punctuation"},">")]),a("org.springframework.cloud"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("groupId")]),n("span",{class:"token punctuation"},">")]),a(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("artifactId")]),n("span",{class:"token punctuation"},">")]),a("spring-cloud-starter-netflix-hystrix"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("artifactId")]),n("span",{class:"token punctuation"},">")]),a(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("version")]),n("span",{class:"token punctuation"},">")]),a("2.2.10.RELEASE"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("version")]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("dependency")]),n("span",{class:"token punctuation"},">")]),a(`

    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("dependency")]),n("span",{class:"token punctuation"},">")]),a(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("groupId")]),n("span",{class:"token punctuation"},">")]),a("org.springframework.boot"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("groupId")]),n("span",{class:"token punctuation"},">")]),a(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("artifactId")]),n("span",{class:"token punctuation"},">")]),a("spring-boot-starter-web"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("artifactId")]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("dependency")]),n("span",{class:"token punctuation"},">")]),a(`

    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("dependency")]),n("span",{class:"token punctuation"},">")]),a(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("groupId")]),n("span",{class:"token punctuation"},">")]),a("org.springframework.boot"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("groupId")]),n("span",{class:"token punctuation"},">")]),a(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("artifactId")]),n("span",{class:"token punctuation"},">")]),a("spring-boot-starter-actuator"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("artifactId")]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("dependency")]),n("span",{class:"token punctuation"},">")]),a(`

    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("dependency")]),n("span",{class:"token punctuation"},">")]),a(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("groupId")]),n("span",{class:"token punctuation"},">")]),a("org.projectlombok"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("groupId")]),n("span",{class:"token punctuation"},">")]),a(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("artifactId")]),n("span",{class:"token punctuation"},">")]),a("lombok"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("artifactId")]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("dependency")]),n("span",{class:"token punctuation"},">")]),a(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("dependencies")]),n("span",{class:"token punctuation"},">")]),a(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Pn=e(`<h3 id="配置文件-bootstrap-yml" tabindex="-1"><a class="header-anchor" href="#配置文件-bootstrap-yml" aria-hidden="true">#</a> 配置文件-Bootstrap.yml</h3><p>为啥要这个？</p><p>application.yml是用户级的资源配置项</p><p>bootstarp.yml是系统级的，<strong>优先级更高</strong></p><blockquote><p>Spring Cloud会创建一个<code>Bootstarp Context</code>作为Spring应用<code>Application Context</code>的父上下文，初始化的时候，<code>Bootstarp Context</code>负责从<strong>外部源</strong>加载配置属性并解析配置</p><p>这两个上下文共享一个从外部获取的<code>Environment</code></p></blockquote><p><code>Bootstarp</code>内的属性拥有高优先级，默认情况下，他们不会被本地覆盖，<code>Bootstarp Context</code>和<code>Application Context</code>有着不同的约定，所以新增了一个<code>Bootstarp.yml</code>配置文件，保证<code>Bootstarp Context</code>和<code>Application Context</code>配置的分离</p><p>要将Client模块下的<code>application.yml</code>文件改为<code>bootstrap.yml</code>这是很关键的</p><p>因为bootstrap.yml是比application.yml先加载，所以优先于高于application</p><p>bootstrap &gt; extension &gt; application</p><p>我们要使用它，必须要确保这个依赖装上了，不然启动的时候百分之一万会报错( spring cloud2020之前的版本不需要)</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># bootstrap.yml</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3355</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>client
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token comment"># Config客户端的配置</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token comment"># 分支名称</span>
      <span class="token key atrule">label</span><span class="token punctuation">:</span> dev
      <span class="token comment"># 配置文件名称</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> config
      <span class="token comment"># 读取后缀名称</span>
      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev
      <span class="token comment"># 配置中心地址</span>
      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344</span>
      <span class="token comment"># 综上所述，dev分支上config-dev.yaml配置文件将被读取：http://localhost:3344/dev/config-dev.yaml</span>

    <span class="token comment">#consul的配置</span>
    <span class="token key atrule">consul</span><span class="token punctuation">:</span>
      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span>
        <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> 微服务提供者
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写启动类、controller并测试" tabindex="-1"><a class="header-anchor" href="#编写启动类、controller并测试" aria-hidden="true">#</a> 编写启动类、controller并测试</h3><p>我们编写一个常规的启动类即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CloudClient3355Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CloudClient3355Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在编写一个controller</p>`,17),Tn=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@RestController"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"ConfigClientController"),a(),n("span",{class:"token punctuation"},"{"),a(`
    
    `),n("span",{class:"token annotation punctuation"},"@Value"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"${config.info}"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"String"),a(" configInfo"),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token annotation punctuation"},"@GetMapping"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"/configInfo"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token class-name"},"String"),a(),n("span",{class:"token function"},"getConfigInfo"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token keyword"},"return"),a(" configInfo"),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Vn=e('<p>注意 这里注入了我们git上之前配置的内容</p><figure><img src="'+h+'" alt="image-20220108215121638" tabindex="0" loading="lazy"><figcaption>image-20220108215121638</figcaption></figure><p>dev分支 访问的应该是这句话</p><p>接下来启动3344和3355 注意启动顺序</p><figure><img src="'+y+'" alt="image-20220108215221391" tabindex="0" loading="lazy"><figcaption>image-20220108215221391</figcaption></figure><p>然后我们访问下3355的这个接口</p><figure><img src="'+_+'" alt="image-20220108215245821" tabindex="0" loading="lazy"><figcaption>image-20220108215245821</figcaption></figure><p>看来没问题，这样说明我们切换分支之类的都是可以的</p><p>那动态更新呢？</p><figure><img src="'+C+'" alt="image-20220108215335793" tabindex="0" loading="lazy"><figcaption>image-20220108215335793</figcaption></figure><p>我提交了下</p><p>然后访问</p><figure><img src="'+x+'" alt="image-20220108215355430" tabindex="0" loading="lazy"><figcaption>image-20220108215355430</figcaption></figure><p>但是我访问3344，却显示的是正常的内容</p><figure><img src="'+S+'" alt="image-20220108215605239" tabindex="0" loading="lazy"><figcaption>image-20220108215605239</figcaption></figure><p>我接着重启了3355，才能获取到修改后的内容</p><figure><img src="'+I+'" alt="image-20220108215443902" tabindex="0" loading="lazy"><figcaption>image-20220108215443902</figcaption></figure><p>我们现在遇到的问题就是</p><figure><img src="'+B+`" alt="image-20220108215454549" tabindex="0" loading="lazy"><figcaption>image-20220108215454549</figcaption></figure><h3 id="手动实现动态更新" tabindex="-1"><a class="header-anchor" href="#手动实现动态更新" aria-hidden="true">#</a> 手动实现动态更新</h3><p>为了解决之前遇到的问题，我们应该去定时或者说在啥情况下要刷新下配置</p><p>我们首先要保证3355（微服务提供方）保证有如下依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来修改下<code>bootstrap.yml</code>，添加一些内容</p>`,24),Ln=n("div",{class:"language-yaml line-numbers-mode","data-ext":"yml"},[n("pre",{yaml:"",class:"language-yaml"},[n("code",null,[n("span",{class:"token key atrule"},"server"),n("span",{class:"token punctuation"},":"),a(`
  `),n("span",{class:"token key atrule"},"port"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token number"},"3355"),a(`
`),n("span",{class:"token key atrule"},"spring"),n("span",{class:"token punctuation"},":"),a(`
  `),n("span",{class:"token key atrule"},"application"),n("span",{class:"token punctuation"},":"),a(`
    `),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),a(" config"),n("span",{class:"token punctuation"},"-"),a(`client
  `),n("span",{class:"token key atrule"},"cloud"),n("span",{class:"token punctuation"},":"),a(`
    `),n("span",{class:"token comment"},"# Config客户端的配置"),a(`
    `),n("span",{class:"token key atrule"},"config"),n("span",{class:"token punctuation"},":"),a(`
      `),n("span",{class:"token comment"},"# 分支名称"),a(`
      `),n("span",{class:"token key atrule"},"label"),n("span",{class:"token punctuation"},":"),a(` dev
      `),n("span",{class:"token comment"},"# 配置文件名称"),a(`
      `),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),a(` config
      `),n("span",{class:"token comment"},"# 读取后缀名称"),a(`
      `),n("span",{class:"token key atrule"},"profile"),n("span",{class:"token punctuation"},":"),a(` dev
      `),n("span",{class:"token comment"},"# 配置中心地址"),a(`
      `),n("span",{class:"token key atrule"},"uri"),n("span",{class:"token punctuation"},":"),a(" http"),n("span",{class:"token punctuation"},":"),a("//localhost"),n("span",{class:"token punctuation"},":"),n("span",{class:"token number"},"3344"),a(`
      `),n("span",{class:"token comment"},"# 综上所述，master分支上config-dev.yaml配置文件将被读取：http://localhost:3344/master/config-dev.yaml"),a(`

    `),n("span",{class:"token comment"},"#consul的配置"),a(`
    `),n("span",{class:"token key atrule"},"consul"),n("span",{class:"token punctuation"},":"),a(`
      `),n("span",{class:"token key atrule"},"host"),n("span",{class:"token punctuation"},":"),a(` localhost
      `),n("span",{class:"token key atrule"},"port"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token number"},"8500"),a(`
      `),n("span",{class:"token key atrule"},"discovery"),n("span",{class:"token punctuation"},":"),a(`
        `),n("span",{class:"token key atrule"},"service-name"),n("span",{class:"token punctuation"},":"),a(" $"),n("span",{class:"token punctuation"},"{"),a("spring.application.name"),n("span",{class:"token punctuation"},"}"),a(`
        `),n("span",{class:"token key atrule"},"instance-id"),n("span",{class:"token punctuation"},":"),a(` 微服务提供者

`),n("span",{class:"token comment"},"# 暴露监控端点"),a(`
`),n("span",{class:"token key atrule"},"management"),n("span",{class:"token punctuation"},":"),a(`
  `),n("span",{class:"token key atrule"},"endpoints"),n("span",{class:"token punctuation"},":"),a(`
    `),n("span",{class:"token key atrule"},"web"),n("span",{class:"token punctuation"},":"),a(`
      `),n("span",{class:"token key atrule"},"exposure"),n("span",{class:"token punctuation"},":"),a(`
        `),n("span",{class:"token key atrule"},"include"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token string"},'"*"'),a(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," ")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),$n=e(`<p>接下来在我们的业务类上添加一个新的注解@RefreshScope，原理不清楚，反正通过它可以动态刷新我们的内容</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RefreshScope</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${config.info}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/configInfo&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我先修改下git上面的内容</p><figure><img src="`+w+'" alt="image-20220108221335357" tabindex="0" loading="lazy"><figcaption>image-20220108221335357</figcaption></figure><p>然后启动 并访问</p><figure><img src="'+z+`" alt="image-20220108221355017" tabindex="0" loading="lazy"><figcaption>image-20220108221355017</figcaption></figure><p>获取是没问题，那么我修改下呢？</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token key atrule">info</span><span class="token punctuation">:</span> <span class="token string">&quot;version=888888&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着访问 发现依旧还是原来的内容</p><figure><img src="`+J+'" alt="image-20220108221454309" tabindex="0" loading="lazy"><figcaption>image-20220108221454309</figcaption></figure><p>其实这里并没有问题 还记得我们之前暴露了监控端点吗，没错，就是要通过那个玩意来手动刷新…</p><p>我们要<code>POST</code>请求<code>http://localhost:3355/actuator/refresh</code>这个地址，才能实现刷新</p><p>接下来测试下</p><figure><img src="'+q+'" alt="image-20220108221626341" tabindex="0" loading="lazy"><figcaption>image-20220108221626341</figcaption></figure><p>再次访问</p><figure><img src="'+j+'" alt="image-20220108221636942" tabindex="0" loading="lazy"><figcaption>image-20220108221636942</figcaption></figure><p>新内容就出来了</p><p>但是这样。。。。会不会太麻烦了，那如果有上百台客户端，运维人员是不是要发送100次不同的请求？</p><p>虽然说可以通过写一个sh脚本来每分钟轮循发送，但是这样我们不更新的话不就是造成了性能浪费吗？</p><figure><img src="'+A+'" alt="image-20220108222037135" tabindex="0" loading="lazy"><figcaption>image-20220108222037135</figcaption></figure><p>所以就得用到另外的东西来解决这个问题</p><h2 id="bus概述" tabindex="-1"><a class="header-anchor" href="#bus概述" aria-hidden="true">#</a> Bus概述</h2><p>我们现在是想实现一个自动的、动态的刷新功能，然后Spring Cloud Bus可以配合Config来实现动态刷新的功能</p><p>Bus支持RabbitMq和Kafuka</p><p>Spring Cloud Bus配合Spring Cloud Config使用可以实现配置动态刷新</p><figure><img src="'+R+'" alt="image-20220108222704984" tabindex="0" loading="lazy"><figcaption>image-20220108222704984</figcaption></figure><figure><img src="'+E+'" alt="image-20220108222837482" tabindex="0" loading="lazy"><figcaption>image-20220108222837482</figcaption></figure><figure><img src="'+G+`" alt="image-20220108222934588" tabindex="0" loading="lazy"><figcaption>image-20220108222934588</figcaption></figure><pre><code>### 配置RabbitMQ环境
</code></pre><p>我们先启动一个rabbitmq</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token parameter variable">--name</span> rabbitmqSpringCloud <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>admin <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span>aaaabbbbcccceeeddfj1113433 rabbitmq:management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里配置了账号密码 你可以自由的修改</p><p>接着访问15672</p><figure><img src="`+M+'" alt="image-20220108224139699" tabindex="0" loading="lazy"><figcaption>image-20220108224139699</figcaption></figure><p>注意这个版本：RabbitMQ 3.9.11，待会依赖不要安装错了</p><p>接下来我们整一份3366 功能和3355一致</p><figure><img src="'+P+'" alt="image-20220108224929613" tabindex="0" loading="lazy"><figcaption>image-20220108224929613</figcaption></figure><p>PS：当只有一个配置文件的时候，<strong>据说</strong>叫application或者bootstrap都可以，不过保险起见，涉及到总线操作的建议统一命名为bootstrap.yml更好</p><h3 id="刷新的两种方式" tabindex="-1"><a class="header-anchor" href="#刷新的两种方式" aria-hidden="true">#</a> 刷新的两种方式</h3><p>我们有两种方式可以刷新客户端</p><ol><li>通过消息总线触发一个客户端的<code>/bus/refresh</code>，而刷新所有客户端的配置<br><img src="'+T+'" alt="image-20220108225807785" loading="lazy"></li><li>利用消息总线触发一个服务端ConfigServer的<code>/bus/refesh</code>端点，而刷新所有客户顿的配置<br><img src="'+V+`" alt="image-20220108225832255" loading="lazy"></li></ol><p>一般情况下来说，都是直通知Server端，为啥是它呢？</p><p>因为客户端打破了微服务的指责单一性，因为微服务本身是业务模块，它本不应该承当刷新配置的指责</p><p>并且还破坏了微服务各个节点的对等性、还有一定的局限性：例如：微服务正在迁移时，它的网络地址通常会发生变化，此时如果想要做到自动刷新，就要增加更多的客户端</p><h3 id="服务总线依赖添加" tabindex="-1"><a class="header-anchor" href="#服务总线依赖添加" aria-hidden="true">#</a> 服务总线依赖添加</h3><p>我们先在服务端（3344）添加RabbitMq的bus，完成服务总线的支持</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加了这个依赖，就相当于同时添加了Spring Cloud Bus 和Spring Boot AMQP</p><p>接着3355 3366 也添加这个依赖</p><h3 id="修改配置文件" tabindex="-1"><a class="header-anchor" href="#修改配置文件" aria-hidden="true">#</a> 修改配置文件</h3><p>首先是服务端3344需要修改 需要增加一些</p>`,51),Nn=n("div",{class:"language-yaml line-numbers-mode","data-ext":"yml"},[n("pre",{yaml:"",class:"language-yaml"},[n("code",null,[n("span",{class:"token comment"},"# 3344 application"),a(`
`),n("span",{class:"token key atrule"},"server"),n("span",{class:"token punctuation"},":"),a(`
  `),n("span",{class:"token key atrule"},"port"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token number"},"3344"),a(`
`),n("span",{class:"token key atrule"},"spring"),n("span",{class:"token punctuation"},":"),a(`
  `),n("span",{class:"token key atrule"},"application"),n("span",{class:"token punctuation"},":"),a(`
    `),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),a(" config"),n("span",{class:"token punctuation"},"-"),a(`server
  `),n("span",{class:"token key atrule"},"cloud"),n("span",{class:"token punctuation"},":"),a(`
    `),n("span",{class:"token key atrule"},"config"),n("span",{class:"token punctuation"},":"),a(`
      `),n("span",{class:"token key atrule"},"server"),n("span",{class:"token punctuation"},":"),a(`
        `),n("span",{class:"token key atrule"},"git"),n("span",{class:"token punctuation"},":"),a(`
          `),n("span",{class:"token comment"},"# git上面的仓库地址 可以是ssh url也可以是http/https"),a(`
          `),n("span",{class:"token key atrule"},"uri"),n("span",{class:"token punctuation"},":"),a(" http"),n("span",{class:"token punctuation"},":"),a("//111.111.111.111"),n("span",{class:"token punctuation"},":"),a("3000/amayakite/spring"),n("span",{class:"token punctuation"},"-"),a("cloud"),n("span",{class:"token punctuation"},"-"),a(`config.git
          `),n("span",{class:"token comment"},"# 搜索目录"),a(`
          `),n("span",{class:"token key atrule"},"search-paths"),n("span",{class:"token punctuation"},":"),a(`
            `),n("span",{class:"token punctuation"},"-"),a(" spring"),n("span",{class:"token punctuation"},"-"),a("cloud"),n("span",{class:"token punctuation"},"-"),a(`config
          `),n("span",{class:"token comment"},"# 如果使用的是https或者ssh协议 都需要提供账号密码之类的（密码可以是token】）"),a(`
          `),n("span",{class:"token key atrule"},"password"),n("span",{class:"token punctuation"},":"),a(` MRRf47ncEdGcAfS
          `),n("span",{class:"token key atrule"},"username"),n("span",{class:"token punctuation"},":"),a(` amayakite
          `),n("span",{class:"token comment"},"# 如果使用的是https，则需要加上下面这个配置"),a(`
         `),n("span",{class:"token comment"},"#skip-ssl-validation: true"),a(`
      `),n("span",{class:"token comment"},"# 分支"),a(`
      `),n("span",{class:"token key atrule"},"label"),n("span",{class:"token punctuation"},":"),a(` dev
    `),n("span",{class:"token comment"},"# Consul相关配置"),a(`
    `),n("span",{class:"token key atrule"},"consul"),n("span",{class:"token punctuation"},":"),a(`
      `),n("span",{class:"token key atrule"},"host"),n("span",{class:"token punctuation"},":"),a(` localhost
      `),n("span",{class:"token key atrule"},"port"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token number"},"8500"),a(`
      `),n("span",{class:"token key atrule"},"discovery"),n("span",{class:"token punctuation"},":"),a(`
        `),n("span",{class:"token key atrule"},"service-name"),n("span",{class:"token punctuation"},":"),a(" $"),n("span",{class:"token punctuation"},"{"),a("spring.application.name"),n("span",{class:"token punctuation"},"}"),a(`
        `),n("span",{class:"token key atrule"},"instance-id"),n("span",{class:"token punctuation"},":"),a(` 全局配置中心
  `),n("span",{class:"token comment"},"# rabbitMQ 的相关配置"),a(`
  `),n("span",{class:"token key atrule"},"rabbitmq"),n("span",{class:"token punctuation"},":"),a(`
    `),n("span",{class:"token key atrule"},"port"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token number"},"5672"),a(`
    `),n("span",{class:"token key atrule"},"host"),n("span",{class:"token punctuation"},":"),a(` 你的服务器
    `),n("span",{class:"token key atrule"},"username"),n("span",{class:"token punctuation"},":"),a(` admin
    `),n("span",{class:"token key atrule"},"password"),n("span",{class:"token punctuation"},":"),a(` aaaabbbbcccceeeddfj1113433

`),n("span",{class:"token comment"},"#        hostname: 127.0.0.1"),a(`
`),n("span",{class:"token key atrule"},"logging.level.com.Project"),n("span",{class:"token punctuation"},":"),a(` debug

`),n("span",{class:"token comment"},"# rabbitmq相关配置，暴露bus刷新配置的端点"),a(`
`),n("span",{class:"token key atrule"},"management"),n("span",{class:"token punctuation"},":"),a(`
  `),n("span",{class:"token key atrule"},"endpoints"),n("span",{class:"token punctuation"},":"),a(`
    `),n("span",{class:"token key atrule"},"web"),n("span",{class:"token punctuation"},":"),a(`
      `),n("span",{class:"token key atrule"},"exposure"),n("span",{class:"token punctuation"},":"),a(`
        `),n("span",{class:"token comment"},"# bus-refresh 是actuator的刷新操作"),a(`
        `),n("span",{class:"token key atrule"},"include"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token string"},'"bus-refresh"'),a(`

`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Qn=n("p",null,"接着是3355 3366 这两个只需要添加rabbitmq的依赖即可",-1),Dn=n("div",{class:"language-yaml line-numbers-mode","data-ext":"yml"},[n("pre",{yaml:"",class:"language-yaml"},[n("code",null,[n("span",{class:"token key atrule"},"server"),n("span",{class:"token punctuation"},":"),a(`
  `),n("span",{class:"token key atrule"},"port"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token number"},"3355"),a(`
`),n("span",{class:"token key atrule"},"spring"),n("span",{class:"token punctuation"},":"),a(`
  `),n("span",{class:"token key atrule"},"application"),n("span",{class:"token punctuation"},":"),a(`
    `),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),a(" config"),n("span",{class:"token punctuation"},"-"),a(`client
  `),n("span",{class:"token key atrule"},"cloud"),n("span",{class:"token punctuation"},":"),a(`
    `),n("span",{class:"token comment"},"# Config客户端的配置"),a(`
    `),n("span",{class:"token key atrule"},"config"),n("span",{class:"token punctuation"},":"),a(`
      `),n("span",{class:"token comment"},"# 分支名称"),a(`
      `),n("span",{class:"token key atrule"},"label"),n("span",{class:"token punctuation"},":"),a(` dev
      `),n("span",{class:"token comment"},"# 配置文件名称"),a(`
      `),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),a(` config
      `),n("span",{class:"token comment"},"# 读取后缀名称"),a(`
      `),n("span",{class:"token key atrule"},"profile"),n("span",{class:"token punctuation"},":"),a(` dev
      `),n("span",{class:"token comment"},"# 配置中心地址"),a(`
      `),n("span",{class:"token key atrule"},"uri"),n("span",{class:"token punctuation"},":"),a(" http"),n("span",{class:"token punctuation"},":"),a("//localhost"),n("span",{class:"token punctuation"},":"),n("span",{class:"token number"},"3344"),a(`
      `),n("span",{class:"token comment"},"# 综上所述，master分支上config-dev.yaml配置文件将被读取：http://localhost:3344/master/config-dev.yaml"),a(`

    `),n("span",{class:"token comment"},"#consul的配置"),a(`
    `),n("span",{class:"token key atrule"},"consul"),n("span",{class:"token punctuation"},":"),a(`
      `),n("span",{class:"token key atrule"},"host"),n("span",{class:"token punctuation"},":"),a(` localhost
      `),n("span",{class:"token key atrule"},"port"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token number"},"8500"),a(`
      `),n("span",{class:"token key atrule"},"discovery"),n("span",{class:"token punctuation"},":"),a(`
        `),n("span",{class:"token key atrule"},"service-name"),n("span",{class:"token punctuation"},":"),a(" $"),n("span",{class:"token punctuation"},"{"),a("spring.application.name"),n("span",{class:"token punctuation"},"}"),a(`
        `),n("span",{class:"token key atrule"},"instance-id"),n("span",{class:"token punctuation"},":"),a(` 微服务提供者1
  `),n("span",{class:"token comment"},"# rabbitMQ 的相关配置"),a(`
  `),n("span",{class:"token key atrule"},"rabbitmq"),n("span",{class:"token punctuation"},":"),a(`
    `),n("span",{class:"token key atrule"},"port"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token number"},"5672"),a(`
    `),n("span",{class:"token key atrule"},"host"),n("span",{class:"token punctuation"},":"),a(` 你的服务器
    `),n("span",{class:"token key atrule"},"username"),n("span",{class:"token punctuation"},":"),a(` admin
    `),n("span",{class:"token key atrule"},"password"),n("span",{class:"token punctuation"},":"),a(` aaaabbbbcccceeeddfj1113433

`),n("span",{class:"token comment"},"# 暴露监控端点"),a(`
`),n("span",{class:"token key atrule"},"management"),n("span",{class:"token punctuation"},":"),a(`
  `),n("span",{class:"token key atrule"},"endpoints"),n("span",{class:"token punctuation"},":"),a(`
    `),n("span",{class:"token key atrule"},"web"),n("span",{class:"token punctuation"},":"),a(`
      `),n("span",{class:"token key atrule"},"exposure"),n("span",{class:"token punctuation"},":"),a(`
        `),n("span",{class:"token key atrule"},"include"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token string"},'"*"'),a(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),On=e(`<h3 id="启动并测试" tabindex="-1"><a class="header-anchor" href="#启动并测试" aria-hidden="true">#</a> 启动并测试</h3><p>对，没错，只要配置了就完了</p><p>为了方便区分，我这里给3355和3366的Controller添加上端口号</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RefreshScope</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${server.port}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${config.info}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/configInfo&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;serverPort: &quot;</span> <span class="token operator">+</span> serverPort <span class="token operator">+</span> <span class="token string">&quot;\\t\\n\\n configInfo: &quot;</span> <span class="token operator">+</span> configInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着开启三个服务开始测试</p><figure><img src="`+L+'" alt="image-20220108232415761" tabindex="0" loading="lazy"><figcaption>image-20220108232415761</figcaption></figure><p>3355第一次访问</p><figure><img src="'+$+'" alt="image-20220108232423863" tabindex="0" loading="lazy"><figcaption>image-20220108232423863</figcaption></figure><p>3366第一次访问</p><figure><img src="'+N+'" alt="image-20220108232434128" tabindex="0" loading="lazy"><figcaption>image-20220108232434128</figcaption></figure><p>接着修改下数据</p><figure><img src="'+Q+'" alt="image-20220108232507071" tabindex="0" loading="lazy"><figcaption>image-20220108232507071</figcaption></figure><p>这时候我们只需要刷下3344<code>http://localhost:3344/actuator/busrefresh</code></p><p>（注意 旧版本的话用的是访问bus-refresh来刷新，但新旧版本配置都是同一个，具体的可以看服务-Actuator-映射中的路径）</p><figure><img src="'+D+'" alt="image-20220108234237871" tabindex="0" loading="lazy"><figcaption>image-20220108234237871</figcaption></figure><figure><img src="'+O+'" alt="image-20220108232712902" tabindex="0" loading="lazy"><figcaption>image-20220108232712902</figcaption></figure><p>然后访问另外两位</p><figure><img src="'+U+'" alt="image-20220108232730938" tabindex="0" loading="lazy"><figcaption>image-20220108232730938</figcaption></figure><figure><img src="'+H+'" alt="image-20220108232735432" tabindex="0" loading="lazy"><figcaption>image-20220108232735432</figcaption></figure><figure><img src="'+F+'" alt="image-20220108234341945" tabindex="0" loading="lazy"><figcaption>image-20220108234341945</figcaption></figure><p>如果你感觉这样麻烦的话，实际工作环境内，可以写个git actions脚本 一旦发现提交立马触发脚本自动发送post请求</p><h3 id="bus动态刷新-定点通知" tabindex="-1"><a class="header-anchor" href="#bus动态刷新-定点通知" aria-hidden="true">#</a> Bus动态刷新-定点通知</h3><p>上面我们已经配置完了自动的全局广播</p><p>那么现在问题来了，我如果只想通知其中一个，而不是通知全部刷新，也就是要精确通知，减少资源开销</p><p>其实实现比较简单</p><p>只需要POST请求<code>http://localhost:配置中心的端口号/actuator/busrefresh/{destination}</code></p><p><code>destination</code>：这个Rest风格的参数指定要更新配置的服务或实例</p><p>注意：旧版本中，请求路径的<code>busrefresh</code>要替换成<code>bus-refresh</code>（应该是2020之前的版本都是这样）</p><p>比方说我现在只想要通知3355，它在服务中心注册的服务名称是config-client，那么我只需使用服务名称+端口即可精准通知</p><p>使用：<code>curl -X POST http://localhost:3344/actuator/busrefresh/config-client:3355</code></p><p>发送之前修改的内容</p><figure><img src="'+X+'" alt="image-20220108235416183" tabindex="0" loading="lazy"><figcaption>image-20220108235416183</figcaption></figure><p>发送之后，3305访问</p><figure><img src="'+K+'" alt="image-20220108235429862" tabindex="0" loading="lazy"><figcaption>image-20220108235429862</figcaption></figure><p>3360访问，还是之前的内容</p><figure><img src="'+W+'" alt="image-20220108235440607" tabindex="0" loading="lazy"><figcaption>image-20220108235440607</figcaption></figure><p>当然 也可以不指定端口号 让该类的所有服务都刷新（一般也是这样用的）</p><p>更新内容</p><figure><img src="'+Y+'" alt="image-20220108235530802" tabindex="0" loading="lazy"><figcaption>image-20220108235530802</figcaption></figure><p>发送请求：<code>curl -X POST http://localhost:3344/actuator/busrefresh/config-client</code></p><p>3355</p><figure><img src="'+Z+'" alt="image-20220108235552600" tabindex="0" loading="lazy"><figcaption>image-20220108235552600</figcaption></figure><p>3366</p><figure><img src="'+nn+'" alt="image-20220108235602407" tabindex="0" loading="lazy"><figcaption>image-20220108235602407</figcaption></figure><h3 id="总线总结" tabindex="-1"><a class="header-anchor" href="#总线总结" aria-hidden="true">#</a> 总线总结</h3><p>一张图概括</p><figure><img src="'+an+'" alt="image-20220108235856681" tabindex="0" loading="lazy"><figcaption>image-20220108235856681</figcaption></figure>',47);function Un(Hn,Fn){const s=l("ExternalLinkIcon");return o(),p("div",null,[tn,n("blockquote",null,[n("p",null,[a("由于Spring Cloud Config默认使用git来存储配置文件（也有其他方式，比如支持"),n("a",en,[a("SVN"),t(s)]),a("(SVN现在没啥人用了)和本地文件），但最推荐的还是用Git，而且使用的是Http/Https访问形式")]),ln,n("p",null,[a("PS：GitLab汉化版Docker部署看这个"),n("a",on,[a("链接"),t(s)]),a("，不过不太推荐在自己的服务器上跑 要2G左右的内存")])]),pn,cn,un,n("p",null,[a("接着，打开浏览器，访问"),n("a",rn,[a("http://localhost:3344/master/config-dev.yaml"),t(s)])]),gn,dn,kn,mn,n("ol",null,[n("li",null,[bn,n("ol",null,[n("li",null,[a("这种就是典型的分支名称--配置名.yml，例如： "),n("ul",null,[n("li",null,[n("a",vn,[a("http://localhost:3344/master/config-dev.yaml"),t(s)])]),n("li",null,[n("a",fn,[a("http://localhost:3344/master/config-prod.yaml"),t(s)])]),n("li",null,[n("a",hn,[a("http://localhost:3344/master/config-test.yaml"),t(s)])]),yn])])])]),n("li",null,[a("第二种，通过"),_n,a("进行访问（没有前缀） "),n("ul",null,[n("li",null,[n("a",Cn,[a("http://localhost:3344/config-dev.yaml"),t(s)])]),n("li",null,[n("a",xn,[a("http://localhost:3344/config-prod.yaml"),t(s)])]),n("li",null,[n("a",Sn,[a("http://localhost:3344/config-test.yaml"),t(s)])]),In])]),n("li",null,[a("第三种，"),Bn,n("ul",null,[n("li",null,[n("a",wn,[a("http://localhost:3344/config/dev/master"),t(s)])]),n("li",null,[n("a",zn,[a("http://localhost:3344/config/prod/master"),t(s)])]),n("li",null,[a("如果要用默认分支 可以省略下，这样写"),n("a",Jn,[a("http://localhost:3344/config/dev"),t(s)])]),qn,jn])])]),An,Rn,En,Gn,Mn,Pn,Tn,Vn,Ln,$n,Nn,Qn,Dn,On])}const Wn=i(sn,[["render",Un],["__file","09-Config和Bus.html.vue"]]);export{Wn as default};
