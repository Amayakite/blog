import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e}from"./app-3ab2953d.js";const i="/images/Java/JavaSE/25-扩展-MySQL存储过程/image-20220531221631138.png",p="/images/Java/JavaSE/25-扩展-MySQL存储过程/image-20220531221844915.png",t="/images/Java/JavaSE/25-扩展-MySQL存储过程/image-20220531221932194.png",o="/images/Java/JavaSE/25-扩展-MySQL存储过程/image-20220531221938852.png",c="/images/Java/JavaSE/25-扩展-MySQL存储过程/image-20220531222108162.png",l="/images/Java/JavaSE/25-扩展-MySQL存储过程/image-20220531222120297.png",d="/images/Java/JavaSE/25-扩展-MySQL存储过程/image-20220531222221893.png",r="/images/Java/JavaSE/25-扩展-MySQL存储过程/image-20220531222233036.png",u="/images/Java/JavaSE/25-扩展-MySQL存储过程/image-20220531223539750.png",k="/images/Java/JavaSE/25-扩展-MySQL存储过程/image-20220531223905362.png",m="/images/Java/JavaSE/25-扩展-MySQL存储过程/image-20220531231329533.png",v="/images/Java/JavaSE/25-扩展-MySQL存储过程/image-20220531231704192.png",g="/images/Java/JavaSE/25-扩展-MySQL存储过程/image-20220531231810735.png",b="/images/Java/JavaSE/25-扩展-MySQL存储过程/image-20220531231816952.png",y="/images/Java/JavaSE/25-扩展-MySQL存储过程/image-20220531231825280.png",h="/images/Java/JavaSE/25-扩展-MySQL存储过程/image-20220531231908910.png",f="/images/Java/JavaSE/25-扩展-MySQL存储过程/image-20220531231948245.png",w="/images/Java/JavaSE/25-扩展-MySQL存储过程/image-20220531232156533.png",_="/images/Java/JavaSE/25-扩展-MySQL存储过程/image-20220531232250476.png",E={},S=e('<h1 id="存储过程" tabindex="-1"><a class="header-anchor" href="#存储过程" aria-hidden="true">#</a> 存储过程</h1><p>发现之前一直没有了解过这玩意，现在来了解下</p><p>存储过程简单来说就是一个无返回值的函数，思想比较简单，就是一个预先编译的sql语句封装</p><p>好，存储过程预先存储在服务器上，需要执行的时候，客户端只需要向服务端发出调用存储过程的命令，服务器端就可以把预先存储好的这一系列sql全部执行</p><figure><img src="'+i+`" alt="image-20220531221631138" tabindex="0" loading="lazy"><figcaption>image-20220531221631138</figcaption></figure><p>语法大概如下</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">procedure</span> 存储过程名称<span class="token punctuation">(</span><span class="token operator">in</span><span class="token operator">|</span><span class="token keyword">out</span><span class="token operator">|</span><span class="token keyword">inout</span> 参数名 参数类型<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>charateristics<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span class="token keyword">BEGIN</span>
 存储过程体
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面的 int out 和intout含义如下</p><figure><img src="`+p+'" alt="image-20220531221844915" tabindex="0" loading="lazy"><figcaption>image-20220531221844915</figcaption></figure><figure><img src="'+t+'" alt="image-20220531221932194" tabindex="0" loading="lazy"><figcaption>image-20220531221932194</figcaption></figure><figure><img src="'+o+'" alt="image-20220531221938852" tabindex="0" loading="lazy"><figcaption>image-20220531221938852</figcaption></figure><p>charateristics可以包含的内容详情如下</p><figure><img src="'+c+'" alt="image-20220531222108162" tabindex="0" loading="lazy"><figcaption>image-20220531222108162</figcaption></figure><figure><img src="'+l+'" alt="image-20220531222120297" tabindex="0" loading="lazy"><figcaption>image-20220531222120297</figcaption></figure><figure><img src="'+d+'" alt="image-20220531222221893" tabindex="0" loading="lazy"><figcaption>image-20220531222221893</figcaption></figure><figure><img src="'+r+`" alt="image-20220531222233036" tabindex="0" loading="lazy"><figcaption>image-20220531222233036</figcaption></figure><p>嘛，整体看来还是比较麻烦的...</p><h2 id="存储过程-快速上手-查询" tabindex="-1"><a class="header-anchor" href="#存储过程-快速上手-查询" aria-hidden="true">#</a> 存储过程-快速上手-查询</h2><p>这里以查询为例</p><p>我们先创建一点点数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">if</span> <span class="token keyword">EXISTS</span> test_emp<span class="token punctuation">;</span>


<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">EXISTS</span>  test_emp  <span class="token punctuation">(</span>
 id <span class="token keyword">BIGINT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">key</span>  <span class="token keyword">AUTO_INCREMENT</span> <span class="token punctuation">,</span>
 name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> 
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 插入</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_emp<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后创建一个简单的存储过程函数</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">PROCEDURE</span> select_all_emp<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>

 <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_emp<span class="token punctuation">;</span>

<span class="token keyword">END</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对，就是这么简单，然后就可以发现在函数处多了个这个</p><figure><img src="`+u+`" alt="image-20220531223539750" tabindex="0" loading="lazy"><figcaption>image-20220531223539750</figcaption></figure><p>当然，如果你不想用<code>;</code>来进行结尾的话，也可以这样</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELIMITER</span> $

<span class="token keyword">create</span> <span class="token keyword">PROCEDURE</span> select_all_emp<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>

 <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_emp<span class="token punctuation">;</span>

<span class="token keyword">END</span> $
<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后调用它，非常简单，只需要使用<strong>call</strong>即可</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">call</span>  select_all_emp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果就来了</p><figure><img src="`+k+`" alt="image-20220531223905362" tabindex="0" loading="lazy"><figcaption>image-20220531223905362</figcaption></figure><h2 id="接收返回结果" tabindex="-1"><a class="header-anchor" href="#接收返回结果" aria-hidden="true">#</a> 接收返回结果</h2><p>首先定义一个函数</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 统计小于某个id的总计数量</span>
<span class="token comment"># out定义的变量为要返回的变量</span>
<span class="token keyword">create</span> <span class="token keyword">PROCEDURE</span> show_min_id<span class="token punctuation">(</span><span class="token keyword">OUT</span> c <span class="token keyword">INT</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
<span class="token comment"># 需要使用 into来暴露返回变量</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> c <span class="token keyword">FROM</span> test_emp <span class="token keyword">WHERE</span> id <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>

<span class="token keyword">END</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着调用</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
<span class="token comment">-- 声明接收变量（这里的@ms相当于定义了一个变量 作用域为当前session）</span>
<span class="token keyword">call</span> show_min_id<span class="token punctuation">(</span><span class="token variable">@ms</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">--  查看变量</span>
<span class="token keyword">select</span> <span class="token variable">@ms</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="接收参数作为条件" tabindex="-1"><a class="header-anchor" href="#接收参数作为条件" aria-hidden="true">#</a> 接收参数作为条件</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 例如查询某个指定id的姓名</span>
<span class="token keyword">create</span> <span class="token keyword">PROCEDURE</span> show_id_name<span class="token punctuation">(</span><span class="token operator">in</span> user_id <span class="token keyword">INT</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>

 <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_emp <span class="token keyword">WHERE</span> id <span class="token operator">=</span>  user_id<span class="token punctuation">;</span>

<span class="token keyword">end</span><span class="token punctuation">;</span>

<span class="token comment">-- 执行</span>

<span class="token keyword">call</span> show_id_name<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 或者也可以这样</span>

<span class="token comment">-- 先定义一个变量</span>
<span class="token comment"># 定义变量 标准语法</span>
<span class="token keyword">SET</span> <span class="token variable">@show_id_in</span> :<span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment"># 使用变量</span>
<span class="token keyword">call</span> show_id_name<span class="token punctuation">(</span><span class="token variable">@show_id_in</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="存储函数" tabindex="-1"><a class="header-anchor" href="#存储函数" aria-hidden="true">#</a> 存储函数</h1><p>我们时常使用例如count等函数，当然这些都是可以自己定义的，定义好了之后，调用方式和调用mysql中的函数一致</p><p>语法格式</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">function</span> 函数名<span class="token punctuation">(</span>参数名 参数类型<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token keyword">returns</span> 返回值类型
<span class="token punctuation">[</span>characteristics<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>这里详情看前面的存储过程<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">begin</span> 
 函数体 注意 这里面一定要有<span class="token keyword">return</span>语句
<span class="token keyword">end</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="存储函数简单使用" tabindex="-1"><a class="header-anchor" href="#存储函数简单使用" aria-hidden="true">#</a> 存储函数简单使用</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询id大于执行值的用户 返回用户名</span>
<span class="token keyword">DELIMITER</span> $
<span class="token keyword">create</span> <span class="token keyword">FUNCTION</span>  select_user_id<span class="token punctuation">(</span>user_id <span class="token keyword">BIGINT</span><span class="token punctuation">)</span>
<span class="token keyword">returns</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>
<span class="token comment"># 下面是标准写法</span>
<span class="token comment"># 表示使用sql方言</span>
<span class="token keyword">LANGUAGE</span> <span class="token keyword">SQL</span>
<span class="token comment"># 返回值是不确定的</span>
<span class="token operator">not</span> <span class="token keyword">DETERMINISTIC</span>
<span class="token comment"># 使用了读取的sql语句</span>
<span class="token keyword">READS</span> <span class="token keyword">SQL</span> <span class="token keyword">DATA</span>

<span class="token keyword">BEGIN</span>

 <span class="token keyword">RETURN</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>test_emp<span class="token punctuation">\`</span></span> <span class="token keyword">WHERE</span> id <span class="token operator">&gt;</span>user_id<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">END</span> $
<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>

<span class="token comment"># 如果小于一条的返回值 可以使用它</span>
<span class="token keyword">select</span> select_user_id<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 如果结果大于一条，则这里直接会报错....所以函数只能有一条返回值，如果有多条的话，一定要加个limit之类的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="对比存储过程和存储函数" tabindex="-1"><a class="header-anchor" href="#对比存储过程和存储函数" aria-hidden="true">#</a> 对比存储过程和存储函数</h1><figure><img src="`+m+`" alt="image-20220531231329533" tabindex="0" loading="lazy"><figcaption>image-20220531231329533</figcaption></figure><h1 id="存储过程-函数的查看、修改、删除" tabindex="-1"><a class="header-anchor" href="#存储过程-函数的查看、修改、删除" aria-hidden="true">#</a> 存储过程/函数的查看、修改、删除</h1><p>固定语法</p><h2 id="查看" tabindex="-1"><a class="header-anchor" href="#查看" aria-hidden="true">#</a> 查看</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">create</span> {<span class="token keyword">procedure</span> <span class="token operator">|</span> <span class="token keyword">function</span> } 存储过程或者函数名
<span class="token comment"># 例如</span>
 <span class="token comment"># 不存在的话会抛出异常</span>
<span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">procedure</span> aaaa<span class="token punctuation">;</span>
<span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">function</span> bbbb <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询的话 如果有结果会返回具体信息</p><figure><img src="`+v+'" alt="image-20220531231704192" tabindex="0" loading="lazy"><figcaption>image-20220531231704192</figcaption></figure><figure><img src="'+g+'" alt="image-20220531231810735" tabindex="0" loading="lazy"><figcaption>image-20220531231810735</figcaption></figure><figure><img src="'+b+'" alt="image-20220531231816952" tabindex="0" loading="lazy"><figcaption>image-20220531231816952</figcaption></figure><figure><img src="'+y+'" alt="image-20220531231825280" tabindex="0" loading="lazy"><figcaption>image-20220531231825280</figcaption></figure><h2 id="修改" tabindex="-1"><a class="header-anchor" href="#修改" aria-hidden="true">#</a> 修改</h2><p>只能修改特征，不能修改具体的内容</p><figure><img src="'+h+'" alt="image-20220531231908910" tabindex="0" loading="lazy"><figcaption>image-20220531231908910</figcaption></figure><h2 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h2><figure><img src="'+f+'" alt="image-20220531231948245" tabindex="0" loading="lazy"><figcaption>image-20220531231948245</figcaption></figure><h1 id="关于存储过程和函数的争议" tabindex="-1"><a class="header-anchor" href="#关于存储过程和函数的争议" aria-hidden="true">#</a> 关于存储过程和函数的争议</h1><p>某些规范中，是不允许使用存储过程的，因为这样做出来的代码之类的不易迁移，不如使用sql或者其他的框架方便（这里假设你学完了java的Springboot和mybatis plus，mybatisplus的lambda可以很方便的创建优雅的查询）</p><p>但是有些大型项目中要求必须使用存储过程，因为它确实很方便</p><h2 id="存储过程的优点" tabindex="-1"><a class="header-anchor" href="#存储过程的优点" aria-hidden="true">#</a> 存储过程的优点</h2><figure><img src="'+w+'" alt="image-20220531232156533" tabindex="0" loading="lazy"><figcaption>image-20220531232156533</figcaption></figure><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h2><p>阿里巴巴的标准在国内一度成为java开发标准，所以大部分国内java项目或者脚手架中都见不到存储过程的影子</p><figure><img src="'+_+'" alt="image-20220531232250476" tabindex="0" loading="lazy"><figcaption>image-20220531232250476</figcaption></figure>',68),q=[S];function x(J,L){return a(),s("div",null,q)}const I=n(E,[["render",x],["__file","24-扩展-MySQL存储过程.html.vue"]]);export{I as default};
