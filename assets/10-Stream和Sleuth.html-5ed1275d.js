const e=JSON.parse('{"key":"v-472b50d4","path":"/JavaLang/SpringCloud/10-Stream%E5%92%8CSleuth.html","title":"10-Stream和Sleuth","lang":"zh-CN","frontmatter":{"title":"10-Stream和Sleuth","date":"2022-01-09T13:57:40.000Z","category":"分布式-微服务","tag":["微服务","Spring Cloud Stream","Spring Cloud Sleuth","SpringCloud"],"description":"Stream概述 先说说为啥要有这玩意 消息中间件不止有RabbitMQ一个，还有ActiveMQ、RocketMQ、Kafka等 实际开发中，有概率存在两种中间件，例如RabbitMQ和Kafka，众所周知，中间件想搞明白并不简单（Kafka也不是那么简单滴）但是又不能追求统一而始终使用相同的中间件，导致我们在技术切换、技术使用的过程中遇到了一堆麻烦 所以这时候 Spring Cloud Stream来了，它可以让我们不再关注具体MQ的细节，我们只需要用一种适配绑定的方式自动的给我们在各种的MQ内切换，就类似于JDbc的理念，我们只需要一个Spring Jdbc并配合上相关的数据库配置，即可使用，无须在意底层细节","head":[["meta",{"property":"og:url","content":"http://www.amayakite.github.io/JavaLang/SpringCloud/10-Stream%E5%92%8CSleuth.html"}],["meta",{"property":"og:site_name","content":"Amayakite Blogs"}],["meta",{"property":"og:title","content":"10-Stream和Sleuth"}],["meta",{"property":"og:description","content":"Stream概述 先说说为啥要有这玩意 消息中间件不止有RabbitMQ一个，还有ActiveMQ、RocketMQ、Kafka等 实际开发中，有概率存在两种中间件，例如RabbitMQ和Kafka，众所周知，中间件想搞明白并不简单（Kafka也不是那么简单滴）但是又不能追求统一而始终使用相同的中间件，导致我们在技术切换、技术使用的过程中遇到了一堆麻烦 所以这时候 Spring Cloud Stream来了，它可以让我们不再关注具体MQ的细节，我们只需要用一种适配绑定的方式自动的给我们在各种的MQ内切换，就类似于JDbc的理念，我们只需要一个Spring Jdbc并配合上相关的数据库配置，即可使用，无须在意底层细节"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-17T15:14:40.000Z"}],["meta",{"property":"article:author","content":"Amayakite"}],["meta",{"property":"article:tag","content":"微服务"}],["meta",{"property":"article:tag","content":"Spring Cloud Stream"}],["meta",{"property":"article:tag","content":"Spring Cloud Sleuth"}],["meta",{"property":"article:tag","content":"SpringCloud"}],["meta",{"property":"article:published_time","content":"2022-01-09T13:57:40.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-17T15:14:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"10-Stream和Sleuth\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-09T13:57:40.000Z\\",\\"dateModified\\":\\"2023-06-17T15:14:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amayakite\\",\\"url\\":\\"https://github.com/Amayakite\\"}]}"]]},"headers":[{"level":2,"title":"Stream概述","slug":"stream概述","link":"#stream概述","children":[{"level":3,"title":"为什么用Cloud Stream","slug":"为什么用cloud-stream","link":"#为什么用cloud-stream","children":[]},{"level":3,"title":"Binder","slug":"binder","link":"#binder","children":[]},{"level":3,"title":"编码和常见注解","slug":"编码和常见注解","link":"#编码和常见注解","children":[]}]},{"level":2,"title":"简单使用","slug":"简单使用","link":"#简单使用","children":[{"level":3,"title":"生产者构建","slug":"生产者构建","link":"#生产者构建","children":[]},{"level":3,"title":"服务消费者","slug":"服务消费者","link":"#服务消费者","children":[]},{"level":3,"title":"防止重复消费和持久化","slug":"防止重复消费和持久化","link":"#防止重复消费和持久化","children":[]}]},{"level":2,"title":"Sleuth链路跟踪","slug":"sleuth链路跟踪","link":"#sleuth链路跟踪","children":[{"level":3,"title":"安装Zipkin","slug":"安装zipkin","link":"#安装zipkin","children":[]},{"level":3,"title":"客户端的准备和配置","slug":"客户端的准备和配置","link":"#客户端的准备和配置","children":[]}]}],"git":{"createdTime":1687006308000,"updatedTime":1687014880000,"contributors":[{"name":"Amayakite","email":"amayakite@qq.com","commits":2}]},"readingTime":{"minutes":12.57,"words":3772},"filePathRelative":"JavaLang/SpringCloud/10-Stream和Sleuth.md","localizedDate":"2022年1月9日","excerpt":"<h2> Stream概述</h2>\\n<p>先说说为啥要有这玩意</p>\\n<p>消息中间件不止有RabbitMQ一个，还有ActiveMQ、RocketMQ、Kafka等</p>\\n<p>实际开发中，有概率存在两种中间件，例如RabbitMQ和Kafka，众所周知，中间件想搞明白并不简单（Kafka也不是那么简单滴）但是又不能追求统一而始终使用相同的中间件，导致我们在技术切换、技术使用的过程中遇到了一堆麻烦</p>\\n<p>所以这时候 Spring Cloud Stream来了，它可以让我们不再关注具体MQ的细节，我们只需要用一种适配绑定的方式自动的给我们在各种的MQ内切换，就类似于JDbc的理念，我们只需要一个Spring Jdbc并配合上相关的数据库配置，即可使用，无须在意底层细节</p>","autoDesc":true}');export{e as data};
