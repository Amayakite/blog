const e=JSON.parse('{"key":"v-f1849604","path":"/GoLang/Base/04-%E5%8F%8D%E5%B0%84.html","title":"04-反射","lang":"zh-CN","frontmatter":{"title":"04-反射","date":"2022-02-28T01:09:02.000Z","category":"GoLang","tag":["GoLang","Proxy","Reflect"],"description":"概述 在 Go 语言的反射机制中，任何接口值都由是一个具体类型和具体类型的值两部分组成的。 在 Go 语言中反射的相关功能由内置的 reflect 包提供，任意接口值在反射中都可以理解为由 reflect.Type 和 reflect.Value 两部分组成，并且 reflect 包提供了 reflect.TypeOf 和 reflect.ValueOf 两个函数来获取任意对象的 Value 和 Type。 举个例子，在 go 语言中我们是如何将 json 和对象相互转换的？ package main import ( \\t\\"encoding/json\\" \\t\\"fmt\\" ) type ResultResponse struct { \\tCode int `json:\\"code\\"` \\tMessage string `json:\\"message\\"` } func main() { \\tres := ResultResponse{ \\t\\tCode: 0, \\t\\tMessage: \\"Successful response\\", \\t} \\tmarshal, _ := json.Marshal(res) \\tfmt.Println(string(marshal)) }","head":[["meta",{"property":"og:url","content":"http://www.amayakite.github.io/GoLang/Base/04-%E5%8F%8D%E5%B0%84.html"}],["meta",{"property":"og:site_name","content":"Amayakite Blogs"}],["meta",{"property":"og:title","content":"04-反射"}],["meta",{"property":"og:description","content":"概述 在 Go 语言的反射机制中，任何接口值都由是一个具体类型和具体类型的值两部分组成的。 在 Go 语言中反射的相关功能由内置的 reflect 包提供，任意接口值在反射中都可以理解为由 reflect.Type 和 reflect.Value 两部分组成，并且 reflect 包提供了 reflect.TypeOf 和 reflect.ValueOf 两个函数来获取任意对象的 Value 和 Type。 举个例子，在 go 语言中我们是如何将 json 和对象相互转换的？ package main import ( \\t\\"encoding/json\\" \\t\\"fmt\\" ) type ResultResponse struct { \\tCode int `json:\\"code\\"` \\tMessage string `json:\\"message\\"` } func main() { \\tres := ResultResponse{ \\t\\tCode: 0, \\t\\tMessage: \\"Successful response\\", \\t} \\tmarshal, _ := json.Marshal(res) \\tfmt.Println(string(marshal)) }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-17T12:51:48.000Z"}],["meta",{"property":"article:author","content":"Amayakite"}],["meta",{"property":"article:tag","content":"GoLang"}],["meta",{"property":"article:tag","content":"Proxy"}],["meta",{"property":"article:tag","content":"Reflect"}],["meta",{"property":"article:published_time","content":"2022-02-28T01:09:02.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-17T12:51:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"04-反射\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-28T01:09:02.000Z\\",\\"dateModified\\":\\"2023-06-17T12:51:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amayakite\\",\\"url\\":\\"https://github.com/Amayakite\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"获取对象的类型信息","slug":"获取对象的类型信息","link":"#获取对象的类型信息","children":[]},{"level":2,"title":"类型对象值","slug":"类型对象值","link":"#类型对象值","children":[{"level":3,"title":"获取值","slug":"获取值","link":"#获取值","children":[]},{"level":3,"title":"修改值","slug":"修改值","link":"#修改值","children":[]}]},{"level":2,"title":"反射值判断","slug":"反射值判断","link":"#反射值判断","children":[]},{"level":2,"title":"实践","slug":"实践","link":"#实践","children":[{"level":3,"title":"结构体获取相关成员的方法","slug":"结构体获取相关成员的方法","link":"#结构体获取相关成员的方法","children":[]},{"level":3,"title":"StructField 类型","slug":"structfield-类型","link":"#structfield-类型","children":[]},{"level":3,"title":"实践案例","slug":"实践案例","link":"#实践案例","children":[]},{"level":3,"title":"反射使用总结","slug":"反射使用总结","link":"#反射使用总结","children":[]},{"level":3,"title":"引出反射","slug":"引出反射","link":"#引出反射","children":[]}]},{"level":2,"title":"Reflect","slug":"reflect","link":"#reflect","children":[{"level":3,"title":"反射的重要函数和概念","slug":"反射的重要函数和概念","link":"#反射的重要函数和概念","children":[]},{"level":3,"title":"反射的基本使用","slug":"反射的基本使用","link":"#反射的基本使用","children":[]},{"level":3,"title":"关于类型断言","slug":"关于类型断言","link":"#关于类型断言","children":[]},{"level":3,"title":"获取一个对象对应的常量","slug":"获取一个对象对应的常量","link":"#获取一个对象对应的常量","children":[]},{"level":3,"title":"通过反射获取对象的值","slug":"通过反射获取对象的值","link":"#通过反射获取对象的值","children":[]},{"level":3,"title":"反射修改对象的值","slug":"反射修改对象的值","link":"#反射修改对象的值","children":[]}]}],"git":{"createdTime":1687006308000,"updatedTime":1687006308000,"contributors":[{"name":"Amayakite","email":"amayakite@qq.com","commits":1}]},"readingTime":{"minutes":20.32,"words":6097},"filePathRelative":"GoLang/Base/04-反射.md","localizedDate":"2022年2月28日","excerpt":"<h2> 概述</h2>\\n<p>在 Go 语言的反射机制中，任何接口值都由是一个具体类型和具体类型的值两部分组成的。</p>\\n<p>在 Go 语言中反射的相关功能由内置的 reflect 包提供，任意接口值在反射中都可以理解为由 reflect.Type 和 reflect.Value 两部分组成，并且 reflect 包提供了 reflect.TypeOf 和 reflect.ValueOf 两个函数来获取任意对象的 Value 和 Type。</p>\\n<p>举个例子，在 go 语言中我们是如何将 json 和对象相互转换的？</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">package</span> main\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">(</span>\\n\\t<span class=\\"token string\\">\\"encoding/json\\"</span>\\n\\t<span class=\\"token string\\">\\"fmt\\"</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">type</span> ResultResponse <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\tCode    <span class=\\"token builtin\\">int</span>    <span class=\\"token string\\">`json:\\"code\\"`</span>\\n\\tMessage <span class=\\"token builtin\\">string</span> <span class=\\"token string\\">`json:\\"message\\"`</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\n\\tres <span class=\\"token operator\\">:=</span> ResultResponse<span class=\\"token punctuation\\">{</span>\\n\\t\\tCode<span class=\\"token punctuation\\">:</span>    <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>\\n\\t\\tMessage<span class=\\"token punctuation\\">:</span> <span class=\\"token string\\">\\"Successful response\\"</span><span class=\\"token punctuation\\">,</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\tmarshal<span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">_</span> <span class=\\"token operator\\">:=</span> json<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Marshal</span><span class=\\"token punctuation\\">(</span>res<span class=\\"token punctuation\\">)</span>\\n\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">string</span><span class=\\"token punctuation\\">(</span>marshal<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
