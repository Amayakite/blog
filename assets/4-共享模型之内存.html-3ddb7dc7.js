const n=JSON.parse('{"key":"v-3f16cce0","path":"/JavaLang/Thread/4-%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%86%85%E5%AD%98.html","title":"4-共享模型之内存","lang":"zh-CN","frontmatter":{"title":"4-共享模型之内存","date":"2022-01-16T22:37:40.000Z","category":"Thread","tag":["Java","JavaSE","Thread"],"description":"Java内存模型 JMM即Java Memory Model，它定义了主存、工作内存抽象概念，底层对应着CPU寄存器、缓存、硬件内存、CPU指令优化等 JMM体现在如下几个方面 原子性：保证指令不会受到线程上下文切换的影响 可见性：保证指令不会受到CPU缓存的影响 有序性：保证指令不会受到CPU指令并行优化影响 可见性问题 这里有一个非常经典的问题 import lombok.extern.slf4j.Slf4j; @Slf4j(topic = \\"c.Test\\") public class Test { static boolean run = true; public static void main(String[] args) { Thread t = new Thread(() -&gt; { while (run) { } }); t.start(); Thread.sleep(1000); run = false; } } &nbsp;&nbsp;&nbsp;","head":[["meta",{"property":"og:url","content":"http://www.amayakite.github.io/JavaLang/Thread/4-%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%86%85%E5%AD%98.html"}],["meta",{"property":"og:site_name","content":"Amayakite Blogs"}],["meta",{"property":"og:title","content":"4-共享模型之内存"}],["meta",{"property":"og:description","content":"Java内存模型 JMM即Java Memory Model，它定义了主存、工作内存抽象概念，底层对应着CPU寄存器、缓存、硬件内存、CPU指令优化等 JMM体现在如下几个方面 原子性：保证指令不会受到线程上下文切换的影响 可见性：保证指令不会受到CPU缓存的影响 有序性：保证指令不会受到CPU指令并行优化影响 可见性问题 这里有一个非常经典的问题 import lombok.extern.slf4j.Slf4j; @Slf4j(topic = \\"c.Test\\") public class Test { static boolean run = true; public static void main(String[] args) { Thread t = new Thread(() -&gt; { while (run) { } }); t.start(); Thread.sleep(1000); run = false; } } &nbsp;&nbsp;&nbsp;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-17T12:51:48.000Z"}],["meta",{"property":"article:author","content":"Amayakite"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaSE"}],["meta",{"property":"article:tag","content":"Thread"}],["meta",{"property":"article:published_time","content":"2022-01-16T22:37:40.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-17T12:51:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4-共享模型之内存\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-16T22:37:40.000Z\\",\\"dateModified\\":\\"2023-06-17T12:51:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amayakite\\",\\"url\\":\\"https://github.com/Amayakite\\"}]}"]]},"headers":[{"level":2,"title":"Java内存模型","slug":"java内存模型","link":"#java内存模型","children":[{"level":3,"title":"可见性问题","slug":"可见性问题","link":"#可见性问题","children":[]},{"level":3,"title":"解决可见性问题-volatile关键字","slug":"解决可见性问题-volatile关键字","link":"#解决可见性问题-volatile关键字","children":[]},{"level":3,"title":"可见性和原子性","slug":"可见性和原子性","link":"#可见性和原子性","children":[]},{"level":3,"title":"使用volatile做更优雅的两阶段终止","slug":"使用volatile做更优雅的两阶段终止","link":"#使用volatile做更优雅的两阶段终止","children":[]},{"level":3,"title":"犹豫模式","slug":"犹豫模式","link":"#犹豫模式","children":[]},{"level":3,"title":"有序性","slug":"有序性","link":"#有序性","children":[]},{"level":3,"title":"如何禁止指令重排序","slug":"如何禁止指令重排序","link":"#如何禁止指令重排序","children":[]},{"level":3,"title":"使用volatile完成单例设计模式","slug":"使用volatile完成单例设计模式","link":"#使用volatile完成单例设计模式","children":[]},{"level":3,"title":"懒汉单例模式","slug":"懒汉单例模式","link":"#懒汉单例模式","children":[]}]}],"git":{"createdTime":1687006308000,"updatedTime":1687006308000,"contributors":[{"name":"Amayakite","email":"amayakite@qq.com","commits":1}]},"readingTime":{"minutes":5.19,"words":1557},"filePathRelative":"JavaLang/Thread/4-共享模型之内存.md","localizedDate":"2022年1月16日","excerpt":"<h2> Java内存模型</h2>\\n<p>JMM即Java Memory Model，它定义了主存、工作内存抽象概念，底层对应着CPU寄存器、缓存、硬件内存、CPU指令优化等</p>\\n<p>JMM体现在如下几个方面</p>\\n<ul>\\n<li>原子性：保证指令不会受到线程上下文切换的影响</li>\\n<li>可见性：保证指令不会受到CPU缓存的影响</li>\\n<li>有序性：保证指令不会受到CPU指令并行优化影响</li>\\n</ul>\\n<h3> 可见性问题</h3>\\n<p>这里有一个非常经典的问题</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre java=\\"\\" class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">lombok<span class=\\"token punctuation\\">.</span>extern<span class=\\"token punctuation\\">.</span>slf4j<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Slf4j</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token annotation punctuation\\">@Slf4j</span><span class=\\"token punctuation\\">(</span>topic <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"c.Test\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Test</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">boolean</span> run <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Thread</span> t <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>run<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        t<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        run <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"highlight-lines\\"><br><br><br><br><br><br><br><div class=\\"highlight-line\\">&nbsp;</div><div class=\\"highlight-line\\">&nbsp;</div><br><br><br><div class=\\"highlight-line\\">&nbsp;</div><br><br><br></div><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
