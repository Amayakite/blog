import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c,a as n,b as s,d as t,e}from"./app-3ab2953d.js";const l="/images/Java/SpringCloud/05-Ribbon负载均衡服务调用/image-20220106175441991-16414628822851.png",u="/images/Java/SpringCloud/05-Ribbon负载均衡服务调用/image-20220106175553509.png",r="/images/Java/SpringCloud/05-Ribbon负载均衡服务调用/image-20220106175752833.png",d="/images/Java/SpringCloud/05-Ribbon负载均衡服务调用/image-20220106181120214.png",k="/images/Java/SpringCloud/05-Ribbon负载均衡服务调用/image-20220106181144789.png",m="/images/Java/SpringCloud/05-Ribbon负载均衡服务调用/image-20220106181639702.png",g="/images/Java/SpringCloud/05-Ribbon负载均衡服务调用/image-20220106214807667.png",v="/images/Java/SpringCloud/05-Ribbon负载均衡服务调用/image-20220106221245002.png",b="/images/Java/SpringCloud/05-Ribbon负载均衡服务调用/image-20220106221328331.png",f="/images/Java/SpringCloud/05-Ribbon负载均衡服务调用/image-20220106224626426.png",h="/images/Java/SpringCloud/05-Ribbon负载均衡服务调用/image-20220106232529165.png",y="/images/Java/SpringCloud/05-Ribbon负载均衡服务调用/image-20220107000127620.png",_="/images/Java/SpringCloud/05-Ribbon负载均衡服务调用/image-20220107000308732.png",R={},x=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述","aria-hidden":"true"},"#"),s(" 概述")],-1),w=n("p",null,[s("Spring Cloud Ribbon是基于Netfix Ribbon"),n("strong",null,"实现的一套客户端负载均衡工具")],-1),S=n("blockquote",null,[n("p",null,"简单来说，Ribbon是Netfix发布的开源项目，主要功能是提供客户端软件负载均衡算法服务调用，Ribbon客户端组件提供一系列完善配置项如超时连接，重试等，简单的说，就是在配置文件中列出Load Balancer（简称LB）后面的所有机器，Ribbon会自动帮组你基于某种规则（例如简单查询，随机连接等）去连接这些机器，我们很容易使用Ribbon实现自定义的负载均衡算法")],-1),C={href:"https://github.com/Netflix/ribbon/wiki/Getting-Started",target:"_blank",rel:"noopener noreferrer"},L=e('<figure><img src="'+l+'" alt="image-20220106175441991" tabindex="0" loading="lazy"><figcaption>image-20220106175441991</figcaption></figure><p>虽然已经停止维护了，但是这玩意还是非常好用</p><figure><img src="'+u+'" alt="image-20220106175553509" tabindex="0" loading="lazy"><figcaption>image-20220106175553509</figcaption></figure><p>因为它比较主流和成熟（过去式，当然现在也是，蛮好用的据说），所以还是有必要学习下</p><figure><img src="'+r+'" alt="image-20220106175752833" tabindex="0" loading="lazy"><figcaption>image-20220106175752833</figcaption></figure><p>前面我们通过了负载均衡（Eureka那里）访问8001/8002</p><p>Ribbon最终要做的就是来让这个轮循变成别的</p><p>总结：Ribbon其实就是一个软负载均衡的<strong>客户端组件</strong>，它可以和其他所需请求的客户端结合使用，和Eureka结合只是其中的一个实例</p><figure><img src="'+d+'" alt="image-20220106181120214" tabindex="0" loading="lazy"><figcaption>image-20220106181120214</figcaption></figure><figure><img src="'+k+'" alt="image-20220106181144789" tabindex="0" loading="lazy"><figcaption>image-20220106181144789</figcaption></figure><p>Eureka自带一个Ribbon</p><p>当然 新版已经没有他了，而是loadbalancer（这两个都是同样的用法）</p><figure><img src="'+m+'" alt="image-20220106181639702" tabindex="0" loading="lazy"><figcaption>image-20220106181639702</figcaption></figure><h2 id="关于resttemplate的用法" tabindex="-1"><a class="header-anchor" href="#关于resttemplate的用法" aria-hidden="true">#</a> 关于RestTemplate的用法</h2><h3 id="xxxforentity" tabindex="-1"><a class="header-anchor" href="#xxxforentity" aria-hidden="true">#</a> xxxForEntity</h3><figure><img src="'+g+`" alt="image-20220106214807667" tabindex="0" loading="lazy"><figcaption>image-20220106214807667</figcaption></figure><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/payment/create/{paymentName}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;paymentName&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> paymentName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseResult</span><span class="token punctuation">&gt;</span></span> responseResultResponseEntity <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForEntity</span><span class="token punctuation">(</span><span class="token class-name">Payment_URL</span> <span class="token operator">+</span> <span class="token string">&quot;/payment/create/&quot;</span> <span class="token operator">+</span> paymentName<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HttpStatus</span> statusCode <span class="token operator">=</span> responseResultResponseEntity<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断响应头是不是2xx</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode<span class="token punctuation">.</span><span class="token function">is2xxSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;statusCode:&quot;</span> <span class="token operator">+</span> statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 获取头信息</span>
        <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> responseResultResponseEntity<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ResponseResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> body <span class="token operator">=</span> responseResultResponseEntity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> body<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ribbon的使用" tabindex="-1"><a class="header-anchor" href="#ribbon的使用" aria-hidden="true">#</a> Ribbon的使用</h2><h3 id="较新版本需要手动安装依赖" tabindex="-1"><a class="header-anchor" href="#较新版本需要手动安装依赖" aria-hidden="true">#</a> 较新版本需要手动安装依赖</h3><p>由于比较新的版本已经没有这玩意了，所以需要手动导入下依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-ribbon --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常情况下自己用最新的就行了，因为这啥玩意也不咋更新</p><p>这个玩意的类图：</p><figure><img src="`+v+'" alt="image-20220106221245002" tabindex="0" loading="lazy"><figcaption>image-20220106221245002</figcaption></figure><p>拥有如下规则</p><figure><img src="'+b+'" alt="image-20220106221328331" tabindex="0" loading="lazy"><figcaption>image-20220106221328331</figcaption></figure><p>有这些规则，默认是第一个</p><p>不过这已经过时了，新版本中并没有这个东西</p><p>还是说下 要自定义的话</p><p>建立一个和你main的class父级之上的</p><figure><img src="'+f+`" alt="image-20220106224626426" tabindex="0" loading="lazy"><figcaption>image-20220106224626426</figcaption></figure><p>在这里建立</p><p>然后写上这些</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRibbonRule</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">myrule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着返回main，配置额外扫描，必须要这样配置，否则不生效</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableEurekaClient</span>
<span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;CLOUD-PROVIDER-PAYMENT&quot;</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">MyRibbonRule</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CloudConsumerOrder80Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CloudConsumerOrder80Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="新版本springboot使用loadbalancer完成负载均衡" tabindex="-1"><a class="header-anchor" href="#新版本springboot使用loadbalancer完成负载均衡" aria-hidden="true">#</a> 新版本SpringBoot使用LoadBalancer完成负载均衡</h2><p>springboot 2020版本 eureka删除了ribbon可以通过@LoadBalancerClient注解来改变LoadBalancer</p>`,39),E={href:"https://blog.csdn.net/weixin_50518271/article/details/111449560",target:"_blank",rel:"noopener noreferrer"},I={href:"https://www.cnblogs.com/fb010001/p/14613428.html",target:"_blank",rel:"noopener noreferrer"},B=e('<p>先看下面那篇文章</p><p>先说下 这玩意目前只有两个实现</p><p>第一个是随即实现，第二个是轮循实现</p><figure><img src="'+h+`" alt="image-20220106232529165" tabindex="0" loading="lazy"><figcaption>image-20220106232529165</figcaption></figure><p>而且还无法直接使用…..</p><p>必须自定义一个类</p><p>不能和application同级</p><p>这个类没有任何注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRandomLoadBalancerClient</span> <span class="token keyword">implements</span> <span class="token class-name">ReactorServiceInstanceLoadBalancer</span> <span class="token punctuation">{</span>

    <span class="token comment">// 服务列表</span>
    <span class="token keyword">private</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstanceListSupplier</span><span class="token punctuation">&gt;</span></span> serviceInstanceListSupplierProvider<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">CustomRandomLoadBalancerClient</span><span class="token punctuation">(</span><span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstanceListSupplier</span><span class="token punctuation">&gt;</span></span> serviceInstanceListSupplierProvider<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>serviceInstanceListSupplierProvider <span class="token operator">=</span> serviceInstanceListSupplierProvider<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Response</span><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServiceInstanceListSupplier</span> supplier <span class="token operator">=</span> serviceInstanceListSupplierProvider<span class="token punctuation">.</span><span class="token function">getIfAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">getInstanceResponse</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 使用随机数获取服务
     *
     * <span class="token keyword">@param</span> <span class="token parameter">instances</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInstanceResponse</span><span class="token punctuation">(</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> instances<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;进来了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instances<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EmptyResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;进行随机选取服务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 随机算法</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> instances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        使用ThreadRandom防止出错</span>
        <span class="token class-name">ServiceInstance</span> instance <span class="token operator">=</span> instances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResponse</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再到main中使用</p>`,10),j=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@SpringBootApplication"),s(`
`),n("span",{class:"token annotation punctuation"},"@EnableEurekaClient"),s(`
`),n("span",{class:"token annotation punctuation"},"@LoadBalancerClient"),n("span",{class:"token punctuation"},"("),s("name "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"CLOUD-PROVIDER-PAYMENT"'),n("span",{class:"token punctuation"},","),s(" configuration "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"CustomRandomLoadBalancerClient"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"CloudConsumerOrder80Application"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"SpringApplication"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"run"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"CloudConsumerOrder80Application"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},","),s(" args"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=e('<h2 id="轮循算法是怎么实现的" tabindex="-1"><a class="header-anchor" href="#轮循算法是怎么实现的" aria-hidden="true">#</a> 轮循算法是怎么实现的</h2><p>结论：rest接口第几次请求%服务器集群总数量=实际调用服务下标位置，每次重启后rest重1开始计算</p><figure><img src="'+y+'" alt="image-20220107000127620" tabindex="0" loading="lazy"><figcaption>image-20220107000127620</figcaption></figure><figure><img src="'+_+'" alt="image-20220107000308732" tabindex="0" loading="lazy"><figcaption>image-20220107000308732</figcaption></figure><h2 id="如果要自定义loadbalancer负载均衡规则" tabindex="-1"><a class="header-anchor" href="#如果要自定义loadbalancer负载均衡规则" aria-hidden="true">#</a> 如果要自定义LoadBalancer负载均衡规则</h2><p>md我目前也没有办法，只能说 真要用上了的话，就去看Ribbon的各种负载均衡的源码 然后手动敲一个吧..</p><p>没准以后这玩意完善了,,,,或者说干脆之后用nginx之类的来搞搞吧，网上也没有看到太深入的教程</p>',7);function z(P,N){const a=o("ExternalLinkIcon");return i(),c("div",null,[x,w,S,n("p",null,[s("这玩意目前也进入了维护模式"),n("a",C,[s("https://github.com/Netflix/ribbon/wiki/Getting-Started"),t(a)])]),L,n("p",null,[s("参考文章："),n("a",E,[s("https://blog.csdn.net/weixin_50518271/article/details/111449560"),t(a)])]),n("p",null,[s("和这篇文章"),n("a",I,[s("https://www.cnblogs.com/fb010001/p/14613428.html"),t(a)])]),B,j,q])}const O=p(R,[["render",z],["__file","05-Ribbon负载均衡服务调用.html.vue"]]);export{O as default};
