const n=JSON.parse('{"key":"v-b5dbad80","path":"/JavaLang/SpringCloud/24-%E6%9C%AC%E5%9C%B0%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html","title":"24-本地事务失效解决方案","lang":"zh-CN","frontmatter":{"title":"24-本地事务失效解决方案","date":"2022-02-06T13:13:27.000Z","category":"分布式-微服务","tag":["Transactional"],"description":"概述 在SpringBoot中，可以使用@Transactional来开启一个事务（自动配置好了，原理可以看之前的springframework） 但是，如果我们想要在同一个service内通过事务对象调用本类的事务对象 @Service @Slf4j public class TestService { @Transactional( rollbackFor = Exception.class, isolation = Isolation.REPEATABLE_READ, propagation = Propagation.REQUIRED, timeout = 10 ) public void a() { b(); c(); } @Transactional( rollbackFor = Exception.class, isolation = Isolation.READ_COMMITTED, propagation = Propagation.REQUIRED, timeout = 20 ) public void b() { // do something; } @Transactional( rollbackFor = Exception.class, isolation = Isolation.READ_COMMITTED, propagation = Propagation.REQUIRES_NEW, timeout = 20 ) public void c() { // do something; } }","head":[["meta",{"property":"og:url","content":"http://www.amayakite.github.io/JavaLang/SpringCloud/24-%E6%9C%AC%E5%9C%B0%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"}],["meta",{"property":"og:site_name","content":"Amayakite Blogs"}],["meta",{"property":"og:title","content":"24-本地事务失效解决方案"}],["meta",{"property":"og:description","content":"概述 在SpringBoot中，可以使用@Transactional来开启一个事务（自动配置好了，原理可以看之前的springframework） 但是，如果我们想要在同一个service内通过事务对象调用本类的事务对象 @Service @Slf4j public class TestService { @Transactional( rollbackFor = Exception.class, isolation = Isolation.REPEATABLE_READ, propagation = Propagation.REQUIRED, timeout = 10 ) public void a() { b(); c(); } @Transactional( rollbackFor = Exception.class, isolation = Isolation.READ_COMMITTED, propagation = Propagation.REQUIRED, timeout = 20 ) public void b() { // do something; } @Transactional( rollbackFor = Exception.class, isolation = Isolation.READ_COMMITTED, propagation = Propagation.REQUIRES_NEW, timeout = 20 ) public void c() { // do something; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-17T12:51:48.000Z"}],["meta",{"property":"article:author","content":"Amayakite"}],["meta",{"property":"article:tag","content":"Transactional"}],["meta",{"property":"article:published_time","content":"2022-02-06T13:13:27.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-17T12:51:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"24-本地事务失效解决方案\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-06T13:13:27.000Z\\",\\"dateModified\\":\\"2023-06-17T12:51:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amayakite\\",\\"url\\":\\"https://github.com/Amayakite\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]}],"git":{"createdTime":1687006308000,"updatedTime":1687006308000,"contributors":[{"name":"Amayakite","email":"amayakite@qq.com","commits":1}]},"readingTime":{"minutes":1.67,"words":502},"filePathRelative":"JavaLang/SpringCloud/24-本地事务失效解决方案.md","localizedDate":"2022年2月6日","excerpt":"<h2> 概述</h2>\\n<p>在SpringBoot中，可以使用<code>@Transactional</code>来开启一个事务（自动配置好了，原理可以看之前的springframework）</p>\\n<p>但是，如果我们想要在同一个service内通过事务对象调用本类的事务对象</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Service</span>\\n<span class=\\"token annotation punctuation\\">@Slf4j</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">TestService</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token annotation punctuation\\">@Transactional</span><span class=\\"token punctuation\\">(</span>\\n            rollbackFor <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Exception</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">,</span>\\n            isolation <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Isolation</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">REPEATABLE_READ</span><span class=\\"token punctuation\\">,</span>\\n            propagation <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Propagation</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">REQUIRED</span><span class=\\"token punctuation\\">,</span>\\n            timeout <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10</span>\\n    <span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">a</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">b</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">c</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token annotation punctuation\\">@Transactional</span><span class=\\"token punctuation\\">(</span>\\n            rollbackFor <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Exception</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">,</span>\\n            isolation <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Isolation</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">READ_COMMITTED</span><span class=\\"token punctuation\\">,</span>\\n            propagation <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Propagation</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">REQUIRED</span><span class=\\"token punctuation\\">,</span>\\n            timeout <span class=\\"token operator\\">=</span> <span class=\\"token number\\">20</span>\\n    <span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">b</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token comment\\">//        do something;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token annotation punctuation\\">@Transactional</span><span class=\\"token punctuation\\">(</span>\\n            rollbackFor <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Exception</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">,</span>\\n            isolation <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Isolation</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">READ_COMMITTED</span><span class=\\"token punctuation\\">,</span>\\n            propagation <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Propagation</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">REQUIRES_NEW</span><span class=\\"token punctuation\\">,</span>\\n            timeout <span class=\\"token operator\\">=</span> <span class=\\"token number\\">20</span>\\n    <span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">c</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token comment\\">//        do something;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
