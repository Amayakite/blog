import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-2d4b26c1.js";const i="/images/JavaEE/3-0规范的学习Servlet/image-20211204133523223.png",u="/images/JavaEE/3-0规范的学习Servlet/image-20211204132730182.png",r="/images/JavaEE/3-0规范的学习Servlet/image-20211204135640694.png",k="/images/JavaEE/3-0规范的学习Servlet/image-20211204140606812.png",d="/images/JavaEE/3-0规范的学习Servlet/image-20211204141409097.png",v="/images/JavaEE/3-0规范的学习Servlet/image-20211204142629615.png",m="/images/JavaEE/3-0规范的学习Servlet/image-20211204143309321.png",g="/images/JavaEE/3-0规范的学习Servlet/image-20211204143320053.png",b="/images/JavaEE/3-0规范的学习Servlet/image-20211204143505902.png",h="/images/JavaEE/3-0规范的学习Servlet/image-20211204144840470.png",f="/images/JavaEE/3-0规范的学习Servlet/image-20211204150014567.png",q="/images/JavaEE/3-0规范的学习Servlet/image-20211204150526370.png",S="/images/JavaEE/3-0规范的学习Servlet/image-20211204150622245.png",y="/images/JavaEE/3-0规范的学习Servlet/image-20211204150805807.png",x="/images/JavaEE/3-0规范的学习Servlet/image-20211204152154991.png",w="/images/JavaEE/3-0规范的学习Servlet/image-20211204162409182.png",E="/images/JavaEE/3-0规范的学习Servlet/image-20211204162732455.png",_="/images/JavaEE/3-0规范的学习Servlet/image-20211204162850284.png",j="/images/JavaEE/3-0规范的学习Servlet/image-20211204163134313.png",C="/images/JavaEE/3-0规范的学习Servlet/image-20211203155322875-16386087059881.png",R="/images/JavaEE/3-0规范的学习Servlet/image-20211203155802117-16386087059892.png",H="/images/JavaEE/3-0规范的学习Servlet/image-20211204171938943.png",T="/images/JavaEE/3-0规范的学习Servlet/image-20211204172617660.png",I="/images/JavaEE/3-0规范的学习Servlet/image-20211204173630417.png",P="/images/JavaEE/3-0规范的学习Servlet/image-20211204185818491.png",O="/images/JavaEE/3-0规范的学习Servlet/image-20211204192808207.png",A="/images/JavaEE/3-0规范的学习Servlet/image-20211204191647686.png",M="/images/JavaEE/3-0规范的学习Servlet/image-20211204193232189.png",W="/images/JavaEE/3-0规范的学习Servlet/image-20211204194727947.png",J="/images/JavaEE/3-0规范的学习Servlet/image-20211204194958004.png",z="/images/JavaEE/3-0规范的学习Servlet/image-20211204221219141.png",G={},B=e(`<p>日了，服了某些自己都没搞明白的人怎么敢来放网课教程（虽然是免费的），我假设你看过我的前一个文章，知道了它的基本用法</p><p>接下来系统的学习下这玩意</p><h2 id="servlet的简介和基本使用" tabindex="-1"><a class="header-anchor" href="#servlet的简介和基本使用" aria-hidden="true">#</a> Servlet的简介和基本使用</h2><h3 id="什么是servlet" tabindex="-1"><a class="header-anchor" href="#什么是servlet" aria-hidden="true">#</a> 什么是Servlet</h3><ol><li>是JavaEE的规范之一，规范就是接口</li><li>Servlet是Javaweb的三大组件之一，三大组件分别是Servlet程序、Filter过滤器、Listener监听器</li><li>Servlet是运行在服务器（Tomcat）上的一个Java小程序，他可以接收客户端发送过来的请求，并响应数据给客户端</li></ol><h3 id="自己实现一个servlet" tabindex="-1"><a class="header-anchor" href="#自己实现一个servlet" aria-hidden="true">#</a> 自己实现一个Servlet</h3><p>首先，我们要引入tomcat中的相对应Jar包，这里我假设你已经看过了我之前的Maven文章，把相关的Jar包都以依赖的形式导入到了package中，如果没有，那就去看看，把前几个文章都看一遍，模仿着敲一遍，以及上一篇文章最后的@Servlet注解也看过了一遍</p><p>过程分为三步：</p><ol><li>编写一个类去实现Servlet接口</li><li>实现<code>service</code>方法，处理请求，并响应数据 <ol><li>service方法是专门来处理请求和响应的，是最核心的方法</li></ol></li><li>到web.xml中去配置Servlet的访问地址（或者在注解中直接加上访问地址）</li></ol><p>如果说你要在web.xml中配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--Servlet标签给tomcat配置一个Servlet程序--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--给程序起一个别名，一般都是用类名--&gt;</span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>myServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--这里是全类名--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.amayakite.Servlet.MyServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--给Servlet程序配置访问地址--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--告诉服务器：我当前配置的地址，是给哪个Servlet程序去使用--&gt;</span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>myServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--url-pattern 标签配置访问地址 这个地址是基于工程路径的--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/myServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),F={href:"http://localhost:8080/03/myServlet%EF%BC%8C%E9%9C%80%E8%A6%81%E4%BB%A5/%E5%BC%80%E5%A4%B4%EF%BC%8C%E5%BD%93%E8%AE%A9%E8%BF%98%E6%9C%89%E6%9B%B4%E5%A4%9A%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%E8%AF%A6%E6%83%85%E7%9C%8B%E6%88%91%E4%B8%8A%E4%B8%80%E4%B8%AA%E6%96%87%E7%AB%A0%EF%BC%88%E5%9C%A8%E6%9C%80%E5%90%8E@Servlet",target:"_blank",rel:"noopener noreferrer"},D=e('<figure><img src="'+i+`" alt="image-20211204133523223" tabindex="0" loading="lazy"><figcaption>image-20211204133523223</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>
        name <span class="token operator">=</span> <span class="token string">&quot;myServlet&quot;</span><span class="token punctuation">,</span>
     <span class="token comment">//等同于一个&lt;servlet&gt;，其中&lt;servlet-class&gt;自动配置为当前文件地址</span>
        urlPatterns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/myServlet&quot;</span><span class="token punctuation">}</span> <span class="token comment">//设置路径</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello servlet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;Hello Servlet&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问结果：</p><figure><img src="`+u+'" alt="image-20211204132730182" tabindex="0" loading="lazy"><figcaption>image-20211204132730182</figcaption></figure><h2 id="servlet原理" tabindex="-1"><a class="header-anchor" href="#servlet原理" aria-hidden="true">#</a> Servlet原理</h2><p>一张图概括</p><figure><img src="'+r+`" alt="image-20211204135640694" tabindex="0" loading="lazy"><figcaption>image-20211204135640694</figcaption></figure><p>详细的看我上一个文章，里面有写详细的内容，底层通过反射调用</p><h2 id="servlet的生命周期" tabindex="-1"><a class="header-anchor" href="#servlet的生命周期" aria-hidden="true">#</a> Servlet的生命周期</h2><ol><li>执行Servlet构造器方法</li><li>执行init()初始化方法</li><li>执行service方法</li><li>执行destroy销毁方法</li></ol><p>第一、第二步是在第一次访问时创建Servlet程序时被调用</p><p>第三步是每次访问都会调用</p><p>第四步是在web工程停止的时候才会被调用</p><p>代码验证：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>
        name <span class="token operator">=</span> <span class="token string">&quot;myServlet&quot;</span><span class="token punctuation">,</span>
        urlPatterns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/myServlet&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MyServlet()构造器被调用了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MyServlet()init()方法被调用了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MyServlet()service()方法被调用了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;Hello Servlet&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MyServlet()destroy()方法被调用了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们访问后，出现了如下内容：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>MyServlet()构造器被调用了
MyServlet()init()方法被调用了
MyServlet()service()方法被调用了
---下方是重复刷新这个页面
MyServlet()service()方法被调用了
MyServlet()service()方法被调用了
MyServlet()service()方法被调用了
MyServlet()service()方法被调用了
MyServlet()service()方法被调用了
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们尝试终止这个程序的时候：</p><figure><img src="`+k+`" alt="image-20211204140606812" tabindex="0" loading="lazy"><figcaption>image-20211204140606812</figcaption></figure><h2 id="引出doget和dopost" tabindex="-1"><a class="header-anchor" href="#引出doget和dopost" aria-hidden="true">#</a> 引出doGet和doPost</h2><p>在我们学习HTML的时候，已经使用过这些东西了，现在我们来尝试写个网页来发送相应的请求</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/03/myServlet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>get<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>提交(GET)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/03/myServlet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span>
    密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>提交(POST)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们现在分别输入相应的内容，然后点击两个提交</p><p>发现他们两个返回的内容都是一样的---我之前写的Hello Servlet</p><figure><img src="`+d+`" alt="image-20211204141409097" tabindex="0" loading="lazy"><figcaption>image-20211204141409097</figcaption></figure><p>按照我们对于前端的学习，这个时候应该清楚的认识到，这两个玩意应该返回不一样的东西</p><p>为此，我们需要更改下service中的方法</p><p>首先，我们看下<code>ServletRequest req, ServletResponse res</code>这两个的运行类型是什么--因为实际上是tomcat创建了这两个对象给我们的Servlet处理，在service中加入如下代码</p><p>（因为ServletRequest 实际上是一个接口，没有具体的实现方法，我们需要一个实现方法）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//        获取req res 的运行类型</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;req.getClass() = &quot;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;res.getClass() = &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取结果：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>req.getClass() = class org.apache.catalina.connector.RequestFacade
res.getClass() = class org.apache.catalina.connector.ResponseFacade
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>哦豁，是我们没见过的类型，转换也找不到这个类-因为是tomcat中的</p><p>那我们得换一个思路，看下这个<code>ServletRequest</code>有没有什么子类</p><p>发现有一个：</p><figure><img src="`+v+'" alt="image-20211204142629615" tabindex="0" loading="lazy"><figcaption>image-20211204142629615</figcaption></figure><p>那这两个类能不能互相转换呢？</p>',37),U={href:"https://blog.csdn.net/m0_38039437/article/details/75271692",target:"_blank",rel:"noopener noreferrer"},L=e(`<p>原来Tomcat中的<code>RequestFacade</code>是<code>HttpServletRequest</code>的实现类，说明该类拥有ServletRequest中的所有方法和<code>HttpServletRequest</code>中的所有方法</p><p>我们接着看看这两个接口中有没有关于获取用户请求方法的定义：</p><p>在HttpServlet中找到了这个</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * Returns the name of the HTTP method with which this request was made, for
     * example, GET, POST, or PUT. Same as the value of the CGI variable
     * REQUEST_METHOD.
     *
     * <span class="token keyword">@return</span> a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">String</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> specifying the name of the method with
     *         which this request was made
     */</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那不就简单了，强转一波并判断</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MyServlet()service()方法被调用了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        获取req res 的运行类型</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;req.getClass() = &quot;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;res.getClass() = &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        获取客户端请求的方式，并判断</span>
    <span class="token comment">//        先做一个类型转换：ServletRequest-&gt; HttpServletRequest（它的子类）</span>
    <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> req<span class="token punctuation">;</span>
    <span class="token comment">//        然后获取method</span>
    <span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        判断get post</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;GET请求&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;POST请求&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    res<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;Hello Servlet&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证：</p><p>点击get按钮：</p><figure><img src="`+m+'" alt="image-20211204143309321" tabindex="0" loading="lazy"><figcaption>image-20211204143309321</figcaption></figure><p>点击post按钮</p><figure><img src="'+g+`" alt="image-20211204143320053" tabindex="0" loading="lazy"><figcaption>image-20211204143320053</figcaption></figure><p>但是感觉这样又不太美观，我决定自己额外写两个方法来处理这些东西：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MyServlet()service()方法被调用了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;req.getClass() = &quot;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;res.getClass() = &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> req<span class="token punctuation">;</span>
    <span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">myGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">myPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    res<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;Hello Servlet&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">,</span><span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;GET请求&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;POST请求&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后尝试运行，依旧完美！</p><p>解决后，我又想到了一个问题：既然<code>ServletRequest</code> 有子接口，那么<code>Servlet</code>有没有子接口呢？</p><p>发现有两个实现类</p><figure><img src="`+b+'" alt="image-20211204143505902" tabindex="0" loading="lazy"><figcaption>image-20211204143505902</figcaption></figure><p>接着，我们看看在JavaEE手册中关于Servlet接口的详解：</p>',18),N={href:"https://javaee.github.io/javaee-spec/javadocs/",target:"_blank",rel:"noopener noreferrer"},V=e('<figure><img src="'+h+`" alt="image-20211204144840470" tabindex="0" loading="lazy"><figcaption>image-20211204144840470</figcaption></figure><p>关于这个接口，官方给出了如下定义：</p><p>​ 定义所有servlet必须实现的方法。<br> ​ servlet是在Web服务器中运行的小型Java程序。servlet接收并响应来自Web客户机的请求，通常是通过HTTP(超文本传输协议)。</p><p>​ 要实现这个接口，<strong>你可以编写一个扩展javax.servlet.GenericServlet的通用servlet，或者一个扩展javax.servlet.http.HttpServlet的HTTP servlet。</strong></p><p>​ 该接口定义了用于初始化servlet、服务请求和从服务器中删除servlet的方法。这些被称为生命周期方法，按以下顺序调用:</p><ol><li>servlet被构造，然后用init方法初始化。</li><li>客户端对服务方法的任何调用都会被处理。</li><li>servlet从服务中取出，然后使用destroy方法销毁，然后进行垃圾收集并最终完成。</li></ol><p>​ 除了生命周期方法外，该接口还提供getServletConfig方法和getServletInfo方法，servlet可以使用该方法获取任何启动信息，getServletInfo方法允许servlet返回关于自身的基本信息，如作者、版本和版权。</p><p>也就是说，我们可以通过HttpServlet更方便的使用Servlet，接下来说说这玩意该怎么用吧</p><h2 id="httpservlet的使用" tabindex="-1"><a class="header-anchor" href="#httpservlet的使用" aria-hidden="true">#</a> HttpServlet的使用</h2><ol><li>编写一个类去继承HttpServlet类</li><li>根据业务需求重写<code>doGet</code>或者<code>doPost</code>方法</li><li>到<code>web.xml</code>或者在<code>@Servlet</code>中配置相关的信息及访问地址</li></ol><p>这个玩意的源码我们已经在之前一讲中分析过了，实际上他就是完成了一系列的封装，让我们可以更方便的使用其内容</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>
        name <span class="token operator">=</span> <span class="token string">&quot;MyServlet2&quot;</span><span class="token punctuation">,</span>
        urlPatterns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/MyServlet2&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

<span class="token comment">//        设置响应头 和 编码</span>
        <span class="token function">setContentType</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>

        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;接受到了客户端的get请求&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
<span class="token comment">//        设置响应头 和 编码</span>
        <span class="token function">setContentType</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;接受到了客户端的post请求&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 封装下方法 设置响应头和编码
     *
     * <span class="token keyword">@param</span> <span class="token parameter">resp</span> HttpServletResponse
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+f+'" alt="image-20211204150014567" tabindex="0" loading="lazy"><figcaption>image-20211204150014567</figcaption></figure><p>可以看到，非常的方便</p><h3 id="扩展-通过ieda快速的的创建相关的httpservlet及配置web-xml" tabindex="-1"><a class="header-anchor" href="#扩展-通过ieda快速的的创建相关的httpservlet及配置web-xml" aria-hidden="true">#</a> 扩展-通过IEDA快速的的创建相关的HttpServlet及配置web.xml</h3><p>在项目结构（ctrl+alt+shift+s）中的facet中配置如下内容：</p><p>如果你没有设置中文：File-Project Struture-facets-Source Roots</p><figure><img src="'+q+'" alt="image-20211204150526370" tabindex="0" loading="lazy"><figcaption>image-20211204150526370</figcaption></figure><p>然后点击这个就能快速创建并在xml中声明</p><figure><img src="'+S+'" alt="image-20211204150622245" tabindex="0" loading="lazy"><figcaption>image-20211204150622245</figcaption></figure><p>然后在这两个地方填上内容即可</p><figure><img src="'+y+`" alt="image-20211204150805807" tabindex="0" loading="lazy"><figcaption>image-20211204150805807</figcaption></figure><p>然后你会发现自动生成了一个带注解的</p><p>如果说不把那个<code>创建Java EE 6+</code>注解类勾上的话，就会在web.xml中生成相应的Servlet标签</p><p>如果不勾选注解的话，需要自己手动创建一下Servlet-mapping标签</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>servlet<span class="token punctuation">&gt;</span></span>
    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token class-name">ServlettestIedacreate</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">&gt;</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>amayakite<span class="token punctuation">.</span>testResponse<span class="token punctuation">.</span></span>ServlettestIedacreate</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">&gt;</span>
        下面是要自己手动创建的
<span class="token operator">&lt;</span>servlet<span class="token operator">-</span>mapping<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token class-name">ServlettestIedacreate</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">&gt;</span><span class="token operator">/</span><span class="token class-name">ServlettestIedacreate</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>mapping<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;testIedacreate&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;/testIedacreate&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> testIedacreate <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="httpservlet的继承关系" tabindex="-1"><a class="header-anchor" href="#httpservlet的继承关系" aria-hidden="true">#</a> HttpServlet的继承关系</h2><p>一张图概括</p><figure><img src="`+x+`" alt="image-20211204152154991" tabindex="0" loading="lazy"><figcaption>image-20211204152154991</figcaption></figure><h2 id="servletconfig类" tabindex="-1"><a class="header-anchor" href="#servletconfig类" aria-hidden="true">#</a> ServletConfig类</h2><p>​ 在这之前额外声明：Servlet程序和ServletConfig对象都是由Tomcat服务器创建，我们负责使用</p><p>​ <strong>Servlet程序默认是第一次访问时创建，这个Servletconfig在其创建后立刻创建，主要存放一些我们的初始化参数</strong></p><p>这玩意是在GenericServlet中就开始了引用的，从字面意义上来看，就知道是Servlet程序的配置信息类</p><p>他主要有三个用途：</p><ol><li><p>获取到Servlet程序的别名 Servlet-name的值（也就是我们在xml/注解中给Servlet中配置的name）</p></li><li><p>获取初始化参数 init-param</p><ul><li><p>这里分别说下两种方式创建初始化参数</p></li><li><p>在web.xml中创建这个web.xml时指定：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>ServlettestIedacreate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>ServlettestIedacreate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在注解中指定：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>
        name <span class="token operator">=</span> <span class="token string">&quot;ServlettestIedacreate&quot;</span><span class="token punctuation">,</span>
        urlPatterns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/ServlettestIedacreate&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        initParams <span class="token operator">=</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>两种方式最终的结果都一样</p></li></ul></li><li><p>获取ServletContext对象</p></li></ol><p>我们再代码中重写带参数的<code>init(Serverconfig config)</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        看下这个config的用途</span>
    <span class="token comment">//        1. 获取到Servlet程序的别名 Servlet-name的值</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Servlet-name:&quot;</span> <span class="token operator">+</span> config<span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        2. 获取初始化参数 init-param</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;init-param-username:&quot;</span> <span class="token operator">+</span> config<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;init-param-password:&quot;</span> <span class="token operator">+</span> config<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        3.  获取ServletContext对象</span>
    <span class="token class-name">ServletContext</span> context <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后访问一下，看看控制台会输出什么：</p><p>获取到了如下结果，和我们的预想结果一样：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>Servlet-name:ServlettestIedacreate
init-param-username:root
init-param-password:123456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="servletconfig的注意事项" tabindex="-1"><a class="header-anchor" href="#servletconfig的注意事项" aria-hidden="true">#</a> ServletConfig的注意事项</h3><p>每个Servlet对应自己的ServletConfig----<strong>ServletConfig不在所有的Servlet之中互通</strong></p><p>比方说我现在有两个Servlet</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>t1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>t1/servlet-class&gt;
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>Jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>t2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>t2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我<strong>只能在t1的ServletConfig中获取JDBC属性，t2的ServletConfig中获取username属性，他们是不能相互获取的</strong></p><p>比如试图在t1中获取username属性，那么会返回null（不存在）</p><p>t2中获取Jdbc属性同理</p><p>并且在重写init带有config参数的方法时，必须显示调用其<code>super(config)</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ....自己的逻辑代码</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不然在后续试图访问其初始化属性<code>init-param</code>：<code>getInitParameter(参数名称)</code>时会报错</p><p>一般情况下，我们都是重写空参数的init()，而非有参的init()</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;无参数的init方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为啥呢？看下源码：非常清晰的说明了若有自己的逻辑写在这里就行了，init(config)会自动调用这个无参的init</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * A convenience method which can be overridden so that there&#39;s no need to
     * call <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * Instead of overriding <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>, simply override this
     * method and it will be called by
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">GenericServlet</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>. The
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">ServletConfig</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> object can still be retrieved via
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">getServletConfig</span></span><span class="token punctuation">}</span>.
     *
     * <span class="token keyword">@exception</span> <span class="token reference"><span class="token class-name">ServletException</span></span>
     *                if an exception occurs that interrupts the servlet&#39;s
     *                normal operation
     */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
    <span class="token comment">// NOOP by default</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ServletConfig还可以在doget、dopost中随意调用：<code>this.getServletConfig()</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="servletcontext-上下文" tabindex="-1"><a class="header-anchor" href="#servletcontext-上下文" aria-hidden="true">#</a> ServletContext(上下文)</h2><p>在刚刚的ServletConfig中，ServletContext我们只是提了一嘴，并没有具体的使用他，接下来具体的介绍一下他，这玩意蛮有用的（用处比ServletConfig多多了）</p><ol><li>这是一个接口，具体的功能由tomcat实现，它表示Servlet上下文</li><li>一个web工程（无论有多少个Servlet），只有一个ServletContext实例</li><li>ServletContext对象是一个域对象</li><li>它在Web工程启动的时候创建，在Web工程停止的时候销毁</li></ol><h3 id="域对象" tabindex="-1"><a class="header-anchor" href="#域对象" aria-hidden="true">#</a> 域对象</h3><p>域对象的定义是：</p><ol><li>可以像Map一样存取数据的对象</li><li>这里的域指的是操作范围</li></ol><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">存数据</th><th style="text-align:center;">取数据</th><th style="text-align:center;">删除数据</th></tr></thead><tbody><tr><td style="text-align:center;">Map</td><td style="text-align:center;"><code>put()</code></td><td style="text-align:center;"><code>get()</code></td><td style="text-align:center;"><code>remove()</code></td></tr><tr><td style="text-align:center;">域对象</td><td style="text-align:center;"><code>setAttribute()</code></td><td style="text-align:center;"><code>getAttribute()</code></td><td style="text-align:center;"><code>removeAttribute()</code></td></tr></tbody></table><h3 id="servletcontext类的四个作用" tabindex="-1"><a class="header-anchor" href="#servletcontext类的四个作用" aria-hidden="true">#</a> ServletContext类的四个作用</h3><ol><li>获取web.xml中配置的上下文参数 <ol><li>如果值不存在，则返回null</li></ol></li><li>获取当前的工程路径 <ol><li>格式：<code>/工程路径</code></li></ol></li><li>获取工程部署后在服务器硬盘上的绝对路径</li><li>像Map一样存储数据</li></ol><h3 id="servlet常用方法一-读取上下文-工程路径-绝对路径" tabindex="-1"><a class="header-anchor" href="#servlet常用方法一-读取上下文-工程路径-绝对路径" aria-hidden="true">#</a> Servlet常用方法一：读取上下文，工程路径，绝对路径</h3><p>我们先在<code>web.xml</code>填加如下内容：当然和<code>init-param</code>一样，它也可以添加多个</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>context<span class="token operator">-</span>param是一个上下文参数，他属于整个web工程<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>context<span class="token operator">-</span>param<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">&gt;</span>user<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">&gt;</span>root<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">-</span>param<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后读取：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//        两种获取方式</span>
    <span class="token comment">//        1.直接获取ServletContext对象</span>
    <span class="token class-name">ServletContext</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        2.通过ServletConfig对象获取ServletContext对象</span>
    <span class="token class-name">ServletConfig</span> config <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        设置编码等</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//        发送给客户端 context.getInitParameter(参数名)</span>
    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;初始化参数user的值:&quot;</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//        获取当前工程路径，并发送给客户端 context.getContextPath()</span>
    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前的路径是:&quot;</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//        获取工程部署后在服务器上的绝对路径 并发送给客户端 context.getRealPath(&quot;/&quot;)</span>
    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;工程部署的路径是:&quot;</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;工程部署后index.jsp的路径是:&quot;</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;/index.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><figure><img src="`+w+'" alt="image-20211204162409182" tabindex="0" loading="lazy"><figcaption>image-20211204162409182</figcaption></figure><p>可能你会有疑惑：这个工程部署路径有啥用呢？</p><p>​ emm这样说吧，比如说你要发送个文件(图片、视频等二进制文件)给客户端，就要通过它来将一个相对路径转换为一个绝对路径，来让FileInput流读取</p><p>​ 我们的惯例应该是：除了一些隐私级别的文件，静态文件（html css 资源文件）同意放置在webapp目录下：</p><figure><img src="'+E+'" alt="image-20211204162732455" tabindex="0" loading="lazy"><figcaption>image-20211204162732455</figcaption></figure><p>用户访问这些也很简单，比如说一个01.jpg，访问地址则为<code>localhost:8080/工程路径/static/images/01.jpg</code></p><p>结果：</p><figure><img src="'+_+`" alt="image-20211204162850284" tabindex="0" loading="lazy"><figcaption>image-20211204162850284</figcaption></figure><p>java中获取这个图片的绝对路径的方式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;static/images/01.jpg的绝对路径是:&quot;</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;/static/images/01.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：</p><figure><img src="`+j+`" alt="image-20211204163134313" tabindex="0" loading="lazy"><figcaption>image-20211204163134313</figcaption></figure><h3 id="servlet常用方法二-让servlet通信" tabindex="-1"><a class="header-anchor" href="#servlet常用方法二-让servlet通信" aria-hidden="true">#</a> Servlet常用方法二：让Servlet通信</h3><p>ps：若视图读取不存在的数据，会返回null=</p><p>context1存放了数据 key 是一个string value是一个Object</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        setAttribute(key , value )存放数据</span>
    servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Amaya&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;18&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;存放数据完毕&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>context2读取数据(PS:读取数据的时候有个方法:getAttributeNames()可以获取当前所有上下文数据的名字，但是那里面会包含一些其他的内容，这里就不演示了，真正要用的话或许可以通过加个判定名字的长度来限制性输出)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//        获取所有context中的上下文数据</span>
    <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//        读取name的值发送</span>
    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;修改和删除完数据后读取name的值：&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//        修改name=张三</span>
    servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        删除age的值</span>
    servletContext<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        读取name的值发送</span>
    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;修改和删除完数据后读取name的值：&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        读取age的值发送：</span>
 response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="servlet常用方法三-读取prperties等配置文件" tabindex="-1"><a class="header-anchor" href="#servlet常用方法三-读取prperties等配置文件" aria-hidden="true">#</a> Servlet常用方法三：读取prperties等配置文件</h3><p>先说方法：<code>getResourceAsStream(&quot;/WEB-INF/classes/路径/文件名或文件名&quot;);</code>可以读取<code>resources</code>目录下的配置文件</p><p>如果要读取java文件夹中的文件（比如包名为：<code>com.abc.AAA.testA</code>）:</p><p>则：<code>getResourceAsStream(&quot;/WEB-INF/classes/com/abc/aaa/testA.class&quot;)</code></p><p>还记得我们在老早之前创建的那个resources文件夹吗，资源文件就是放在那里的，我们先新建一个<code>db.properties</code>到该文件夹下：</p><figure><img src="`+C+`" alt="image-20211203155322875" tabindex="0" loading="lazy"><figcaption>image-20211203155322875</figcaption></figure><p>然后填写一些内容：(在这一步你可以先装个mysql-java，名称：mysql-connector-java)</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>
<span class="token key attr-name">driver</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token key attr-name">url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/db1?useUnicode=true&amp;characterEncoding=utf8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们点击运行，查看下打包后的路径，这里有可能会出现一个问题，你在相同的路径下找不到那个文件</p><p>点击运行，等待运行完毕后，点开当前项目的target文件夹，可以看到我们刚刚写的db文件现在在<strong>classes</strong>目录下存放，我们在java文件夹内写的文件同理</p><p>这个classess路径也被称之为<strong>classpath（类路径）</strong></p><figure><img src="`+R+`" alt="image-20211203155802117" tabindex="0" loading="lazy"><figcaption>image-20211203155802117</figcaption></figure><p>可能会遇到的导出问题：</p><p>​ 没有遇到这个问题就不要改<code>pom.xml</code>!</p><p>​ 没有遇到这个问题就不要改<code>pom.xml</code>!</p><p>​ 没有遇到这个问题就不要改<code>pom.xml</code>!</p><p>​ 如果说你在这一部没有看到这个db.properties文件，那么百分之八十是maven的配置有问题（貌似新版不按照下面这样配置也不会出现这样的问题），在当前<code>module</code>的maven配置文件<code>pom.xml</code>中加上如下内容再重新打包即可（如果pom.xml中已经有<code>&lt;build&gt;&lt;/build&gt;</code>了，就在build中加入这两个resources，如果没有，就直接整个copy过去），即可解决该问题</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--在build中配置resources 来防止我们资源导出失败的问题--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--                让src下的main下的java目录中可以导出xml。properties文件--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后读取即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">InputStream</span> resourceAsStream <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;/WEB-INF/classes/db.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> username <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> driver <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    resourceAsStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;数据库连接信息&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;p&gt;用户名：&quot;</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">&quot;&lt;/p&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;p&gt;密码：&quot;</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">&quot;&lt;/p&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;p&gt;url：&quot;</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">&quot;&lt;/p&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;p&gt;driver：&quot;</span> <span class="token operator">+</span> driver <span class="token operator">+</span> <span class="token string">&quot;&lt;/p&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http回顾" tabindex="-1"><a class="header-anchor" href="#http回顾" aria-hidden="true">#</a> HTTP回顾</h2><h3 id="请求的http协议格式" tabindex="-1"><a class="header-anchor" href="#请求的http协议格式" aria-hidden="true">#</a> 请求的HTTP协议格式</h3><p>客户端给服务端发送数据叫请求</p><p>服务端给客户端发数据叫相应</p><p>常见的请求为get和post</p><h4 id="get请求" tabindex="-1"><a class="header-anchor" href="#get请求" aria-hidden="true">#</a> get请求</h4><ol><li>请求行 <ol><li>请求的方式：get</li><li>请求的资源路径[+?+参数]</li><li>请求的协议版本号： HTTP/1.1</li></ol></li><li>请求头 <ol><li>由key-value键值对组成，不同的键值对代表不同的含义</li></ol></li></ol><figure><img src="`+H+'" alt="image-20211204171938943" tabindex="0" loading="lazy"><figcaption>image-20211204171938943</figcaption></figure><h4 id="post请求" tabindex="-1"><a class="header-anchor" href="#post请求" aria-hidden="true">#</a> post请求</h4><ol><li><p>请求行</p><ol><li><p>请求的方式：post</p></li><li><p>请求的资源路径[+?+参数]</p></li><li><p>请求的协议版本号： HTTP/1.1</p></li></ol></li><li><p>请求头</p><ol><li>由key-value键值对组成，不同的键值对代表不同的含义</li></ol></li><li><p><strong>一个空行，隔开请求头和请求体</strong></p></li><li><p>请求体 就是发送给服务器的数据</p></li></ol><figure><img src="'+T+`" alt="image-20211204172617660" tabindex="0" loading="lazy"><figcaption>image-20211204172617660</figcaption></figure><h3 id="常用请求头说明" tabindex="-1"><a class="header-anchor" href="#常用请求头说明" aria-hidden="true">#</a> 常用请求头说明</h3><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>Accept: 表示客户端可以接收的数据类型
Accept-Languege: 表示客户端可以接收的语言类型
User-Agent: 表示客户端浏览器的信息
Host: 表示客户端请求的服务器的IP和端口号
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get请求和post请求的区分" tabindex="-1"><a class="header-anchor" href="#get请求和post请求的区分" aria-hidden="true">#</a> Get请求和Post请求的区分</h3><h4 id="什么算是get请求" tabindex="-1"><a class="header-anchor" href="#什么算是get请求" aria-hidden="true">#</a> 什么算是get请求</h4><ol><li>from标签 method= get</li><li>a标签</li><li>link标签引入css</li><li>script标签引入js文件</li><li>img标签引入图片</li><li>iframe引入html页面</li><li>在浏览器地址栏输入地址后敲回车</li><li>ajax的get请求</li><li>其他软件封装的相关请求</li></ol><h4 id="什么算是post请求" tabindex="-1"><a class="header-anchor" href="#什么算是post请求" aria-hidden="true">#</a> 什么算是post请求</h4><ol><li>from标签 method= get</li><li>ajax或者其他软件编写的post请求</li></ol><h3 id="响应的http格式" tabindex="-1"><a class="header-anchor" href="#响应的http格式" aria-hidden="true">#</a> 响应的HTTP格式</h3><ol><li>响应行 <ol><li>响应的协议和端口号</li><li>响应的状态码</li><li>响应状态码的描述</li></ol></li><li>响应头 <ol><li>key-value键值对</li></ol></li><li><strong>一个空行，分割响应头和响应体</strong></li><li>响应体</li></ol><figure><img src="`+I+'" alt="image-20211204173630417" tabindex="0" loading="lazy"><figcaption>image-20211204173630417</figcaption></figure><h3 id="常见的响应状态吗" tabindex="-1"><a class="header-anchor" href="#常见的响应状态吗" aria-hidden="true">#</a> 常见的响应状态吗</h3><ul><li>200/204 表示请求成功</li><li>302 表示重定向</li><li>404 资源不存在（服务器没问题）</li><li>500/503 服务器内部错误</li></ul><h3 id="mime类型说明-context-type" tabindex="-1"><a class="header-anchor" href="#mime类型说明-context-type" aria-hidden="true">#</a> MIME类型说明(Context-Type)</h3><p>Mime是HTTP协议的中的数据类型</p><p>MIME的英文全称是：<code>Multipurpose Internet Mail Extensions</code> 多功能Internet邮件扩充服务，MIME的格式是：</p><p><code>大类型/小类型</code>，并与某一种文件名的扩展名对应</p><table><thead><tr><th style="text-align:center;">文件</th><th style="text-align:center;">MIME类型</th></tr></thead><tbody><tr><td style="text-align:center;">超文本标记语言文本</td><td style="text-align:center;">text/html</td></tr><tr><td style="text-align:center;">普通文本</td><td style="text-align:center;">text/plain</td></tr><tr><td style="text-align:center;">RTF文本</td><td style="text-align:center;">application/rtf</td></tr><tr><td style="text-align:center;">图片</td><td style="text-align:center;">image/gif</td></tr><tr><td style="text-align:center;">声音文件</td><td style="text-align:center;">audio/basic</td></tr><tr><td style="text-align:center;">MIDI音乐文件</td><td style="text-align:center;">audio/midi，audio/x-midi</td></tr><tr><td style="text-align:center;">MPEG视频文件</td><td style="text-align:center;">video/mepg</td></tr><tr><td style="text-align:center;">AVI视频文件</td><td style="text-align:center;">video/x-msvideo</td></tr><tr><td style="text-align:center;">GZIP文件</td><td style="text-align:center;">application/x-gzip gzip就是.gz文件</td></tr><tr><td style="text-align:center;">TAR文件</td><td style="text-align:center;">application/x-tar</td></tr></tbody></table>',138),Y={href:"https://www.w3school.com.cn/media/media_mimeref.asp",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types",target:"_blank",rel:"noopener noreferrer"},Z=e(`<h2 id="httpservletrequest类" tabindex="-1"><a class="header-anchor" href="#httpservletrequest类" aria-hidden="true">#</a> HttpServletRequest类</h2><h3 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍" aria-hidden="true">#</a> 基本介绍</h3><p>每次只要有请求进入tomcat服务器，tomcat服务器就会把请求过来的HTTP协议解析好封装到Request对象中，然后传递到service()方法中，我们的HttpServlet中的service方法接收到这个后会传递到doGet()或者doPost()中，我们可以通过HttpServletRequest对象获取到所有请求的信息</p><h3 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>getRequestURI()</td><td>获取请求的资源路径</td></tr><tr><td>getRequestURL()</td><td>获取请求的统一资源定位符（绝对路径）<br>注意，这里是L，上面那个是I</td></tr><tr><td>getRemoteHost()</td><td>获取客户端的IP地址</td></tr><tr><td>getHeader()</td><td>获取请求头</td></tr><tr><td>getParameter(name)</td><td>获取请求的参数</td></tr><tr><td>getParameterValues(name)</td><td>获取请求的参数(有同名时使用)</td></tr><tr><td>getMethod()</td><td>获取请求的方法</td></tr><tr><td>setAttribute(key,value)</td><td>设置域数据</td></tr><tr><td>getAttribute(key)</td><td>获取域数据</td></tr><tr><td>getRequestDispatcher()</td><td>获取请求转发对象</td></tr><tr><td>setCharacterEncoding(String encoding)</td><td>设置请求体字符集</td></tr></tbody></table><p>注意，<strong>这个域数据的作用域并不是全局的</strong>，仅限于当前请求及当前请求转发的对象，这个等下请求转发的时候会用到</p><p>无论是get还是post，接收数据前最好设置下setCharacterEncoding，尤其是Post(不设置的话中文一定会乱码)，防止中文乱码的问题</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//| getRequestURI()          | 获取请求的资源路径 </span>
    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;请求的资源路径：&quot;</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//| getRequestURL()          | 获取请求的统一资源定位符（绝对路径）&lt;br /&gt;注意，这里是L，上面那个是I |</span>
    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;请求的统一资源定位符（绝对路径）：&quot;</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//| getRemoteHost()          | 获取客户端的IP地址   </span>
    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;客户端的IP地址：&quot;</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRemoteHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//| getHeader()              | 获取请求头 </span>
    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;请求头：&quot;</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//| getParameter(name)       | 获取请求的参数 </span>
    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;请求的参数：&quot;</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//| getParameterValues(name) | 获取请求的参数(有同名时使用)  </span>
    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;请求的参数：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//| getMethod()              | 获取请求的方法 </span>
    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;请求的方法：&quot;</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+P+'" alt="image-20211204185818491" tabindex="0" loading="lazy"><figcaption>image-20211204185818491</figcaption></figure><h3 id="请求转发" tabindex="-1"><a class="header-anchor" href="#请求转发" aria-hidden="true">#</a> 请求转发</h3><p>原理：</p><figure><img src="'+O+`" alt="image-20211204192808207" tabindex="0" loading="lazy"><figcaption>image-20211204192808207</figcaption></figure><p>代码部分：</p><p>ServletDispatcher1：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//        获取请求的参数</span>
    <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;在Servlet1中查看该参数：&quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//            给材料改一个章，并传递到Servlet2中</span>
        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//            问路：Servlet2怎么走：</span>
        <span class="token class-name">RequestDispatcher</span> requestDispatcher <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/ServletDispatcher2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//            进行请求转发</span>
        requestDispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ServletDispatcher2：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> remoteUser <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        接收并验证数据 注意 这里的getAttribute并不是Context的，而是request的，作用域为：单个request连接对象</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>remoteUser<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, this is ServletDispatcher2. You are&quot;</span> <span class="token operator">+</span> remoteUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问：并携带参数</p><figure><img src="`+A+`" alt="image-20211204191647686" tabindex="0" loading="lazy"><figcaption>image-20211204191647686</figcaption></figure><h3 id="解决post请求中中文参数乱码的问题" tabindex="-1"><a class="header-anchor" href="#解决post请求中中文参数乱码的问题" aria-hidden="true">#</a> 解决Post请求中中文参数乱码的问题</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        执行其他操作</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩展-html-base标签的作用及解决请求转发的问题" tabindex="-1"><a class="header-anchor" href="#扩展-html-base标签的作用及解决请求转发的问题" aria-hidden="true">#</a> 扩展-HTML-Base标签的作用及解决请求转发的问题</h3><p>我们先在webapp目录下新建如下文件：</p><figure><img src="`+M+`" alt="image-20211204193232189" tabindex="0" loading="lazy"><figcaption>image-20211204193232189</figcaption></figure><p>god.html中有个a标签，<code>herf=&quot;a/b/c/d.html&quot;</code></p><p>d.html中有一句话：<code>&lt;h1&gt;这是a下的b下的c下的d.html&lt;/h1&gt;</code></p><p>注意：这里的a标签中的<code>a/b/c/d.html</code>前面是没有<code>/</code>的（相对路径）</p><p>若有<code>/</code>会跳转到<code>localhost:8080/a/b/c/d.html</code>（绝对路径）</p><p>同时可以在d.html中添加a标签返回到<code>god.html</code>:<code>&lt;a href=&quot;../../../god.html&quot; class=&quot;herf&quot;&gt;&lt;/a&gt;</code></p><p>然后测试下，发现他们可以进行互相之间的跳转</p><p>但是我们如果再添加一个请求转发的地址：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;ServletForward&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;/ServletForward&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletForward</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取转发的目标地址</span>
        <span class="token class-name">RequestDispatcher</span> requestDispatcher <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/a/b/c/d.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        requestDispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并让god.html添加一个请求转发到d.html的标签：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a/b/c/d.html<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点我跳转到d.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ServletForward<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>请求转发跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你就会发现跳转过去没问题，但是从d.html中跳转回a却出了问题：</p><figure><img src="`+W+'" alt="image-20211204194727947" tabindex="0" loading="lazy"><figcaption>image-20211204194727947</figcaption></figure><p>分析：</p><figure><img src="'+J+`" alt="image-20211204194958004" tabindex="0" loading="lazy"><figcaption>image-20211204194958004</figcaption></figure><p>base是一个html标签，所以我们只需要：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--    base相当于声明了自身的绝对路径--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://127.0.0.1:8080/03/god.html<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a/b/c/d.html<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点我跳转到d.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ServletForward<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>请求转发跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>d.html</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://127.0.0.1:8080/03/a/b/c/d.html<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>这是a下的b下的c下的d.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../../../god.html<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>herf<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>返回god.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就可以解决该问题</p><p>但是这样的话。。。我们的这个127.0.0.1:8080就写死了，所以在之后的jsp学习中，会有更好的替代品出现</p><h2 id="httpservletresponse" tabindex="-1"><a class="header-anchor" href="#httpservletresponse" aria-hidden="true">#</a> HttpServletResponse</h2><p>​ 跟Request一样，都是浏览器清流服务器时，Tomcat生成的对象，Request用于获取用户发送的数据，Response用户响应用户</p><p>特别基础的东西</p><h2 id="response的两个输出流" tabindex="-1"><a class="header-anchor" href="#response的两个输出流" aria-hidden="true">#</a> Response的两个输出流</h2>`,48),K=n("li",null,[n("code",null,"getWriter"),s(" 字符输出流 用于响应文本数据")],-1),X=n("code",null,"getOutoutStream",-1),$=n("li",null,"响应字节数的时候得提前设置好Context-Type",-1),nn=n("li",null,"比如image/jpg、image/png 等",-1),sn={href:"https://www.w3school.com.cn/media/media_mimeref.asp",target:"_blank",rel:"noopener noreferrer"},an=e(`<p>注意 这两个流<strong>不能混用</strong>，即：<strong>用了字符流就不能用字节流，反之亦然，否则会报错</strong></p><h3 id="设置流的编码-返回格式" tabindex="-1"><a class="header-anchor" href="#设置流的编码-返回格式" aria-hidden="true">#</a> 设置流的编码，返回格式</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//iso-8859-1 默认是这个编码 这种编码不支持特殊符号和中文</span>
    <span class="token class-name">String</span> characterEncoding <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getCharacterEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>characterEncoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        设置 相应类型</span>
    response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        上面的那两句一块的简写：</span>
    response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        再度简写</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="请求重定向" tabindex="-1"><a class="header-anchor" href="#请求重定向" aria-hidden="true">#</a> 请求重定向</h3><p>原理(提一嘴，千万别手残打成304 304是永久重定向， 除非用户Ctrl+shift+R刷新页面，不然之后一直都是直接跳转到response2程序)</p><figure><img src="`+z+`" alt="image-20211204221219141" tabindex="0" loading="lazy"><figcaption>image-20211204221219141</figcaption></figure><p>方法1 分别设置Status和Header中的Location</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;曾到此一游&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        设置响应状态码 302 表示重定向（已迁移）</span>
    response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        设置响应头中的Location，为迁移后的地址：</span>
    <span class="token comment">//        response.setHeader(&quot;Location&quot;, &quot;http://www.baidu.com&quot;);</span>
    <span class="token comment">//        重定向可以给定绝对路径来设置成服务器的一些地址，比如index.jsp ，这样就可以让客户端访问到本项目的index.jsp 访问本项目的其他内容同理</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Location&quot;</span><span class="token punctuation">,</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/index.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法2 推荐使用这种：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;曾到此一游&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/index.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这句话相当于封装了<code>response.setStatus(302);</code>和<code>response.setHeader(&quot;Location&quot;, url);</code></p>`,11);function tn(en,pn){const a=o("ExternalLinkIcon");return c(),l("div",null,[B,n("p",null,[s("补充：工程路径就是我们在tomcat中部署那里设置的应用程序上下文，比如我设置个03，则访问地址为"),n("a",F,[s("http://localhost:8080/03/myServlet，需要以/开头，当让还有更多的方法，详情看我上一个文章（在最后@Servlet"),t(a)]),s("那里有说明四种）")]),D,n("p",null,[s("于是我打开了百度，查到了这个"),n("a",U,[s("结果"),t(a)])]),L,n("p",null,[n("a",N,[s("官方英文手册"),t(a)])]),V,n("p",null,[s("当然，更具体的可以看"),n("a",Y,[s("这个链接"),t(a)]),s("或者"),n("a",Q,[s("这个链接"),t(a)])]),Z,n("ul",null,[K,n("li",null,[X,s(" 字节数出流 用于响应文件 "),n("ul",null,[$,nn,n("li",null,[s("具体的可以查看"),n("a",sn,[s("MIME参考手册"),t(a)])])])])]),an])}const ln=p(G,[["render",tn],["__file","3-0规范的学习Servlet.html.vue"]]);export{ln as default};
