import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as e,e as a}from"./app-2d4b26c1.js";const l="/images/SpringBoot/06-RabbitMQ/kuangstudy7a8af1c2-b406-46d9-965e-df81525649cd.png",u="/images/SpringBoot/06-RabbitMQ/kuangstudyb888e5f0-2c0f-4576-af88-0176abfa7832.png",r="/images/SpringBoot/06-RabbitMQ/image-20211227231239303.png",k="/images/SpringBoot/06-RabbitMQ/kuangstudy1705264a-5917-4bf7-99a8-2ed993b463fa-16406198611524.png",d="/images/SpringBoot/06-RabbitMQ/kuangstudy579c94ed-0947-439e-95e7-2ca6b425dc79.png",m="/images/SpringBoot/06-RabbitMQ/image-20211228163633439.png",b="/images/SpringBoot/06-RabbitMQ/image-20211228205739324.png",v="/images/SpringBoot/06-RabbitMQ/image-20211228205821025.png",g="/images/SpringBoot/06-RabbitMQ/image-20211228210020027.png",h="/images/SpringBoot/06-RabbitMQ/kuangstudy7c8a41b8-e3bf-4821-a1f1-a18860277663.png",f="/images/SpringBoot/06-RabbitMQ/kuangstudy081077ba-eced-43f9-b148-6f63987f1d2f.png",y="/images/SpringBoot/06-RabbitMQ/kuangstudy62a1f9e3-027d-408a-8fb4-a176bd184d23.png",w="/images/SpringBoot/06-RabbitMQ/image-20211228212755591.png",q="/images/SpringBoot/06-RabbitMQ/image-20211228212814207.png",x="/images/SpringBoot/06-RabbitMQ/image-20211228213330143.png",_="/images/SpringBoot/06-RabbitMQ/image-20211228213402643.png",S="/images/SpringBoot/06-RabbitMQ/image-20211228213436236.png",M="/images/SpringBoot/06-RabbitMQ/image-20211228213535065.png",Q="/images/SpringBoot/06-RabbitMQ/image-20211228213606264.png",B="/images/SpringBoot/06-RabbitMQ/kuangstudy2704cee9-3595-45de-892d-ee658e848806.png",R="/images/SpringBoot/06-RabbitMQ/python-one.png",C="/images/SpringBoot/06-RabbitMQ/image-20211228221743907.png",j="/images/SpringBoot/06-RabbitMQ/image-20211228221809042.png",T="/images/SpringBoot/06-RabbitMQ/image-20211228221849246.png",I="/images/SpringBoot/06-RabbitMQ/image-20211228221933399.png",E="/images/SpringBoot/06-RabbitMQ/image-20211228222014231.png",O="/images/SpringBoot/06-RabbitMQ/image-20211228222221041.png",z="/images/SpringBoot/06-RabbitMQ/image-20211228222253379.png",P="/images/SpringBoot/06-RabbitMQ/image-20211228222344554.png",N="/images/SpringBoot/06-RabbitMQ/image-20211228222857157.png",D="/images/SpringBoot/06-RabbitMQ/image-20211228223004267.png",F="/images/SpringBoot/06-RabbitMQ/image-20211228223014827.png",A="/images/SpringBoot/06-RabbitMQ/image-20211228223317469.png",H="/images/SpringBoot/06-RabbitMQ/image-20211228223423655.png",U="/images/SpringBoot/06-RabbitMQ/image-20211228223450574.png",L="/images/SpringBoot/06-RabbitMQ/image-20211228223454946.png",K="/images/SpringBoot/06-RabbitMQ/image-20211228223706076.png",V="/images/SpringBoot/06-RabbitMQ/image-20211228223744663.png",X="/images/SpringBoot/06-RabbitMQ/image-20211228223813850.png",G="/images/SpringBoot/06-RabbitMQ/kuangstudy33427b78-879d-4511-9dd7-42fb33108339.png",W="/images/SpringBoot/06-RabbitMQ/image-20211228230744821.png",Y="/images/SpringBoot/06-RabbitMQ/image-20211228230942800.png",J="/images/SpringBoot/06-RabbitMQ/image-20211228231053723.png",$="/images/SpringBoot/06-RabbitMQ/image-20211228231208575.png",Z="/images/SpringBoot/06-RabbitMQ/image-20211228231310698.png",nn="/images/SpringBoot/06-RabbitMQ/image-20211228231325958.png",sn="/images/SpringBoot/06-RabbitMQ/image-20211228231408936.png",an="/images/SpringBoot/06-RabbitMQ/image-20211228231432912.png",tn="/images/SpringBoot/06-RabbitMQ/python-five.png",en="/images/SpringBoot/06-RabbitMQ/image-20211228232005779.png",pn="/images/SpringBoot/06-RabbitMQ/image-20211228232238825.png",on="/images/SpringBoot/06-RabbitMQ/image-20211228235852863.png",cn="/images/SpringBoot/06-RabbitMQ/image-20211228235939199.png",ln="/images/SpringBoot/06-RabbitMQ/image-20211229000003575.png",un="/images/SpringBoot/06-RabbitMQ/image-20211229000040388.png",rn="/images/SpringBoot/06-RabbitMQ/image-20211229131848356.png",kn="/images/SpringBoot/06-RabbitMQ/image-20211229131931673.png",dn="/images/SpringBoot/06-RabbitMQ/image-20211229132158261.png",mn="/images/SpringBoot/06-RabbitMQ/image-20211229132449143.png",bn="/images/SpringBoot/06-RabbitMQ/image-20211229142319931.png",vn="/images/SpringBoot/06-RabbitMQ/image-20211229143147758.png",gn="/images/SpringBoot/06-RabbitMQ/image-20211229150022504.png",hn="/images/SpringBoot/06-RabbitMQ/python-two.png",fn="/images/SpringBoot/06-RabbitMQ/kuangstudy3c16e7cd-e504-497e-a9fc-2260f74e5e51.png",yn="/images/SpringBoot/06-RabbitMQ/kuangstudy29bb193d-94fe-41a5-8d53-8e460316a7ba.png",wn="/images/SpringBoot/06-RabbitMQ/kuangstudydfbeb825-015d-4be0-abba-d2dc7084cb84.png",qn="/images/SpringBoot/06-RabbitMQ/kuangstudya1f53997-b01d-443f-98cd-86a38223fe19.png",xn="/images/SpringBoot/06-RabbitMQ/image-20211229170017594.png",_n="/images/SpringBoot/06-RabbitMQ/image-20211229170546479.png",Sn="/images/SpringBoot/06-RabbitMQ/image-20211229170232886.png",Mn="/images/SpringBoot/06-RabbitMQ/kuangstudy61c5b87b-d787-4d62-9e7c-85e8f26b02f8.png",Qn="/images/SpringBoot/06-RabbitMQ/image-20211229173328022.png",Bn="/images/SpringBoot/06-RabbitMQ/image-20211229181417541.png",Rn="/images/SpringBoot/06-RabbitMQ/image-20211229181448440.png",Cn="/images/SpringBoot/06-RabbitMQ/image-20211229181508511.png",jn="/images/SpringBoot/06-RabbitMQ/image-20211229193954231.png",Tn="/images/SpringBoot/06-RabbitMQ/image-20211229194006577.png",In="/images/SpringBoot/06-RabbitMQ/image-20211229194059678.png",En="/images/SpringBoot/06-RabbitMQ/image-20211229194120447.png",On="/images/SpringBoot/06-RabbitMQ/kuangstudy61c5b87b-d787-4d62-9e7c-85e8f26b02f8-16407782199107.png",zn="/images/SpringBoot/06-RabbitMQ/image-20211229195750062.png",Pn="/images/SpringBoot/06-RabbitMQ/image-20211229195828914.png",Nn="/images/SpringBoot/06-RabbitMQ/image-20211229203720902.png",Dn="/images/SpringBoot/06-RabbitMQ/image-20211229203726541.png",Fn="/images/SpringBoot/06-RabbitMQ/image-20211229204411755.png",An="/images/SpringBoot/06-RabbitMQ/image-20211229211750899.png",Hn="/images/SpringBoot/06-RabbitMQ/image-20211229211808038.png",Un="/images/SpringBoot/06-RabbitMQ/image-20211229211847472.png",Ln="/images/SpringBoot/06-RabbitMQ/image-20211229211944694.png",Kn="/images/SpringBoot/06-RabbitMQ/kuangstudy95eb209a-1bcd-487b-832a-e09d88da3beb.png",Vn="/images/SpringBoot/06-RabbitMQ/kuangstudy4b80ded8-9524-4986-9485-aad2946124b2.png",Xn="/images/SpringBoot/06-RabbitMQ/image-20211229220308754.png",Gn="/images/SpringBoot/06-RabbitMQ/kuangstudy414d826e-5cea-4caa-aba2-92cd30be34f4.png",Wn="/images/SpringBoot/06-RabbitMQ/image-20211229233609159.png",Yn={},Jn=a('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>感觉没啥好说的 暂时可以把这个玩意当成另一个Mysql或者Redis来看待，总之 是为了之后的Spring Cloud做铺垫</p><p>这里的课程看的是狂神的</p><figure><img src="'+l+'" alt="cardImage" tabindex="0" loading="lazy"><figcaption>cardImage</figcaption></figure><figure><img src="'+u+'" alt="cardImage2" tabindex="0" loading="lazy"><figcaption>cardImage2</figcaption></figure><figure><img src="'+r+'" alt="image-20211227231239303" tabindex="0" loading="lazy"><figcaption>image-20211227231239303</figcaption></figure><p>这样说吧</p><p>RabbitMq具有接受数据、接受请求、存储数据、发送数据等技术服务</p><p>它有消息队列：负责数据的接收、存储和传递，性能远高于我们的Java代码</p><p>而消息中间件采用的并不是http协议，而常见的消息中间件协议有：OpenWire、AMQP、MQTT、Kafka，OpenMessage协议。</p><blockquote><p><strong>面试题：为什么消息中间件不直接使用http协议呢？</strong></p><ol><li>因为http请求报文头和响应报文头是比较复杂的，包含了cookie，数据的加密解密，状态码，响应码等附加的功能，但是对 于一个消息而言，我们并不需要这么复杂，也没有这个必要性，它其实就是负责数据传递，存储，分发就行，一定要追求的是高性能。尽量简洁，快速。</li><li>大部分情况下http大部分都是短链接，在实际的交互过程中，一个请求到响应很有可能会中断，中断以后就不会就行持久化，就会造成请求的丢失。这样就不利于消息中间件的业务场景，因为消息中间件可能是一个长期的获取消息的过程，出现问题和故障要对数据或消息就行持久化等，目的是为了保证消息和数据的高可靠和稳健的运行。</li></ol></blockquote><h3 id="amqp协议" tabindex="-1"><a class="header-anchor" href="#amqp协议" aria-hidden="true">#</a> AMQP协议</h3><blockquote><p>AMQP：(全称：Advanced Message Queuing Protocol) 是高级消息队列协议。由摩根大通集团联合其他公司共同设计。是一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。<strong>Erlang</strong>中的实现有RabbitMQ等。<br> 特性：<br> 1：分布式事务支持。<br> 2：消息的持久化支持。<br> 3：高性能和高可靠的消息处理优势。</p></blockquote><p>支持这个协议的有</p><figure><img src="'+k+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这个协议是基于Erlang 所以使用它需要安装Erlang 就像使用Java要安装JDK一样</p><h3 id="mqtt协议" tabindex="-1"><a class="header-anchor" href="#mqtt协议" aria-hidden="true">#</a> MQTT协议</h3><p>MQTT协议：（Message Queueing Telemetry Transport）消息队列是IBM开放的一个即时通讯协议，物联网系统架构中的重要组成部分。<br> 特点：<br> 1：轻量<br> 2：结构简单<br> 3：传输快，不支持事务<br> 4：没有持久化设计。<br> 应用场景：<br> 1：适用于计算能力有限<br> 2：低带宽<br> 3：网络不稳定的场景。<br> 支持者：同AMQP</p><h3 id="openmessage协议" tabindex="-1"><a class="header-anchor" href="#openmessage协议" aria-hidden="true">#</a> OpenMessage协议</h3><figure><img src="'+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>是近几年由阿里、雅虎和滴滴出行、Stremalio等公司共同参与创立的分布式消息中间件、流处理等领域的应用开发标准。<br> 特点：<br> 1：结构简单<br> 2：解析速度快<br> 3：支持事务和持久化设计。</p><h3 id="kafka协议" tabindex="-1"><a class="header-anchor" href="#kafka协议" aria-hidden="true">#</a> Kafka协议</h3><p>Kafka协议是基于TCP/IP的二进制协议。消息内部是通过长度来分割，由一些基本数据类型组成。<br> 特点是：<br> 1：结构简单<br> 2：解析速度快<br> 3：无事务支持<br> 4：有持久化设计</p><h3 id="消息分发策略的机制和对比" tabindex="-1"><a class="header-anchor" href="#消息分发策略的机制和对比" aria-hidden="true">#</a> 消息分发策略的机制和对比</h3><table><thead><tr><th></th><th>ActiveMQ</th><th>RabbitMQ</th><th>Kafka</th><th>RocketMQ</th></tr></thead><tbody><tr><td>发布订阅</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>轮询分发</td><td>支持</td><td>支持</td><td>支持</td><td>/</td></tr><tr><td>公平分发</td><td>/</td><td>支持</td><td>支持</td><td>/</td></tr><tr><td>重发</td><td>支持</td><td>支持</td><td>/</td><td>支持</td></tr><tr><td>消息拉取</td><td>/</td><td>支持</td><td>支持</td><td>支持</td></tr></tbody></table><p>这里看一眼就可以 以后会具体了解</p><p>轮询是消息的负载均衡 ,公平是服务器的负载均衡</p><h2 id="rabbitmq的入门及安装" tabindex="-1"><a class="header-anchor" href="#rabbitmq的入门及安装" aria-hidden="true">#</a> RabbitMQ的入门及安装</h2><p>RabbitMQ是一个开源的遵循AMQP协议实现基于Erlang语言编写支持多种客户端</p><p>用于在分布式系统内存储消息、转发消息，且具有高可用、高可扩性、易用性等特征</p><p>这玩意Spring的团队也参与了维护 所以和spring家族的兼容性非常好</p>',31),$n={href:"https://www.rabbitmq.com/",target:"_blank",rel:"noopener noreferrer"},Zn=n("p",null,"下载可以看官网说明",-1),ns={href:"https://www.rabbitmq.com/download.html",target:"_blank",rel:"noopener noreferrer"},ss=a(`<h3 id="普通的安装方式" tabindex="-1"><a class="header-anchor" href="#普通的安装方式" aria-hidden="true">#</a> 普通的安装方式</h3><p>要安装它 首先得安装ErLang</p><p>这里以ubuntu为例</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> erlang
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着 将在官网下载的安装包用dpkg命令安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dpkg <span class="token parameter variable">-i</span> xxx.deb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start rabbitmq-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看状态</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl status rabbitmq-server.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接这 如果在avtive中看到了一个绿色的running 表示成功运行</p><p>绑定开机启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl <span class="token builtin class-name">enable</span> rabbitmq-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>停止</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl stop rabbitmq-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后RabbitMQ有一个WEB管理界面，默认是未安装的 需要手动安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>说明 rabbitmq有一个账号默认账号密码是 <code>guest</code> 默认情况下是只能在localhost下访问</p><p>所以需要添加一个远程登录的账户</p></blockquote><p>安装完毕后 重启服务即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl restart rabbitmq-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完毕后访问你的<code>ip:15672</code>（注意之前要放行对应的端口）</p><p>就可以访问</p><p>当然默认你输入guest是访问不了滴</p><p>所以需要</p><p>新增用户</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl add_user admin 密码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>前面的是账号后面的是密码</p><p>然后分配操作权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl set_user_tags admin administrator
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里说下权限的级别：</p><ol><li>Administrator 可以登陆控制台、查看所有信息，可以对rabbitmq进行管理</li><li>monitoring 监控者 可以登陆控制台、查看所有信息</li><li>policymaker 策略定制者 登陆控制台 指定策略</li><li>manmgement 普通管理员 登陆控制台</li></ol><p>上面这四个有的玩意都不一样 反正Administrator是最大的</p><p>接下来添加能从什么地方访问</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl set_permissions <span class="token parameter variable">-p</span> / admin <span class="token string">&quot;.*&quot;</span> <span class="token string">&quot;.*&quot;</span> <span class="token string">&quot;.*&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里是授予这个admin在所有地方访问这个根节点的权限</p><p><strong>访问后一定要在admin标签内删除guest</strong></p><p><strong>访问后一定要在admin标签内删除guest</strong></p><p><strong>访问后一定要在admin标签内删除guest</strong></p><p><strong>访问后一定要在admin标签内删除guest</strong></p><p><strong>访问后一定要在admin标签内删除guest</strong></p><h3 id="docker的安装方式" tabindex="-1"><a class="header-anchor" href="#docker的安装方式" aria-hidden="true">#</a> docker的安装方式</h3><p>先拉取下镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull rabbitmq:management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着前台启动下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span>  rabbitmq  <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 rabbitmq:management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着进入容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后按照正常安装的方式配置用户：</p><p>安装RabbitMQ的WEB管理界面</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>说明 rabbitmq有一个账号默认账号密码是 <code>guest</code> 默认情况下是只能在localhost下访问</p><p>所以需要添加一个远程登录的账户</p></blockquote><p>安装完毕后 重启服务即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl restart rabbitmq-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完毕后访问你的<code>ip:15672</code>（注意之前要放行对应的端口）</p><p>就可以访问</p><p>当然默认你输入guest是访问不了滴</p><p>所以需要</p><p>新增用户</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl add_user admin 密码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>前面的是账号后面的是密码</p><p>然后分配操作权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl set_user_tags admin administrator
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里说下权限的级别：</p><ol><li>Administrator 可以登陆控制台、查看所有信息，可以对rabbitmq进行管理</li><li>monitoring 监控者 可以登陆控制台、查看所有信息</li><li>policymaker 策略定制者 登陆控制台 指定策略</li><li>manmgement 普通管理员 登陆控制台</li></ol><p>上面这四个有的玩意都不一样 反正Administrator是最大的</p><p>接下来添加能从什么地方访问</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl set_permissions <span class="token parameter variable">-p</span> / admin <span class="token string">&quot;.*&quot;</span> <span class="token string">&quot;.*&quot;</span> <span class="token string">&quot;.*&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里是授予这个admin在所有地方访问这个根节点的权限</p><p>然后访问即可</p><figure><img src="`+m+'" alt="image-20211228163633439" tabindex="0" loading="lazy"><figcaption>image-20211228163633439</figcaption></figure><p><strong>访问后一定要在admin标签内删除guest</strong></p><p><strong>访问后一定要在admin标签内删除guest</strong></p><p><strong>访问后一定要在admin标签内删除guest</strong></p><p><strong>访问后一定要在admin标签内删除guest</strong></p><p><strong>访问后一定要在admin标签内删除guest</strong></p><h3 id="rabbitmq的角色权限相关说明" tabindex="-1"><a class="header-anchor" href="#rabbitmq的角色权限相关说明" aria-hidden="true">#</a> RabbitMQ的角色权限相关说明</h3><ol><li>None <ul><li>不能访问management plugin</li></ul></li><li>management：查看自己相关节点信息 <ul><li>列出自己可以通过AMQP登入的虚拟机</li><li>查看自己的虚拟机节点 virtual hosts的queues,exchanges和bindings信息</li><li>查看和关闭自己的channels和connections</li><li>查看有关自己的虚拟机节点virtual hosts的统计信息。包括其他用户在这个节点virtual hosts中的活动信息。</li></ul></li><li>Policymaker <ul><li>包含management所有权限</li><li>查看和创建和删除自己的virtual hosts所属的policies和parameters信息。</li></ul></li><li>Monitoring <ul><li>包含management所有权限</li><li>罗列出所有的virtual hosts，包括不能登录的virtual hosts。</li><li>查看其他用户的connections和channels信息</li><li>查看节点级别的数据如clustering和memory使用情况</li><li>查看所有的virtual hosts的全局统计信息。</li></ul></li><li>Administrator <ul><li>最高权限</li><li>可以创建和删除virtual hosts</li><li>可以查看，创建和删除users</li><li>查看创建permisssions</li><li>关闭所有用户的connections</li></ul></li></ol><h2 id="rabbitmq入门案例-simple简单模式" tabindex="-1"><a class="header-anchor" href="#rabbitmq入门案例-simple简单模式" aria-hidden="true">#</a> RabbitMQ入门案例-Simple简单模式</h2><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h3>',79),as={href:"https://www.rabbitmq.com/getstarted.html",target:"_blank",rel:"noopener noreferrer"},ts=a(`<p>我们这里就先不用springboot了 先用个原生的依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.rabbitmq/amqp-client --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.14.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--下面这两个是标配了 日至相关和lombok--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-simple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.7.32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.18.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来先简单使用下</p><p>消费者</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">//        1. 创建连接工程</span>
        <span class="token class-name">ConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">&quot;你服务器的IP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        注意 这里在云上也要开放对应的端口</span>
        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        设置账号密码</span>
        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;你的账号&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;你的密码&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        设置虚拟访问节点 在根节点上</span>
        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        2. 创建连接Connection</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token string">&quot;消费者&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        3. 通过连接获取Channel</span>
        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">&quot;queue1&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DeliverCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Delivery</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;收到消息：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CancelCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;接收消息失败..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;开始接受消息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        close</span>
        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生产者</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">{</span>
        <span class="token comment">//        所有中间件都是基于TCP/IP协议之上构建的新规范，rabbitmq遵循的是amqp</span>
        <span class="token comment">//        ip :port</span>

        <span class="token comment">//        1. 创建连接工程</span>
        <span class="token class-name">ConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">&quot;你服务器的IP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        注意 这里在云上也要开放对应的端口</span>
        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        设置账号密码</span>
        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;你的账号&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;你的密码&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        设置虚拟访问节点 在根节点上</span>
        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        2. 创建连接Connection</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token string">&quot;生产者&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        3. 通过连接获取Channel</span>
        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        4. 通过创建交换机，声明队列，绑定关系，路由key，发送消息，和接收消息</span>
        <span class="token class-name">String</span> queueName <span class="token operator">=</span> <span class="token string">&quot;queue1&quot;</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>
            <span class="token comment">//                队列名称</span>
            queueName<span class="token punctuation">,</span>
            <span class="token comment">//                是否要持久化 true 的话 会持久化</span>
            <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token comment">//                排他性 是否是一个独占队列</span>
            <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token comment">//                是否会自动删除 随着最后一个消费者消费完消息之后是否要把队列删除</span>
            <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token comment">//                携带一些附加参数</span>
            <span class="token keyword">null</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        4. 准备消息内容</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//        6. 发送消息给队列queue</span>
        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> queueName<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        7. 关闭连接</span>
        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        8. 关闭通道</span>
        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来先运行下这个生产者：</p><figure><img src="`+b+'" alt="image-20211228205739324" tabindex="0" loading="lazy"><figcaption>image-20211228205739324</figcaption></figure><p>你接着能在这个Queues内看到它</p><figure><img src="'+v+'" alt="image-20211228205821025" tabindex="0" loading="lazy"><figcaption>image-20211228205821025</figcaption></figure><p>并且还可以在Channels中看到一个玩意</p><p>紧接着我们运行下消费者</p><p>成功接收到了刚刚生产者发送的消息</p><figure><img src="'+g+'" alt="image-20211228210020027" tabindex="0" loading="lazy"><figcaption>image-20211228210020027</figcaption></figure><p>好了 这就是一次简单AMQP消息传递的流程</p><h3 id="什么是amqp" tabindex="-1"><a class="header-anchor" href="#什么是amqp" aria-hidden="true">#</a> 什么是AMQP</h3><blockquote><p>AMQP的全程：Advanced Message Queuing Protocol（高级消息队列协议）</p><p>是应用层协议的一个开发标准，为面向消息的中间件</p></blockquote><p>它的流程大概是这样</p><p>生产者的流程：</p><figure><img src="'+h+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>首先 建立连接</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//        1. 创建连接工程</span>
<span class="token class-name">ConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">&quot;你服务器的IP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        注意 这里在云上也要开放对应的端口</span>
connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        设置账号密码</span>
connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;你的账号&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;你的密码&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        设置虚拟访问节点 在根节点上</span>
connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        2. 创建连接Connection</span>
<span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token string">&quot;生产者&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来开启通道 发送消息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//        3. 通过连接获取Channel</span>
<span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        4. 通过创建交换机，声明队列，绑定关系，路由key，发送消息，和接收消息</span>
<span class="token class-name">String</span> queueName <span class="token operator">=</span> <span class="token string">&quot;queue1&quot;</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>
    <span class="token comment">//                队列名称</span>
    queueName<span class="token punctuation">,</span>
    <span class="token comment">//                是否要持久化 true 的话 会持久化</span>
    <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">//                排他性 是否是一个独占队列</span>
    <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">//                是否会自动删除 随着最后一个消费者消费完消息之后是否要把队列删除</span>
    <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">//                携带一些附加参数</span>
    <span class="token keyword">null</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        4. 准备消息内容</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//        6. 发送消息给队列queue</span>
channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> queueName<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RabbitMq为什么是基于通道去处理的，而不是连接呢？</p><p>在我们的Redis、Mysql中，存放数据之类的都是通过连接来进行管理</p><p>但是在RabbitMq中，貌似最重要的是这个连接</p><p>实际上想一想就非常清楚</p><p>向我们常用的HTTP协议</p><p>每次连接的时候 都需要请求头等一系列参数 这样就会让这个连接变得臃肿 每次连接和被连接都是需要时间的</p><p>（尤其是三次握手、四次挥手环节都消耗一定的时间）</p><p>而且每次连接又开有关会造成很大的性能开销</p><p>所以在AMQP协议中，连接是一个长连接</p><p>一个长连接内，包含很多的信道（Channel）---在我们高并发的场景下 这个信道的效率就会非常高</p><p>一个连接可能会常见多个信道来处理消息 减少了连接的开销 所以效率非常高</p><p>这就有点类似于数据库的连接池----一个连接，多次复用</p><p>接下来看看消费者的流转过程：</p><figure><img src="`+f+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>和我们的生产者差不多 但是 这里的连接也有可能是从同一个连接内出来的</p><p>所以我们以后有可能会遇到这样的情况：连接只有一个，但是通道有非常多</p><h3 id="rabbitmq的组件和架构" tabindex="-1"><a class="header-anchor" href="#rabbitmq的组件和架构" aria-hidden="true">#</a> RabbitMQ的组件和架构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> queueName<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可能你刚刚已经注意到了这个方法</p><p>这个方法内接受四个参数</p><ol><li>交换机地址</li><li>队列、路由key</li><li>消息的状态控制</li><li>消息的内容主题</li></ol><p>有一道面试题：可以存在没有交换机的队列吗</p><p>答：不可能的，虽然我们像上面一样没有指定交换机，但是一定会存在一个默认的<strong>交换机</strong></p><figure><img src="`+y+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>Broker就是我们的RabbitMq 可能同时存在多个Broker（以后集群的话会涉及到），Broker就像是Mysql的database</li><li>在Broker内 为了更好的区分和分辨 也整出了一个东西 ---虚拟机节点 <ul><li>这个东西就像是电脑的硬盘那样 为了我们更好的区分 分成了类似于 c 、d、e、f盘</li><li>在我们的项目中，可能我们的订单要发消息，我们的用户要发消息，我们的其他业务也要发消息，全局堆积在一个根下面的话 其实会很杂乱的，且很庞大的</li><li>所以RabbitMq就整了一个虚拟机节点来做隔离，这个东西就相当于是Mysql的table那样</li></ul></li></ul><p>我们可以在Rabbit的管理面板中添加额外的节点</p><figure><img src="'+w+'" alt="image-20211228212755591" tabindex="0" loading="lazy"><figcaption>image-20211228212755591</figcaption></figure><p>添加完毕后 就能看到</p><figure><img src="'+q+`" alt="image-20211228212814207" tabindex="0" loading="lazy"><figcaption>image-20211228212814207</figcaption></figure><p>我们之后就可以在设置访问节点的时候 指定为我们的节点</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">&quot;/order&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来总结下：</p><blockquote><p><strong>Server</strong>：又称Broker ,接受客户端的连接，实现AMQP实体服务。 安装rabbitmq-server<br><strong>Connection</strong>：连接，应用程序与Broker的网络连接 TCP/IP/ 三次握手和四次挥手<br><strong>Channel</strong>：网络信道，几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道，客户端可以建立对各Channel，每个Channel代表一个会话任务。<br><strong>Message</strong> :消息：服务与应用程序之间传送的数据，由Properties和body组成，Properties可是对消息进行修饰，比如消息的优先级，延迟等高级特性，Body则就是消息体的内容。<br><strong>Virtual Host</strong> 虚拟地址，用于进行逻辑隔离，最上层的消息路由，一个虚拟主机理由可以有若干个Exhange和Queueu，同一个虚拟主机里面不能有相同名字的Exchange<br><strong>Exchange</strong>：交换机，接受消息，根据路由键发送消息到绑定的队列。(<mark>不具备消息存储的能力</mark>)<br><strong>Bindings</strong>：Exchange和Queue之间的虚拟连接，binding中可以保护多个routing key.<br><strong>Routing key</strong>：是一个路由规则，虚拟机可以用它来确定如何路由一个特定消息。<br><strong>Queue</strong>：队列：也成为Message Queue,消息队列，保存消息并将它们转发给消费者。</p></blockquote><p>然后回到我们的交换机问题</p><p>我们首先让生产者再生产一条消息</p><p>然后点进这个queue内查看它的详细信息</p><figure><img src="`+x+'" alt="image-20211228213330143" tabindex="0" loading="lazy"><figcaption>image-20211228213330143</figcaption></figure><p>查看它的绑定</p><figure><img src="'+_+'" alt="image-20211228213402643" tabindex="0" loading="lazy"><figcaption>image-20211228213402643</figcaption></figure><p>可以看到 即使我们没有绑定交换机 它依旧是有一个默认的交换机</p><figure><img src="'+S+'" alt="image-20211228213436236" tabindex="0" loading="lazy"><figcaption>image-20211228213436236</figcaption></figure><p>我们也可以直接到这个面板查看所有的交换机</p><figure><img src="'+M+'" alt="image-20211228213535065" tabindex="0" loading="lazy"><figcaption>image-20211228213535065</figcaption></figure><p>非常显眼的 Default</p><p>接着点进去 看下它的绑定 上面就直接说明了</p><figure><img src="'+Q+'" alt="image-20211228213606264" tabindex="0" loading="lazy"><figcaption>image-20211228213606264</figcaption></figure><p>默认交换隐式绑定到每个队列，路由键等于队列名称。无法明确绑定到默认交换或从默认交换中解除绑定。它也无法删除。</p><p>也就是 这是一个默认的交换机 当我们在开发过程中队列的名字或者路由的名字没有指定我们的交换机</p><p>所以在开发当中，我们常常都会去指定交换机</p><p>接下来再说说Routing key</p><p>路由key</p><p>我们目前开发的demo实现的效果是 一个生产者 生产的消息可能由多个消费者收到</p><p>但是实际中我们可能只想要固定类型的消费者（例如比较有钱的）收到特定的消息</p><p>那怎么辨别呢？</p><p>非常简单 就像是让富人出示钱包那样 我们可以让接收者符合一定的条件</p><p>例如：<code>where routerkey=XXXX</code></p><p>嘛 总体流程大概是这样</p><figure><img src="'+B+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="图形化操作" tabindex="-1"><a class="header-anchor" href="#图形化操作" aria-hidden="true">#</a> 图形化操作</h2><h3 id="使用图形化界面完成helloworld" tabindex="-1"><a class="header-anchor" href="#使用图形化界面完成helloworld" aria-hidden="true">#</a> 使用图形化界面完成HelloWorld</h3><p>这就像是那啥一样------我们的最简单的Java Socket那样</p><p>一个人发 一个人收</p><figure><img src="'+R+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>始终要记住的一点：我们无论是否指定交换机 都将有交换机来为我们处理数据 没有指定的时候用的就是默认的default交换机</p><p>我们先进入到Queues 可以看到如下内容</p><figure><img src="'+C+'" alt="image-20211228221743907" tabindex="0" loading="lazy"><figcaption>image-20211228221743907</figcaption></figure><p>它的发送消息有两种模式</p><figure><img src="'+j+'" alt="image-20211228221809042" tabindex="0" loading="lazy"><figcaption>image-20211228221809042</figcaption></figure><p>一种是不持久化（服务宕机或者重启后数据会丢失）另一种则是持久化存储</p><p>我们先补到这里发消息，而是去交换机那</p><figure><img src="'+T+'" alt="image-20211228221849246" tabindex="0" loading="lazy"><figcaption>image-20211228221849246</figcaption></figure><p>因为我们之前没有指定交换机 所以这里直接进入默认的</p><figure><img src="'+I+'" alt="image-20211228221933399" tabindex="0" loading="lazy"><figcaption>image-20211228221933399</figcaption></figure><p>我们可以在队列名称中填入我们的队列queue1</p><p>然后消息体来个 Hello RabbitMQ</p><p>然后点击发布</p><figure><img src="'+E+'" alt="image-20211228222014231" tabindex="0" loading="lazy"><figcaption>image-20211228222014231</figcaption></figure><p>发布成功会有这个提示</p><p>TIPS：这一步的时候一定要把之前的 Java接收端程序关了 不然你会发现你这个时候发送的消息在那边自动接收了</p><p>下一步我们开始接受</p><figure><img src="'+O+'" alt="image-20211228222221041" tabindex="0" loading="lazy"><figcaption>image-20211228222221041</figcaption></figure><p>注意 这里它的模式好几种</p><figure><img src="'+z+'" alt="image-20211228222253379" tabindex="0" loading="lazy"><figcaption>image-20211228222253379</figcaption></figure><p>一定要选择第一种 其他的三个都想当于实际接受了数据（会把消息从队列中删除 在生产环境中这可是一个大问题）</p><p>接着我们点击获取</p><figure><img src="'+P+'" alt="image-20211228222344554" tabindex="0" loading="lazy"><figcaption>image-20211228222344554</figcaption></figure><p>成功获取到了刚刚发送的消息</p><p>你在这里可以尝试下第二个 其他的两个就先别去试了 也可以在Queues内尝试发送消息 效果和在队列中是一样的</p><h3 id="fanout-生产消费者模式-控制面板实现" tabindex="-1"><a class="header-anchor" href="#fanout-生产消费者模式-控制面板实现" aria-hidden="true">#</a> Fanout-生产消费者模式-控制面板实现</h3><p>就是一个消息 可以传递到多个队列中 让多个接收方接收</p><p>我们现在管理界面的交换机处创建一个新的交换机</p><figure><img src="'+N+'" alt="image-20211228222857157" tabindex="0" loading="lazy"><figcaption>image-20211228222857157</figcaption></figure><p>这个type一定要选择fanout</p><p>接下来我们去队列那创建两个队列，分别叫q2和q3吧</p><p>这个auto delete就是当最后一个message发送出去的时候是否删除整个队列 我们就保持默认no即可</p><p>实际工作中也是no较多</p><p>Durability 表示是否持久化 我们这里依旧使用默认的Durability即可 另外一个就是不持久化</p><figure><img src="'+D+'" alt="image-20211228223004267" tabindex="0" loading="lazy"><figcaption>image-20211228223004267</figcaption></figure><figure><img src="'+F+'" alt="image-20211228223014827" tabindex="0" loading="lazy"><figcaption>image-20211228223014827</figcaption></figure><p>创建完毕后大概这样</p><p>接着我们进入到这两个队列中 发现都没有绑定我们指定的交换机 于是可以手动绑定下</p><figure><img src="'+A+'" alt="image-20211228223317469" tabindex="0" loading="lazy"><figcaption>image-20211228223317469</figcaption></figure><p>绑定完毕后</p><figure><img src="'+H+'" alt="image-20211228223423655" tabindex="0" loading="lazy"><figcaption>image-20211228223423655</figcaption></figure><p>当然，也可以到交换机处绑定</p><figure><img src="'+U+'" alt="image-20211228223450574" tabindex="0" loading="lazy"><figcaption>image-20211228223450574</figcaption></figure><figure><img src="'+L+'" alt="image-20211228223454946" tabindex="0" loading="lazy"><figcaption>image-20211228223454946</figcaption></figure><p>接下来我们在交换机中发送消息-但是无需指定接收方</p><figure><img src="'+K+'" alt="image-20211228223706076" tabindex="0" loading="lazy"><figcaption>image-20211228223706076</figcaption></figure><p>回到队列中 你就会发现这两个家伙都接受到消息了</p><figure><img src="'+V+'" alt="image-20211228223744663" tabindex="0" loading="lazy"><figcaption>image-20211228223744663</figcaption></figure><p>接下来发布多条试试</p><figure><img src="'+X+'" alt="image-20211228223813850" tabindex="0" loading="lazy"><figcaption>image-20211228223813850</figcaption></figure><p>效果依旧</p><h3 id="routing模式-路由模式-面板实现" tabindex="-1"><a class="header-anchor" href="#routing模式-路由模式-面板实现" aria-hidden="true">#</a> Routing模式-路由模式-面板实现</h3><p>看看模式</p><figure><img src="'+G+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到 这貌似是在发布则模式上增加了亿点点东西完成的</p><p>接下来我们创建一个对应的交换机</p><figure><img src="'+W+'" alt="image-20211228230744821" tabindex="0" loading="lazy"><figcaption>image-20211228230744821</figcaption></figure><p>注意 type要选择direct_change</p><p>接下来我们进入并绑定</p><p><img src="'+Y+'" alt="image-20211228230942800" loading="lazy">、</p><p>这里routingkey 取一个自己喜欢的</p><p>然后在如法炮制一个q3 收发邮件的</p><figure><img src="'+J+'" alt="image-20211228231053723" tabindex="0" loading="lazy"><figcaption>image-20211228231053723</figcaption></figure><p>而且可以给一个队列 分配多个 routing key</p><figure><img src="'+$+'" alt="image-20211228231208575" tabindex="0" loading="lazy"><figcaption>image-20211228231208575</figcaption></figure><p>接下来我们可以指定发送的router key</p><figure><img src="'+Z+'" alt="image-20211228231310698" tabindex="0" loading="lazy"><figcaption>image-20211228231310698</figcaption></figure><figure><img src="'+nn+'" alt="image-20211228231325958" tabindex="0" loading="lazy"><figcaption>image-20211228231325958</figcaption></figure><p>2收到了 3 也收到了</p><p>再尝试下course</p><figure><img src="'+sn+'" alt="image-20211228231408936" tabindex="0" loading="lazy"><figcaption>image-20211228231408936</figcaption></figure><p>只有2收到了</p><figure><img src="'+an+'" alt="image-20211228231432912" tabindex="0" loading="lazy"><figcaption>image-20211228231432912</figcaption></figure><h3 id="topic-模糊匹配的面板实现" tabindex="-1"><a class="header-anchor" href="#topic-模糊匹配的面板实现" aria-hidden="true">#</a> Topic-模糊匹配的面板实现</h3><figure><img src="'+tn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>创建</p><figure><img src="'+en+'" alt="image-20211228232005779" tabindex="0" loading="lazy"><figcaption>image-20211228232005779</figcaption></figure><p>注意 type要选择topic</p><p>绑定队列</p><figure><img src="'+pn+'" alt="image-20211228232238825" tabindex="0" loading="lazy"><figcaption>image-20211228232238825</figcaption></figure><p>分别绑定四个</p><p>规则是有点类似于正则匹配的</p><ul><li><code>#</code>：匹配路由键的一个或多个词 或者啥都不传入 可以有多个 0个 一个等</li><li><code>*</code>：匹配路由键的<strong>一个词</strong> 就是 <strong>不能为空</strong> 有且只有一个</li></ul><p>上面这些的实例的话：</p><ul><li>com.abc.edf 能匹配上第一个</li><li><code>.sources.</code>能匹配上第二个</li><li>com.source.abc 能匹配上第一个和第二个</li><li><code>order</code>能匹配上第三个</li><li><code>caadasd.dadasd.adsada.order.sadasd</code>能匹配上第三个</li><li><code>user.</code>能匹配上第四个</li><li><code>aaddd.user.aadas.dasdas</code>能匹配上第四个</li></ul><h3 id="header模式-面板实现" tabindex="-1"><a class="header-anchor" href="#header模式-面板实现" aria-hidden="true">#</a> Header模式-面板实现</h3><p>先创建一个交换机 选择header模式</p><figure><img src="'+on+'" alt="image-20211228235852863" tabindex="0" loading="lazy"><figcaption>image-20211228235852863</figcaption></figure><p>接着依旧是要进入添加队列</p><p>但是在添加队列的时候 可以额外指定一些参数</p><figure><img src="'+cn+'" alt="image-20211228235939199" tabindex="0" loading="lazy"><figcaption>image-20211228235939199</figcaption></figure><figure><img src="'+ln+'" alt="image-20211229000003575" tabindex="0" loading="lazy"><figcaption>image-20211229000003575</figcaption></figure><p>就相当于 emm 往这里存放参数 需要携带固定的header</p><p>并且我们添加参数 也可以直接指定headers的方式来进行添加</p><figure><img src="'+un+`" alt="image-20211229000040388" tabindex="0" loading="lazy"><figcaption>image-20211229000040388</figcaption></figure><h2 id="代码实现-1" tabindex="-1"><a class="header-anchor" href="#代码实现-1" aria-hidden="true">#</a> 代码实现</h2><h3 id="准备工作-工具类" tabindex="-1"><a class="header-anchor" href="#准备工作-工具类" aria-hidden="true">#</a> 准备工作-工具类</h3><p>简单的封装了下固定的操作为工具类使用 close可以有更多的方法来关闭 这里就先这样了</p><p>然后是通过resources下的rabbit.properties来进行配置的</p><p>实际上可以省略这个properties 自己写死在里面</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">host</span><span class="token punctuation">=</span><span class="token value attr-value">你服务器的端口或者127.0.0.1</span>
<span class="token key attr-name">port</span><span class="token punctuation">=</span><span class="token value attr-value">5672</span>
<span class="token key attr-name">username</span><span class="token punctuation">=</span><span class="token value attr-value">账号</span>
<span class="token key attr-name">password</span><span class="token punctuation">=</span><span class="token value attr-value">密码</span>
<span class="token key attr-name">virtualHost</span><span class="token punctuation">=</span><span class="token value attr-value">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实体类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQ</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ConnectionFactory</span> <span class="token constant">CONNECTION_FACTORY</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token constant">CONNECTION_FACTORY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">RabbitMQ</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;rabbit.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">CONNECTION_FACTORY</span><span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;host&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">CONNECTION_FACTORY</span><span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;port&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">CONNECTION_FACTORY</span><span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">CONNECTION_FACTORY</span><span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">CONNECTION_FACTORY</span><span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;virtualHost&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 创建连接
     *
     * <span class="token keyword">@param</span> <span class="token parameter">name</span> 连接的名字
     * <span class="token keyword">@return</span> 一个RabbitMQ的连接对象
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">TimeoutException</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">CONNECTION_FACTORY</span><span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 关闭连接
     * 因为这玩意可以直接通过channel来获取connection，所以只需要传入一个即可
     *
     * <span class="token keyword">@param</span> <span class="token parameter">channel</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Connection</span> connection <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fanout-生产消费者模式" tabindex="-1"><a class="header-anchor" href="#fanout-生产消费者模式" aria-hidden="true">#</a> Fanout-生产消费者模式</h3><p>首先 我们之前已经创建好了对应的队列</p><figure><img src="`+rn+'" alt="image-20211229131848356" tabindex="0" loading="lazy"><figcaption>image-20211229131848356</figcaption></figure><p>然后在交换机fanout-exchange中绑定了三个队列</p><figure><img src="'+kn+`" alt="image-20211229131931673" tabindex="0" loading="lazy"><figcaption>image-20211229131931673</figcaption></figure><p>接着我们来使用生产者生产下消息发送到这三个队列内</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitMQ</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;生产者&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        准备消息和交换机</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;Hello Fanout&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//        注意 交换机是我们之前创建好的</span>
        <span class="token class-name">String</span> exchangeName <span class="token operator">=</span> <span class="token string">&quot;fanout-exchange&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//        路由key 我们这里不需要 所以为空</span>
        <span class="token class-name">String</span> routeKey <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//        指定交换机的类型</span>
        <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token string">&quot;fanout&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//        投递消息</span>
        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>
            <span class="token comment">//                指定交换机</span>
            exchangeName<span class="token punctuation">,</span> 
            <span class="token comment">//                指定route名称 也就是队列名称</span>
            routeKey<span class="token punctuation">,</span> 
            <span class="token comment">//                指定消息的属性 </span>
            <span class="token keyword">null</span><span class="token punctuation">,</span>
            <span class="token comment">//                消息体</span>
            message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消息投递成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//        close</span>
        <span class="token class-name">RabbitMQ</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后可以在消息列表内看到我们的三个消息</p><figure><img src="`+dn+`" alt="image-20211229132158261" tabindex="0" loading="lazy"><figcaption>image-20211229132158261</figcaption></figure><p>然后我们使用线程来创建三个消费者</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runPro</span><span class="token punctuation">(</span><span class="token class-name">String</span> queueName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//        获取连接</span>
            <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitMQ</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;消费者&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//        获取channel</span>
            channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>
                <span class="token comment">//                    队列的名称</span>
                queueName<span class="token punctuation">,</span>
                <span class="token comment">//                    是否是取出消息</span>
                <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token comment">//                    接收成功的回调</span>
                <span class="token keyword">new</span> <span class="token class-name">DeliverCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Delivery</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费者在队列&quot;</span> <span class="token operator">+</span> queueName <span class="token operator">+</span> <span class="token string">&quot;接收到消息：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token comment">//                    接受失败的回调</span>
                <span class="token keyword">new</span> <span class="token class-name">CancelCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费者在队列&quot;</span> <span class="token operator">+</span> queueName <span class="token operator">+</span> <span class="token string">&quot;接收失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">RabbitMQ</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//        开启三个线程模拟并发获取</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">runPro</span><span class="token punctuation">(</span><span class="token string">&quot;q1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">runPro</span><span class="token punctuation">(</span><span class="token string">&quot;q2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">runPro</span><span class="token punctuation">(</span><span class="token string">&quot;q3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着运行 可以看到 成功接收到了对应的消息</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>消费者在队列q1接收到消息：Hello Fanout
消费者在队列q2接收到消息：Hello Fanout
消费者在队列q3接收到消息：Hello Fanout
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时队列内的消息也是同步变成0了</p><figure><img src="`+mn+'" alt="image-20211229132449143" tabindex="0" loading="lazy"><figcaption>image-20211229132449143</figcaption></figure><h3 id="routing-路由模式" tabindex="-1"><a class="header-anchor" href="#routing-路由模式" aria-hidden="true">#</a> Routing-路由模式</h3><p>我们现在的route-exchange交换机绑定如下</p><figure><img src="'+bn+'" alt="image-20211229142319931" tabindex="0" loading="lazy"><figcaption>image-20211229142319931</figcaption></figure><p>接下来使用它给email发送消息</p>',210),es=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@SuppressWarnings"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"all"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Consumer"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"IOException"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"TimeoutException"),s(),n("span",{class:"token punctuation"},"{"),s(`

        `),n("span",{class:"token class-name"},"Connection"),s(" connection "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"RabbitMQ"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getConnection"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"生产者"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"//        准备消息和交换机"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" message "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"Hello Routing"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//        注意 交换机是我们之前创建好的"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" exchangeName "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"routing_exchange"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//        路由key"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" routeKey "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"email"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//        指定交换机的类型"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" type "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"direct"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"//        投递消息"),s(`
        `),n("span",{class:"token class-name"},"Channel"),s(" channel "),n("span",{class:"token operator"},"="),s(" connection"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createChannel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"basicPublish"),n("span",{class:"token punctuation"},"("),s(`
`),n("span",{class:"token comment"},"//                指定交换机"),s(`
                exchangeName`),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token comment"},"//                指定route名称 也就是队列名称"),s(`
                routeKey`),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token comment"},"//                指定消息的属性"),s(`
                `),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token comment"},"//                消息体"),s(`
                message`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getBytes"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"消息投递成功"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"//        close"),s(`
        `),n("span",{class:"token class-name"},"RabbitMQ"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"close"),n("span",{class:"token punctuation"},"("),s("channel"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`


    `),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ps=a(`<p>接收</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runPro</span><span class="token punctuation">(</span><span class="token class-name">String</span> queueName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//        获取连接</span>
            <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitMQ</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;消费者&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        获取channel</span>
            channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>
<span class="token comment">//                    队列的名称</span>
                    queueName<span class="token punctuation">,</span>
<span class="token comment">//                    是否是取出消息</span>
                    <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token comment">//                    接收成功的回调</span>
                    <span class="token keyword">new</span> <span class="token class-name">DeliverCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token annotation punctuation">@Override</span>
                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Delivery</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费者在队列&quot;</span> <span class="token operator">+</span> queueName <span class="token operator">+</span> <span class="token string">&quot;接收到消息：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">//                    接受失败的回调</span>
                    <span class="token keyword">new</span> <span class="token class-name">CancelCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token annotation punctuation">@Override</span>
                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费者在队列&quot;</span> <span class="token operator">+</span> queueName <span class="token operator">+</span> <span class="token string">&quot;接收失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">RabbitMQ</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        开启三个线程模拟并发获取</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>
                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token function">runPro</span><span class="token punctuation">(</span><span class="token string">&quot;q1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>
                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                   <span class="token function">runPro</span><span class="token punctuation">(</span><span class="token string">&quot;q2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>
                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token function">runPro</span><span class="token punctuation">(</span><span class="token string">&quot;q3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="topic-模糊匹配" tabindex="-1"><a class="header-anchor" href="#topic-模糊匹配" aria-hidden="true">#</a> Topic-模糊匹配</h3><p>交换机如图</p><figure><img src="`+vn+'" alt="image-20211229143147758" tabindex="0" loading="lazy"><figcaption>image-20211229143147758</figcaption></figure><p>我们现在想让q2和q4收到消息</p>',6),os=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Consumer"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"IOException"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"TimeoutException"),s(),n("span",{class:"token punctuation"},"{"),s(`

        `),n("span",{class:"token class-name"},"Connection"),s(" connection "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"RabbitMQ"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getConnection"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"生产者"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"//        准备消息和交换机"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" message "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"Hello Topic"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//        注意 交换机是我们之前创建好的"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" exchangeName "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"topic_exchange"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//        路由key"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" routeKey "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"com.abc.order.myfilter"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//        指定交换机的类型"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" type "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"topic"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"//        投递消息"),s(`
        `),n("span",{class:"token class-name"},"Channel"),s(" channel "),n("span",{class:"token operator"},"="),s(" connection"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createChannel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"basicPublish"),n("span",{class:"token punctuation"},"("),s(`
`),n("span",{class:"token comment"},"//                指定交换机"),s(`
                exchangeName`),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token comment"},"//                指定route名称 也就是队列名称"),s(`
                routeKey`),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token comment"},"//                指定消息的属性"),s(`
                `),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token comment"},"//                消息体"),s(`
                message`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getBytes"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"消息投递成功"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"//        close"),s(`
        `),n("span",{class:"token class-name"},"RabbitMQ"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"close"),n("span",{class:"token punctuation"},"("),s("channel"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`


    `),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),cs=n("p",null,"这样既可 接收的话看之前的代码",-1),is=n("h2",{id:"通过代码来完成绑定交换机和队列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#通过代码来完成绑定交换机和队列","aria-hidden":"true"},"#"),s(" 通过代码来完成绑定交换机和队列")],-1),ls=n("p",null,"通常情况下来说 我们都需要在程序内提前声明好对应的交换机和队列 可以在发送方声明 也可以在接收方声明",-1),us=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@SuppressWarnings"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"all"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Consumer"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"IOException"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"TimeoutException"),s(),n("span",{class:"token punctuation"},"{"),s(`

        `),n("span",{class:"token class-name"},"Connection"),s(" connection "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"RabbitMQ"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getConnection"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"生产者"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"Channel"),s(" channel "),n("span",{class:"token operator"},"="),s(" connection"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createChannel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"//        准备消息和交换机"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" message "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"Hello driect"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//        创建自己的交换机"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" exchangeName "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"direct_message_exchange"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//        指定交换机的类型"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" type "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"direct"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"//        创建一个交换机 第一个参数名字 第二个参数类型 第三个参数表示是否持久化"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"exchangeDeclare"),n("span",{class:"token punctuation"},"("),s("exchangeName"),n("span",{class:"token punctuation"},","),s(" type"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"//        声明队列"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"queueDeclare"),n("span",{class:"token punctuation"},"("),s(`
`),n("span",{class:"token comment"},"//                队列名称"),s(`
                `),n("span",{class:"token string"},'"f1"'),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token comment"},"//                是否持久化"),s(`
                `),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token comment"},"//                是否为独占的队列（只有我们当前这个连接可以用）"),s(`
                `),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token comment"},"//                是否自动删除"),s(`
                `),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token comment"},"//                队列需要携带的参数 这个是只有我们在使用header模式才需要用的 可以接收一个Map<String,Object>的参数"),s(`
                `),n("span",{class:"token keyword"},"null"),s(`
        `),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"queueDeclare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"f2"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"queueDeclare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"f3"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"//        绑定队列和交换机的关系"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"queueBind"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"f1"'),n("span",{class:"token punctuation"},","),s(" exchangeName"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"order"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"queueBind"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"f2"'),n("span",{class:"token punctuation"},","),s(" exchangeName"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"order"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"queueBind"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"f3"'),n("span",{class:"token punctuation"},","),s(" exchangeName"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"course"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`


`),n("span",{class:"token comment"},"//        路由key"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" routeKey "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"order"'),n("span",{class:"token punctuation"},";"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"basicPublish"),n("span",{class:"token punctuation"},"("),s(`
`),n("span",{class:"token comment"},"//                指定交换机"),s(`
                exchangeName`),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token comment"},"//                指定route名称 也就是队列名称"),s(`
                routeKey`),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token comment"},"//                指定消息的属性"),s(`
                `),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token comment"},"//                消息体"),s(`
                message`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getBytes"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"消息投递成功"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//        close"),s(`
        `),n("span",{class:"token class-name"},"RabbitMQ"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"close"),n("span",{class:"token punctuation"},"("),s("channel"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),rs=a(`<p>接下来接收消息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runPro</span><span class="token punctuation">(</span><span class="token class-name">String</span> queueName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//        获取连接</span>
            <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitMQ</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;消费者&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        获取channel</span>
            channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>
<span class="token comment">//                    队列的名称</span>
                    queueName<span class="token punctuation">,</span>
<span class="token comment">//                    是否是取出消息</span>
                    <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token comment">//                    接收成功的回调</span>
                    <span class="token keyword">new</span> <span class="token class-name">DeliverCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token annotation punctuation">@Override</span>
                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Delivery</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费者在队列&quot;</span> <span class="token operator">+</span> queueName <span class="token operator">+</span> <span class="token string">&quot;接收到消息：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">//                    接受失败的回调</span>
                    <span class="token keyword">new</span> <span class="token class-name">CancelCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token annotation punctuation">@Override</span>
                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费者在队列&quot;</span> <span class="token operator">+</span> queueName <span class="token operator">+</span> <span class="token string">&quot;接收失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">RabbitMQ</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        开启三个线程模拟并发获取</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>
                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token function">runPro</span><span class="token punctuation">(</span><span class="token string">&quot;f1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>
                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token function">runPro</span><span class="token punctuation">(</span><span class="token string">&quot;f2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>
                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token function">runPro</span><span class="token punctuation">(</span><span class="token string">&quot;f3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送多次测试 均只有1.2接收到了消息</p><figure><img src="`+gn+'" alt="image-20211229150022504" tabindex="0" loading="lazy"><figcaption>image-20211229150022504</figcaption></figure><h2 id="work-工作队列模式" tabindex="-1"><a class="header-anchor" href="#work-工作队列模式" aria-hidden="true">#</a> Work-工作队列模式</h2><p>这个模式分为两种</p><ul><li>轮询模式：一个消费者只能消费一条消息，<strong>按均分配</strong></li><li>公平分发模式：根据消费者的能力进行公平分配，处理快的处理的多，反之亦然，按劳分配</li></ul><figure><img src="'+hn+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="轮询模式" tabindex="-1"><a class="header-anchor" href="#轮询模式" aria-hidden="true">#</a> 轮询模式</h3><p>RabbitMQ默认就是这个模式 比较公平 接下来用代码测试下</p><p>发布着 发布十条消息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> queueName <span class="token operator">=</span> <span class="token string">&quot;queue1&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 注意要把自动删除设置为false</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>
    channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> queueName<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消费者代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runPro</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> queueName<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitMQ</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;消费者&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> finalTime <span class="token operator">=</span> time<span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>
                queueName<span class="token punctuation">,</span>
                <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">DeliverCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Delivery</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;在队列&quot;</span> <span class="token operator">+</span> queueName <span class="token operator">+</span> <span class="token string">&quot;接收到消息：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">try</span> <span class="token punctuation">{</span>
                            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>finalTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token comment">//                    接受失败的回调</span>
                <span class="token keyword">new</span> <span class="token class-name">CancelCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;在队列&quot;</span> <span class="token operator">+</span> queueName <span class="token operator">+</span> <span class="token string">&quot;接收失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">RabbitMQ</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//        开启三个线程模拟并发获取</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">runPro</span><span class="token punctuation">(</span><span class="token string">&quot;消费者1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;queue1&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">runPro</span><span class="token punctuation">(</span><span class="token string">&quot;消费者2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;queue1&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们先运行第一次生产者和消费者</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>消费者2在队列queue1接收到消息：hello world1
消费者1在队列queue1接收到消息：hello world2
消费者2在队列queue1接收到消息：hello world3
消费者2在队列queue1接收到消息：hello world5
消费者2在队列queue1接收到消息：hello world7
消费者2在队列queue1接收到消息：hello world9
消费者1在队列queue1接收到消息：hello world4
消费者1在队列queue1接收到消息：hello world6
消费者1在队列queue1接收到消息：hello world8
消费者1在队列queue1接收到消息：hello world10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你就能看到 虽然说消费者1比消费者2慢非常多</p><p>消费者2 每100毫秒获取一次</p><p>消费者2 每1秒获取一次</p><p>但是他们那两个最终获取到的东西都是相同的</p><p>消费者1 获取到了 1 3 5 7 9</p><p>2 获取到了 2 4 6 8 10</p><p>这就是轮询模式----无论多少人 始终保持平均分配</p><h3 id="公平分发模式" tabindex="-1"><a class="header-anchor" href="#公平分发模式" aria-hidden="true">#</a> 公平分发模式</h3><p>公平分发必须改为手动应答，不然怎么知道你啥时候处理完，又怎么能实现能者多劳。因此就需要手动应答了</p><p>这里先放代码</p>`,26),ks=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Producer"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"runPro"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" name"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),s(" queueName"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"long"),s(" time"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"Channel"),s(" channel "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"//        获取连接"),s(`
            `),n("span",{class:"token class-name"},"Connection"),s(" connection "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"RabbitMQ"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getConnection"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"消费者"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//        获取channel"),s(`
            channel `),n("span",{class:"token operator"},"="),s(" connection"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createChannel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token comment"},"// 定义常量 方便在内部类中读取"),s(`
            `),n("span",{class:"token keyword"},"long"),s(" finalTime "),n("span",{class:"token operator"},"="),s(" time"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token class-name"},"Channel"),s(" finalChannel "),n("span",{class:"token operator"},"="),s(" channel"),n("span",{class:"token punctuation"},";"),s(`
            
`),n("span",{class:"token comment"},"//            qos代表的就是每次从队列中取出的数据量  这个根据服务器的好坏来决定 例如以后每秒有一千条数据 五台服务器  就可以设置为1000/5/2=100 "),s(`
`),n("span",{class:"token comment"},"//            当然 这也只是估算值 建议的话保持1  速率也是非常快的 除非有特殊需求 再设定为指定的数值才是好的"),s(`
`),n("span",{class:"token comment"},"//            例如 网站每天要处理海量的数据"),s(`
            finalChannel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"basicQos"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"basicConsume"),n("span",{class:"token punctuation"},"("),s(`
`),n("span",{class:"token comment"},"//                    队列的名称"),s(`
                    queueName`),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token comment"},"//                    是否是取出消息 注意 这类要设置为false 取消自动应答 让我们来手动应答消息"),s(`
                    `),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token comment"},"//                    接收成功的回调"),s(`
                    `),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"DeliverCallback"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                        `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
                        `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" consumerTag"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Delivery"),s(" message"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"IOException"),s(),n("span",{class:"token punctuation"},"{"),s(`
                            `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),s("name "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},'"在队列"'),s(),n("span",{class:"token operator"},"+"),s(" queueName "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},'"接收到消息："'),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"("),s("message"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getBody"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                            `),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
                                `),n("span",{class:"token class-name"},"Thread"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sleep"),n("span",{class:"token punctuation"},"("),s("finalTime"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"InterruptedException"),s(" e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                                e`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"printStackTrace"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                            `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token comment"},"//                            这里是手动应答消息"),s(`
                            finalChannel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"basicAck"),n("span",{class:"token punctuation"},"("),s("message"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getEnvelope"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getDeliveryTag"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                        `),n("span",{class:"token punctuation"},"}"),s(`
                    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token comment"},"//                    接受失败的回调"),s(`
                    `),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"CancelCallback"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                        `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
                        `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" consumerTag"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"IOException"),s(),n("span",{class:"token punctuation"},"{"),s(`
                            `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),s("name "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},'"在队列"'),s(),n("span",{class:"token operator"},"+"),s(" queueName "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},'"接收失败"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                        `),n("span",{class:"token punctuation"},"}"),s(`
                    `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("in"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"read"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"IOException"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token class-name"},"TimeoutException"),s(" e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"throw"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"RuntimeException"),n("span",{class:"token punctuation"},"("),s("e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"finally"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("channel "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token class-name"},"RabbitMQ"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"close"),n("span",{class:"token punctuation"},"("),s("channel"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token annotation punctuation"},"@SuppressWarnings"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"all"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token comment"},"//        开启三个线程模拟并发获取"),s(`
        `),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Thread"),n("span",{class:"token punctuation"},"("),s(`
                `),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token function"},"runPro"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"消费者1"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"queue1"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1000"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Thread"),n("span",{class:"token punctuation"},"("),s(`
                `),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token function"},"runPro"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"消费者2"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"queue1"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`


    `),n("span",{class:"token punctuation"},"}"),s(`


`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ds=a(`<p>运行结果：能者多劳</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>消费者2在队列queue1接收到消息：hello world1
消费者1在队列queue1接收到消息：hello world2
消费者2在队列queue1接收到消息：hello world3
消费者2在队列queue1接收到消息：hello world5
消费者2在队列queue1接收到消息：hello world7
消费者2在队列queue1接收到消息：hello world9
消费者1在队列queue1接收到消息：hello world4
消费者1在队列queue1接收到消息：hello world6
消费者1在队列queue1接收到消息：hello world8
消费者1在队列queue1接收到消息：hello world10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rabbitmq的实际应用场景" tabindex="-1"><a class="header-anchor" href="#rabbitmq的实际应用场景" aria-hidden="true">#</a> RabbitMq的实际应用场景</h2>`,3),ms={href:"https://www.bilibili.com/video/BV1dX4y1V73G?p=26&spm_id_from=pageDriver",target:"_blank",rel:"noopener noreferrer"},bs=a('<p>这里面的面试部分建议全文背诵</p><p>然后这里用一个简单的例子</p><figure><img src="'+fn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们平常如果给用户发一个消息的话，需要三步 并且都需要时间</p><p>这时候可以考虑用线程池来解决</p><figure><img src="'+yn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>当然在Java中线程从来不是一个简单的东西…维护之类的极其繁琐，并且耦合性极高</p><p>存在问题：<br> 1：耦合度高<br> 2：需要自己写线程池自己维护成本太高<br> 3：出现了消息可能会丢失，需要你自己做消息补偿<br> 4：如何保证消息的可靠性你自己写<br> 5：如果服务器承载不了，你需要自己去写高可用</p><p>所以我们就可以用RabbitMQ的异步消息队列模式</p><figure><img src="'+wn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>好处</strong><br> 1：完全解耦，用MQ建立桥接<br> 2：有独立的线程池和运行模型<br> 3：出现了消息可能会丢失，MQ有持久化功能<br> 4：如何保证消息的可靠性，死信队列和消息转移的等<br> 5：如果服务器承载不了，你需要自己去写高可用，HA镜像模型高可用。<br> 按照以上约定，用户的响应时间相当于是订单信息写入数据库的时间，也就是50毫秒。注册邮件，发送短信写入消息队列后，直接返回，因此写入消息队列的速度很快，基本可以忽略，因此用户的响应时间可能是50毫秒。因此架构改变后，系统的吞吐量提高到每秒20 QPS。比串行提高了3倍，比并行提高了两倍</p><p>并且还可以通过它来对整个项目进行解耦合 使维护更加方便</p><figure><img src="'+qn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>还可以完成非常有效的秒杀队列、流量削峰</p><p>04、分布式事务的可靠消费和可靠生产<br> 05、索引、缓存、静态化处理的数据同步<br> 06、流量监控<br> 07、日志监控（ELK）<br> 08、下单、订单分发、抢票</p><h2 id="springboot整合rabbitmq" tabindex="-1"><a class="header-anchor" href="#springboot整合rabbitmq" aria-hidden="true">#</a> SpringBoot整合RabbitMQ</h2><h3 id="添加依赖" tabindex="-1"><a class="header-anchor" href="#添加依赖" aria-hidden="true">#</a> 添加依赖</h3><p>我们先创建一个project</p><figure><img src="'+xn+`" alt="image-20211229170017594" tabindex="0" loading="lazy"><figcaption>image-20211229170017594</figcaption></figure><p>首先 可以在pom中看到这样一个依赖包</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后依赖有这些</p><figure><img src="`+_n+'" alt="image-20211229170546479" tabindex="0" loading="lazy"><figcaption>image-20211229170546479</figcaption></figure><p>跟着包我们可以直接进入spring的autoconfiguration中查看</p><figure><img src="'+Sn+`" alt="image-20211229170232886" tabindex="0" loading="lazy"><figcaption>image-20211229170232886</figcaption></figure><p>在autoconfiguration内</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Channel</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">RabbitProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">RabbitAnnotationDrivenConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RabbitStreamConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitAutoConfiguration</span> <span class="token punctuation">{</span>
   
    <span class="token comment">// 这里一堆bean</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绑定的是<code>RabbitProperties</code>这个配置类</p><p>接下来看看这个文件中绑定的是哪个配置项</p>`,29),vs=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@ConfigurationProperties"),n("span",{class:"token punctuation"},"("),s("prefix "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"spring.rabbitmq"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"RabbitProperties"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 相关的配置"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),gs=a(`<p>可以得出 我们以后只需要修改spring.rabbitmq中的配置即可</p><p>然后还可以看到 里面有一个默认的账号和密码可以给我们使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">String</span> host <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">Integer</span> port<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">&quot;guest&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">&quot;guest&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改配置文件" tabindex="-1"><a class="header-anchor" href="#修改配置文件" aria-hidden="true">#</a> 修改配置文件</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 你的服务器IP
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> 你的账户名
    <span class="token key atrule">password</span><span class="token punctuation">:</span> 你的密码
    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fanout模式-生产者" tabindex="-1"><a class="header-anchor" href="#fanout模式-生产者" aria-hidden="true">#</a> Fanout模式-生产者</h3><figure><img src="`+Mn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>开始之前 我们先把所有用不上的交换机和队列之类的都删了（就像是恢复到刚刚装上那样）</p><figure><img src="'+Qn+'" alt="image-20211229173328022" tabindex="0" loading="lazy"><figcaption>image-20211229173328022</figcaption></figure><p>接下来我们先写一个service</p>',10),hs=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Service"),s(`
`),n("span",{class:"token annotation punctuation"},"@Slf4j"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"OrderService"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Autowired"),s(`
    `),n("span",{class:"token class-name"},"RabbitTemplate"),s(" rabbitTemplate"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token doc-comment comment"},[s(`/**
     * 模拟用户下单
     *
     * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token parameter"},"userId"),s(`
     * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token parameter"},"productId"),s(`
     * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token parameter"},"num"),s(`
     */`)]),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"markOrder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" userId"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),s(" productId"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" num"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"//        1 根据商品id查询商品是否充足"),s(`
        `),n("span",{class:"token comment"},"//        2 保存订单"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" orderId "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"UUID"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"randomUUID"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"用户下单，订单id：{}"'),n("span",{class:"token punctuation"},","),s(" orderId"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"//        3 通过MQ完成消息的分发"),s(`
        `),n("span",{class:"token comment"},"//        参数1 交换机"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" exchangeName "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"fanout_order_exchange"'),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"//        参数2 路由key/queue队里名称"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" routingKey "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"//        参数3 消息内容"),s(`
        rabbitTemplate`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"convertAndSend"),n("span",{class:"token punctuation"},"("),s("exchangeName"),n("span",{class:"token punctuation"},","),s("routingKey"),n("span",{class:"token punctuation"},","),s("orderId"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),fs=a(`<p>现在service有了 我们该如何创建交换机和队列以及让他们互相关联呢？</p><p>其实非常简单 我们先创建一个RabbitMQ的配置类RabbitMqConfiguration</p><p>然后</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMqConfiguration</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 1. 声明fanout模式的交换机
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">FanoutExchange</span> <span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//        第二个参数是持久化 第三个是是否自动删除</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span><span class="token string">&quot;fanout_order_exchange&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 2. 声明队列
     * sms.fanout.queue
     * email.fanout.queue
     * duanxin.fanout.queue
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">smsQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//        第二个参数：开启持久化</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;sms.fanout.queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">emailQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//        第二个参数：开启持久化</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;email.fanout.queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">duanxinQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//        第二个参数：开启持久化</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;duanxin.fanout.queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 3. 将队列绑定到交换机
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">smsBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//        把指定的队列绑定到指定的交换机上</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">smsQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">emailBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//        把指定的队列绑定到指定的交换机上</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">emailQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">duanxinBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//        把指定的队列绑定到指定的交换机上</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">duanxinQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">OrderServiceTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">markOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    orderService<span class="token punctuation">.</span><span class="token function">markOrder</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Log内成功打印了如下内容 80d0bf04-43ec-4553-8ff9-f1d8957f4d46</p><figure><img src="`+Bn+'" alt="image-20211229181417541" tabindex="0" loading="lazy"><figcaption>image-20211229181417541</figcaption></figure><p>接下来我们看下rabbitmq</p><figure><img src="'+Rn+'" alt="image-20211229181448440" tabindex="0" loading="lazy"><figcaption>image-20211229181448440</figcaption></figure><p>三个队列内都有消息了 现在随便打开一个看看获取到的消息内容</p><figure><img src="'+Cn+`" alt="image-20211229181508511" tabindex="0" loading="lazy"><figcaption>image-20211229181508511</figcaption></figure><p>和我们发送的一模一样</p><p>好了，接下来我们该完成消费者的部分</p><h3 id="fanout模式-消费者" tabindex="-1"><a class="header-anchor" href="#fanout模式-消费者" aria-hidden="true">#</a> Fanout模式-消费者</h3><p>我们先创建一个fanout文件夹，然后依次创建三个类</p><ul><li><code>@RabbitListener(queues = &quot;duanxin.fanout.queue&quot;)</code>代表要监听的队列</li><li><code>@RabbitHandler</code>表示接收到消息执行的回调</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;duanxin.fanout.queue&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">&quot;FanoutDuanxinConsumer&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutDuanxinConsumer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RabbitHandler</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reviseMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;FanoutDuanxinConsumer队列接收到了消息：{}&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个是短信的，再创建一个sms和一个email的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;email.fanout.queue&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">&quot;FanoutEmailConsumer&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutEmailConsumer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RabbitHandler</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;FanoutEmailConsumer接收到消息：{}&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;sms.fanout.queue&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">&quot;FanoutSmsConsumer&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutSmsConsumer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RabbitHandler</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;FanoutSmsConsumer接收到了消息: {}&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终结构如下</p><figure><img src="`+jn+'" alt="image-20211229193954231" tabindex="0" loading="lazy"><figcaption>image-20211229193954231</figcaption></figure><p>然后我们启动这个application</p><figure><img src="'+Tn+'" alt="image-20211229194006577" tabindex="0" loading="lazy"><figcaption>image-20211229194006577</figcaption></figure><p>启动完毕后是什么都没有的</p><p>但是紧接着运行我们之前测试类内的消费者</p><figure><img src="'+In+'" alt="image-20211229194059678" tabindex="0" loading="lazy"><figcaption>image-20211229194059678</figcaption></figure><p>得到了订单号763c256b-7c28-40a3-a8ba-460abdebadb3</p><p>我们再回到application进程中</p><figure><img src="'+En+'" alt="image-20211229194120447" tabindex="0" loading="lazy"><figcaption>image-20211229194120447</figcaption></figure><p>可以看到成功接收到了消息..</p><h3 id="routing-direct-模式-路由" tabindex="-1"><a class="header-anchor" href="#routing-direct-模式-路由" aria-hidden="true">#</a> Routing(direct)模式-路由</h3><figure><img src="'+On+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>应该是这样的</p><p>所以我们应该先去定义下对应的交换机和队列的关系 然后再通过交换机投递消息</p>',36),ys=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Configuration"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"RabbitMqConfiguration"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token doc-comment comment"},[s(`/**
     * 1. 声明 Direct模式的交换机
     *   
     * `),n("span",{class:"token keyword"},"@return"),s(`
     */`)]),s(`
    `),n("span",{class:"token annotation punctuation"},"@Bean"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"DirectExchange"),s(),n("span",{class:"token function"},"fanoutExchange"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"//        第二个参数是持久化 第三个是是否自动删除"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"DirectExchange"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"direct_order_exchange"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token doc-comment comment"},[s(`/**
     * 2. 声明队列
     * sms.fanout.queue
     * email.fanout.queue
     * duanxin.fanout.queue
     *
     * `),n("span",{class:"token keyword"},"@return"),s(`
     */`)]),s(`
    `),n("span",{class:"token annotation punctuation"},"@Bean"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Queue"),s(),n("span",{class:"token function"},"smsQueue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"//        第二个参数：开启持久化  注意明明规范 路由模式要以xxx.direct.xxx命名"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Queue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"sms.direct.queue"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Bean"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Queue"),s(),n("span",{class:"token function"},"emailQueue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"//        第二个参数：开启持久化"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Queue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"email.direct.queue"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Bean"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Queue"),s(),n("span",{class:"token function"},"duanxinQueue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"//        第二个参数：开启持久化"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Queue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"duanxin.direct.queue"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token doc-comment comment"},[s(`/**
     * 3. 将队列绑定到交换机 同时指定绑定的路由key
     *    with("xxxx");绑定的同时指定路由key 
     * `),n("span",{class:"token keyword"},"@return"),s(`
     */`)]),s(`
    `),n("span",{class:"token annotation punctuation"},"@Bean"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Binding"),s(),n("span",{class:"token function"},"smsBinding"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"BindingBuilder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"bind"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"smsQueue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"to"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"fanoutExchange"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"with"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"sms"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Bean"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Binding"),s(),n("span",{class:"token function"},"emailBinding"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"BindingBuilder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"bind"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"emailQueue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"to"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"fanoutExchange"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"with"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"email"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Bean"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Binding"),s(),n("span",{class:"token function"},"duanxinBinding"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"BindingBuilder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"bind"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"duanxinQueue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"to"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"fanoutExchange"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"with"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"duanxin"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ws=n("p",null,"接着在我们的service中添加对应的方法",-1),qs=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Service"),s(`
`),n("span",{class:"token annotation punctuation"},"@Slf4j"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"OrderService"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Autowired"),s(`
    `),n("span",{class:"token class-name"},"RabbitTemplate"),s(" rabbitTemplate"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token doc-comment comment"},[s(`/**
     * 模拟用户下单
     *
     * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token parameter"},"userId"),s(`
     * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token parameter"},"productId"),s(`
     * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token parameter"},"num"),s(`
     */`)]),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"markOrder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" userId"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),s(" productId"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" num"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token comment"},"//        1 根据商品id查询商品是否充足"),s(`
`),n("span",{class:"token comment"},"//        2 保存订单"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" orderId "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"UUID"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"randomUUID"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"用户下单，订单id：{}"'),n("span",{class:"token punctuation"},","),s(" orderId"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//        3 通过MQ完成消息的分发"),s(`
`),n("span",{class:"token comment"},"//        参数1 交换机"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" exchangeName "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"fanout_order_exchange"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//        参数2 路由key/queue队里名称"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" routingKey "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//        参数3 消息内容"),s(`
        rabbitTemplate`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"convertAndSend"),n("span",{class:"token punctuation"},"("),s("exchangeName"),n("span",{class:"token punctuation"},","),s(" routingKey"),n("span",{class:"token punctuation"},","),s(" orderId"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token doc-comment comment"},[s(`/**
     * 通过Driect(精准匹配，也叫路由)模式完成消息的分发
     * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token parameter"},"userId"),s(`
     * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token parameter"},"productId"),s(`
     * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token parameter"},"num"),s(`
     */`)]),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"makeOrderDirect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" userId"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),s(" productId"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" num"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token comment"},"//        1 根据商品id查询商品是否充足"),s(`
`),n("span",{class:"token comment"},"//        2 保存订单"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" orderId "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"UUID"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"randomUUID"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"用户下单，订单id：{}"'),n("span",{class:"token punctuation"},","),s(" orderId"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//        3 通过MQ完成消息的分发"),s(`
`),n("span",{class:"token comment"},"//        参数1 交换机"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" exchangeName "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"direct_order_exchange"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//        参数3 消息内容 第一个参数指定交换机 第二个参数指定路由key 第三个参数指定内容"),s(`
        rabbitTemplate`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"convertAndSend"),n("span",{class:"token punctuation"},"("),s("exchangeName"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"sms"'),n("span",{class:"token punctuation"},","),s(" orderId"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        rabbitTemplate`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"convertAndSend"),n("span",{class:"token punctuation"},"("),s("exchangeName"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"email"'),n("span",{class:"token punctuation"},","),s(" orderId"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),xs=a(`<p>消费者和fanout内是一模一样的</p><p>接下来我们在测试类中改动下方法的调用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">OrderServiceTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">markOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        orderService<span class="token punctuation">.</span><span class="token function">makeOrderDirect</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>紧接着 因为我们更改了队列名 所以说在监听队列的类中也要做相应的变动</p>`,4),_s=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Component"),s(`
`),n("span",{class:"token annotation punctuation"},"@RabbitListener"),n("span",{class:"token punctuation"},"("),s("queues "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"duanxin.direct.queue"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token annotation punctuation"},"@Slf4j"),n("span",{class:"token punctuation"},"("),s("topic "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"FanoutDuanxinConsumer"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"FanoutDuanxinConsumer"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation punctuation"},"@RabbitHandler"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"reviseMessage"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" message"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"FanoutDuanxinConsumer队列接收到了消息：{}"'),n("span",{class:"token punctuation"},","),s(" message"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Ss=a('<p>这里就不放另外两个了 按照这个方式改动下即可，当然你也可以为了规范把类名之类的都改成DriectXXXXX</p><p>然后先启动主线程，再启动测试类</p><figure><img src="'+zn+'" alt="image-20211229195750062" tabindex="0" loading="lazy"><figcaption>image-20211229195750062</figcaption></figure><p>我们代码中是制定了向sms和email发送消息</p><p>然后发送了c036ba6e-054c-449d-a4c3-12264adbccba</p><p>接下来回到application进程 看看效果</p><figure><img src="'+Pn+`" alt="image-20211229195828914" tabindex="0" loading="lazy"><figcaption>image-20211229195828914</figcaption></figure><p>只有email和sms收到了消息</p><h4 id="关于交换机和队列的绑定放在生产者还是消费者的问题" tabindex="-1"><a class="header-anchor" href="#关于交换机和队列的绑定放在生产者还是消费者的问题" aria-hidden="true">#</a> 关于交换机和队列的绑定放在生产者还是消费者的问题</h4><p>我们实际开发过程中</p><p>生产者和消费者可能是分开来的</p><p>例如 两个java进程 均不知道是否有对方的存在</p><p>这个时候我们的配置文件（交换机和队列绑定的configuration）应该放在谁那里呢？</p><p>通常情况下为了排除错误之类 一般两边都会放 但如果是实际生产环境中 有可能是偏向于只放在<strong>消费者那儿</strong></p><p>在启动过程中 如果消费者没有找到队列 会直接报错（消费者只和队列打交道）</p><h3 id="topic模式-模糊匹配-额外附带注解替换配置类" tabindex="-1"><a class="header-anchor" href="#topic模式-模糊匹配-额外附带注解替换配置类" aria-hidden="true">#</a> TOPIC模式-模糊匹配（额外附带注解替换配置类）</h3><p>嘛 之前总是通过配置类来配置太麻烦了 这次用注解吧</p><p>其实蛮简单的</p><p>但是实际开发中并不推荐这样用 更难维护了..</p><p>PS：这个@RabbitListener注解官方是推荐放在方法上 但是大部分都是放在类上 更好辨别</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>
    bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>
        <span class="token comment">// 配置队列 第一个队列名 第二个是否持久化 第三个是否自动删除 md这开发者脑袋有点问题 好好的布尔值不用非要用字符串</span>
        value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;duanxin.topic.queue&quot;</span><span class="token punctuation">,</span> declare <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span> autoDelete <span class="token operator">=</span> <span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">// 配置交换机 第二个参数是交换机的类型 要用ExchangeTypes枚举类指定</span>
        exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;topic_order_exchange&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ExchangeTypes</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">// 这里是配置router key 按照我们之前topic的规则来即可</span>
        key <span class="token operator">=</span> <span class="token string">&quot;#.duanxin.#&quot;</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">&quot;TopicDuanxinConsumer&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicDuanxinConsumer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RabbitHandler</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reviseMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;TopicDuanxinConsumer队列接收到了消息：{}&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来另外两个同理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>
    bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>
        value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;email.topic.queue&quot;</span><span class="token punctuation">,</span> declare <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span> autoDelete <span class="token operator">=</span> <span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;topic_order_exchange&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ExchangeTypes</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        key <span class="token operator">=</span> <span class="token string">&quot;#.email.#&quot;</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">&quot;TopicEmailConsumer&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicEmailConsumer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RabbitHandler</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;TopicEmailConsumer接收到消息：{}&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>
    bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>
        value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;sms.topic.queue&quot;</span><span class="token punctuation">,</span> declare <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span> autoDelete <span class="token operator">=</span> <span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;topic_order_exchange&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ExchangeTypes</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        key <span class="token operator">=</span> <span class="token string">&quot;#.sms.#&quot;</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">&quot;TopicSmsConsumer&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicSmsConsumer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RabbitHandler</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;TopicSmsConsumer接收到了消息: {}&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们继续来写一下生产者内的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeOrderTopic</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//        1 根据商品id查询商品是否充足</span>
    <span class="token comment">//        2 保存订单</span>
    <span class="token class-name">String</span> orderId <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;用户下单，订单id：{}&quot;</span><span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        3 通过MQ完成消息的分发</span>
    <span class="token comment">//        参数1 交换机</span>
    <span class="token class-name">String</span> exchangeName <span class="token operator">=</span> <span class="token string">&quot;topic_order_exchange&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//        参数3 消息内容</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> <span class="token string">&quot;com.abcdefg.email.aaa&quot;</span><span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着先启动消费者的application</p><p>然后再到生产者的测试类内调用这个方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">OrderServiceTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">markOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        orderService<span class="token punctuation">.</span><span class="token function">makeOrderTopic</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><figure><img src="`+Nn+'" alt="image-20211229203720902" tabindex="0" loading="lazy"><figcaption>image-20211229203720902</figcaption></figure><figure><img src="'+Dn+'" alt="image-20211229203726541" tabindex="0" loading="lazy"><figcaption>image-20211229203726541</figcaption></figure><h2 id="rabbitmq高级开发" tabindex="-1"><a class="header-anchor" href="#rabbitmq高级开发" aria-hidden="true">#</a> RabbitMQ高级开发</h2><p>在之前的学习中 我们始终没有说到过在队列中的这些东西</p><figure><img src="'+Fn+'" alt="image-20211229204411755" tabindex="0" loading="lazy"><figcaption>image-20211229204411755</figcaption></figure><p>接下来一个一个的说明</p><h3 id="过期时间ttl" tabindex="-1"><a class="header-anchor" href="#过期时间ttl" aria-hidden="true">#</a> 过期时间TTL</h3><blockquote><p>过期时间TTL表示可以对消息设置预期的时间</p><p>在这个时间内都可以被消费者消费获取</p><p>过了之后消息将自动删除</p><p>RabbitMQ可以对 <strong>消息和队列</strong> 设置TTL 目前有两种方式来设置</p><ul><li>第一种方式是通过队列属性设置，队列中的所有消息都有相同的过期时间</li><li>第二种方式是对消息进行单独设置，每条消息都将可以不同</li></ul><p>如果上述两种方式同时使用，则过期时间取两者内更短的那个数值</p><p>消息队列的消息一旦超过设置的ttl值，就成为dead message 被投递到死信队列</p><p>消费者将无法收到该类消息</p></blockquote><p>我们设置ttl非常简单</p><h4 id="给队列设置过期时间" tabindex="-1"><a class="header-anchor" href="#给队列设置过期时间" aria-hidden="true">#</a> 给队列设置过期时间</h4>',40),Ms=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Configuration"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"RabbitMqConfiguration"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token doc-comment comment"},[s(`/**
     * 1. 声明fanout模式的交换机
     *
     * `),n("span",{class:"token keyword"},"@return"),s(`
     */`)]),s(`
    `),n("span",{class:"token annotation punctuation"},"@Bean"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"DirectExchange"),s(),n("span",{class:"token function"},"ttlDirectExchange"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token comment"},"//        第二个参数是持久化 第三个是是否自动删除"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"DirectExchange"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"ttl_direct_order_exchange"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token doc-comment comment"},[s(`/**
     * 2. 声明队列
     * sms.fanout.queue
     * email.fanout.queue
     * duanxin.fanout.queue
     *
     * `),n("span",{class:"token keyword"},"@return"),s(`
     */`)]),s(`
    `),n("span",{class:"token annotation punctuation"},"@Bean"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Queue"),s(),n("span",{class:"token function"},"ttlSmsQueue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"HashMap"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},">")]),s(" args "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"HashMap"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//        设置队列的过期时间 单位是毫秒 这里一定得是一个int类型（整形） 不然会报错"),s(`
        args`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"x-message-ttl"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"10000"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//        第二个参数 是否持久化"),s(`
`),n("span",{class:"token comment"},"//        第三个参数 是否是单前连接私有队列"),s(`
`),n("span",{class:"token comment"},"//        第四个参数 是否自动删除"),s(`
`),n("span",{class:"token comment"},"//        第五个参数 为我们的args-附带额外值"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Queue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"ttl.sms.fanout.queue"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(" args"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`


    `),n("span",{class:"token doc-comment comment"},[s(`/**
     * 3. 将队列绑定到交换机 同时指定绑定的路由key
     *
     * `),n("span",{class:"token keyword"},"@return"),s(`
     */`)]),s(`
    `),n("span",{class:"token annotation punctuation"},"@Bean"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Binding"),s(),n("span",{class:"token function"},"smsBinding"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"BindingBuilder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"bind"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"ttlSmsQueue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"to"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"ttlDirectExchange"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"with"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"sms"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`


`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Qs=a(`<p>绑定任意的交换机都可</p><p>接着我们正常写service即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ttlMakeOrderDirect</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//        1 根据商品id查询商品是否充足</span>
    <span class="token comment">//        2 保存订单</span>
    <span class="token class-name">String</span> orderId <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;用户下单，订单id：{}&quot;</span><span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        3 通过MQ完成消息的分发</span>
    <span class="token comment">//        参数1 交换机</span>
    <span class="token class-name">String</span> exchangeName <span class="token operator">=</span> <span class="token string">&quot;ttl_direct_order_exchange&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//        参数3 消息内容</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> <span class="token string">&quot;sms&quot;</span><span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> <span class="token string">&quot;email&quot;</span><span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>十秒内访问（我们设置的过期时间是10秒）</p><figure><img src="`+An+'" alt="image-20211229211750899" tabindex="0" loading="lazy"><figcaption>image-20211229211750899</figcaption></figure><p>十秒后访问</p><figure><img src="'+Hn+'" alt="image-20211229211808038" tabindex="0" loading="lazy"><figcaption>image-20211229211808038</figcaption></figure><p>并且可以看到上面有一个配置项</p><figure><img src="'+Un+'" alt="image-20211229211847472" tabindex="0" loading="lazy"><figcaption>image-20211229211847472</figcaption></figure><p>明确的说明了过期时间</p><p>并且还能在队列内明确的发现 这是一个带有TTL过期时间的队列</p><figure><img src="'+Ln+'" alt="image-20211229211944694" tabindex="0" loading="lazy"><figcaption>image-20211229211944694</figcaption></figure><p>但是这个过期并非是真正的删除 还有一个死信队列可以来接收过期的队列</p><h4 id="给消息设置单独的过期时间" tabindex="-1"><a class="header-anchor" href="#给消息设置单独的过期时间" aria-hidden="true">#</a> 给消息设置单独的过期时间</h4><p><strong>无论消息队列是否是ttl的 都可以这样单独的给一条消息设置过期时间 但是实际上并不怎么会用这个方式</strong></p><p>如果说队列和消息均有过期时间，则使用更短的那个</p>',16),Bs=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"ttlMakeOrderDirect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" userId"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),s(" productId"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" num"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token comment"},"//        1 根据商品id查询商品是否充足"),s(`
`),n("span",{class:"token comment"},"//        2 保存订单"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" orderId "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"UUID"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"randomUUID"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"用户下单，订单id：{}"'),n("span",{class:"token punctuation"},","),s(" orderId"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//        3 通过MQ完成消息的分发"),s(`
`),n("span",{class:"token comment"},"//        参数1 交换机"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" exchangeName "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"direct_order_exchange"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//        参数3 消息内容"),s(`
        rabbitTemplate`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"convertAndSend"),n("span",{class:"token punctuation"},"("),s("exchangeName"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"sms"'),n("span",{class:"token punctuation"},","),s(" orderId"),n("span",{class:"token punctuation"},","),s(`
                `),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"MessagePostProcessor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
                    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Message"),s(),n("span",{class:"token function"},"postProcessMessage"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Message"),s(" message"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"AmqpException"),s(),n("span",{class:"token punctuation"},"{"),s(`
                        `),n("span",{class:"token comment"},"// 设置过期时间"),s(`
                        message`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getMessageProperties"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setExpiration"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"5000"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                        `),n("span",{class:"token comment"},"// 设置编码"),s(`
                        message`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getMessageProperties"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setContentType"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"UTF-8"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                        `),n("span",{class:"token keyword"},"return"),s(" message"),n("span",{class:"token punctuation"},";"),s(`
                    `),n("span",{class:"token punctuation"},"}"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Rs=a('<h3 id="死信队列" tabindex="-1"><a class="header-anchor" href="#死信队列" aria-hidden="true">#</a> 死信队列</h3><p>当消息在一个队列变成死信后，可以被重新发送到另一个交换机内，这个交换机就是DLX（dead leffet exchange）绑定的DLX就被称之为死信队列</p><p>消息变成死信可能是由于如下原因</p><ul><li>消息被拒绝</li><li>消息过期</li><li>队列达到最大长度</li></ul><p>DLX也是一个正常的交换机 和一般的交换机没有区别</p><p>它能在任何的队列上被指定</p><p>实际上就是设置某一个队列的属性</p><p>当这个队列中存在死信时，RabbitMQ会自动的将这个消息重新发布到指定的DLX内，进而路由另一个队列，即死信队列</p><p>想要使用死信，只需要再定义列表的时候设置队列参数：<code>x-dead-letter-exchange</code>然后指定交换机即可</p><figure><img src="'+Kn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们这里是这样的</p>',11),Cs={href:"http://dead.com.xxx.xxx",target:"_blank",rel:"noopener noreferrer"},js=a(`<p>然后在我们的普通队列中进行如下配置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">ttlSmsQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        设置队列的过期时间 单位是毫秒 这里一定得是一个int类型（整形） 不然会报错</span>
    args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-message-ttl&quot;</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        指定死信队列交换机</span>
    args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-exchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dead_direct_exchange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        设置死信队列的路由key  如果说是fanout模式 则下面不需要配置</span>
    args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-routing-key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        第二个参数 是否持久化</span>
    <span class="token comment">//        第三个参数 是否是单前连接私有队列</span>
    <span class="token comment">//        第四个参数 是否自动删除</span>
    <span class="token comment">//        第五个参数 为我们的args-附带额外值</span>
    <span class="token comment">//        PS：这里如果之前创建过队列了 需要先删掉 再创建 不会额外自动创建的 而是会报错 但是如果在实际工作中 千万不能直接删除 而是要一步一步的替换掉</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;ttl.sms.fanout.queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样即可 这里就不做案例测试了</p><p>当然我们还可以设置一个队列的最长值</p><p><code>x-max-length</code> 需要传入一个int</p><p>当超过限制的长度的时候 新添加的内容将会被转移到死信队列</p><figure><img src="`+Vn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="rabbit内存磁盘的监控" tabindex="-1"><a class="header-anchor" href="#rabbit内存磁盘的监控" aria-hidden="true">#</a> Rabbit内存磁盘的监控</h2><p>当内存使用超过配置的阈值或者磁盘空间剩余空间对于配置的阈值时，RabbitMQ会暂时阻塞客户端的连接，并且停止接收从客户端发来的消息，以此避免服务器的崩溃，客户端与服务端的心态检测机制也会失效。</p><p><img src="'+Xn+'" alt="image-20211229220308754" loading="lazy">如下图：</p><figure><img src="'+Gn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>当队列出现blocking或blocked话说明到达了阈值和以及高负荷运行了。</p>',12),Ts={href:"https://www.bilibili.com/video/BV1dX4y1V73G?p=34&spm_id_from=pageDriver",target:"_blank",rel:"noopener noreferrer"},Is=a(`<p>修改内存的最大大小</p><p>修改配置文件<code>/etc/rabbitmq/rabbitmq.conf</code></p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token comment">#默认</span>
<span class="token comment">#vm_memory_high_watermark.relative = 0.4</span>
<span class="token comment"># 使用relative相对值进行设置fraction,建议取值在04~0.7之间，不建议超过0.7.</span>
<span class="token key attr-name">vm_memory_high_watermark.relative</span> <span class="token punctuation">=</span> <span class="token value attr-value">0.6</span>
<span class="token comment"># 使用absolute的绝对值的方式，单位是KB,MB,GB 对应的命令如下</span>
<span class="token key attr-name">vm_memory_high_watermark.absolute</span> <span class="token punctuation">=</span> <span class="token value attr-value">2GB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>里面的两种方式二选一 ，一般是上面那个百分比的多一些</p><p>设置完毕后重启即可</p><p>然后就是内存换页</p><p>在某个Broker节点及内存阻塞生产者之前，它会尝试将队列中的消息换页到磁盘以释放内存空间，持久化和非持久化的消息都会写入磁盘中，其中持久化的消息本身就在磁盘中有一个副本，所以在转移的过程中持久化的消息会先从内存中清除掉。</p><blockquote><p>默认情况下，内存到达的阈值是50%时就会换页处理。<br> 也就是说，在默认情况下该内存的阈值是0.4的情况下，当内存超过0.4*0.5=0.2时，会进行换页动作。</p></blockquote><p>比如有1000MB内存，当内存的使用率达到了400MB,已经达到了极限，但是因为配置的换页内存0.5，这个时候会在达到极限400mb之前，会把内存中的200MB进行转移到磁盘中。从而达到稳健的运行。</p><p>可以通过设置 <code>vm_memory_high_watermark_paging_ratio</code> 来进行调整</p><p>依旧是在<code>/etc/rabbitmq/rabbitmq.conf</code>内配置</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">vm_memory_high_watermark.relative</span> <span class="token punctuation">=</span> <span class="token value attr-value">0.4</span>
<span class="token key attr-name">vm_memory_high_watermark_paging_ratio</span> <span class="token punctuation">=</span> <span class="token value attr-value">0.7（设置小于1的值）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么设置小于1，以为你如果你设置为1的阈值。内存都已经达到了极限了。你在去换页意义不是很大了。</p><p>然后就是RabbitMQ的磁盘预警</p><p>当磁盘的剩余空间低于确定的阈值时，RabbitMQ同样会阻塞生产者，这样可以避免因非持久化的消息持续换页而耗尽磁盘空间导致服务器崩溃。</p><blockquote><p>默认情况下：磁盘预警为50MB的时候会进行预警。表示当前磁盘空间第50MB的时候会阻塞生产者并且停止内存消息换页到磁盘的过程。<br> 这个阈值可以减小，但是不能完全的消除因磁盘耗尽而导致崩溃的可能性。比如在两次磁盘空间的检查空隙内，第一次检查是：60MB ，第二检查可能就是1MB,就会出现警告。</p></blockquote><p>通过命令方式修改如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl set_disk_free_limit  <span class="token operator">&lt;</span>disk_limit<span class="token operator">&gt;</span>
rabbitmqctl set_disk_free_limit memory_limit  <span class="token operator">&lt;</span>fraction<span class="token operator">&gt;</span>
<span class="token comment"># disk_limit：固定单位 KB MB GB</span>
<span class="token comment"># fraction ：是相对阈值，建议范围在:1.0~2.0之间。（相对于内存）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件的话就是</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">disk_free_limit.relative</span> <span class="token punctuation">=</span> <span class="token value attr-value">3.0</span>
<span class="token key attr-name">disk_free_limit.absolute</span> <span class="token punctuation">=</span> <span class="token value attr-value">50mb</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rabbitmq的集群搭建" tabindex="-1"><a class="header-anchor" href="#rabbitmq的集群搭建" aria-hidden="true">#</a> RabbitMQ的集群搭建</h2><h3 id="主从节点" tabindex="-1"><a class="header-anchor" href="#主从节点" aria-hidden="true">#</a> 主从节点</h3>`,22),Es={href:"https://www.bilibili.com/video/BV1dX4y1V73G?p=35&spm_id_from=pageDriver",target:"_blank",rel:"noopener noreferrer"},Os=n("p",null,"建议是先看一遍视频 再来开始用docker 搭建 会少蛮多坑",-1),zs=n("p",null,"我这里使用docker搭建",-1),Ps={href:"https://www.cnblogs.com/vipstone/p/9362388.html",target:"_blank",rel:"noopener noreferrer"},Ns=a(`<p>先把之前的容器全部删了</p><p>然后重新创建三个</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--hostname</span> rabbit1 <span class="token parameter variable">--name</span> myrabbit1 <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_ERLANG_COOKIE</span><span class="token operator">=</span><span class="token string">&#39;rabbitcookie&#39;</span> rabbitmq:management

<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--hostname</span> rabbit2 <span class="token parameter variable">--name</span> myrabbit2 <span class="token parameter variable">-p</span> <span class="token number">5673</span>:5672 <span class="token parameter variable">--link</span> myrabbit1:rabbit1 <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_ERLANG_COOKIE</span><span class="token operator">=</span><span class="token string">&#39;rabbitcookie&#39;</span> rabbitmq:management

<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--hostname</span> rabbit3 <span class="token parameter variable">--name</span> myrabbit3 <span class="token parameter variable">-p</span> <span class="token number">5674</span>:5672 <span class="token parameter variable">--link</span> myrabbit1:rabbit1 <span class="token parameter variable">--link</span> myrabbit2:rabbit2 <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_ERLANG_COOKIE</span><span class="token operator">=</span><span class="token string">&#39;rabbitcookie&#39;</span> rabbitmq:management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着进入到第一个并执行对应的命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> myrabbit1 <span class="token function">bash</span>
rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl start_app
<span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里百分之一百会弹出这样一个警告</p><p><code>RABBITMQ_ERLANG_COOKIE env variable support is deprecated and will be REMOVED in a future version. Use the $HOME/.erlang.cookie file or the --erlang-cookie switch instead.</code></p><p>不用管他</p><p>然后进入到第二个 设置集群</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> myrabbit2 <span class="token function">bash</span>
rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl join_cluster <span class="token parameter variable">--ram</span> rabbit@rabbit1
rabbitmqctl start_app
<span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三个同理</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> myrabbit3 <span class="token function">bash</span>
rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl join_cluster <span class="token parameter variable">--ram</span> rabbit@rabbit1
rabbitmqctl start_app
<span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们访问对应的网址 用默认账号 guest 密码guest登陆</p><figure><img src="`+Wn+'" alt="image-20211229233609159" tabindex="0" loading="lazy"><figcaption>image-20211229233609159</figcaption></figure><p>可以看到集群搭建好了（记得要在admin处新建你的用户并把guest删掉 不然分分钟变成肉鸡）</p><h2 id="镜像集群" tabindex="-1"><a class="header-anchor" href="#镜像集群" aria-hidden="true">#</a> 镜像集群</h2>',16),Ds={href:"https://www.bilibili.com/video/BV1dE411K7MG?p=20",target:"_blank",rel:"noopener noreferrer"},Fs=a(`<p>看看这个视频吧 我目前用不太上 先过了</p><h3 id="springboot连接集群" tabindex="-1"><a class="header-anchor" href="#springboot连接集群" aria-hidden="true">#</a> SpringBoot连接集群</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
<span class="token comment">#    host: 你的IP</span>
<span class="token comment">#    port: 端口</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> amayakite
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456789</span>
    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /
    <span class="token key atrule">addresses</span><span class="token punctuation">:</span> 你的IP<span class="token punctuation">:</span>端口

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后还有一些高并发 集群相关的 等到学完Spring Cloud再说了</p>`,4);function As(Hs,Us){const t=o("ExternalLinkIcon");return c(),i("div",null,[Jn,n("p",null,[n("a",$n,[s("https://www.rabbitmq.com/"),e(t)])]),Zn,n("p",null,[n("a",ns,[s("https://www.rabbitmq.com/download.html"),e(t)])]),ss,n("p",null,[s("可以在官网看到入门案例"),n("a",as,[s("https://www.rabbitmq.com/getstarted.html"),e(t)])]),ts,es,ps,os,cs,is,ls,us,rs,ks,ds,n("p",null,[n("a",ms,[s("https://www.bilibili.com/video/BV1dX4y1V73G?p=26&spm_id_from=pageDriver"),e(t)])]),bs,vs,gs,hs,fs,ys,ws,qs,xs,_s,Ss,Ms,Qs,Bs,Rs,n("p",null,[s("前置步骤 先创建一个交换机 及其对应的队列 命名规范应该为 dead_xxx_xxx，队列同理 应该为 "),n("a",Cs,[s("dead.com.xxx.xxx"),e(t)])]),js,n("p",null,[s("然后这里面可以调整内存的分配 具体这里就不说了 可以看这个视频"),n("a",Ts,[s("https://www.bilibili.com/video/BV1dX4y1V73G?p=34&spm_id_from=pageDriver"),e(t)])]),Is,n("p",null,[s("普通搭建看视频即可"),n("a",Es,[s("https://www.bilibili.com/video/BV1dX4y1V73G?p=35&spm_id_from=pageDriver"),e(t)])]),Os,zs,n("p",null,[s("看的教程是"),n("a",Ps,[s("https://www.cnblogs.com/vipstone/p/9362388.html"),e(t)])]),Ns,n("p",null,[n("a",Ds,[s("https://www.bilibili.com/video/BV1dE411K7MG?p=20"),e(t)])]),Fs])}const Vs=p(Yn,[["render",As],["__file","06-RabbitMQ.html.vue"]]);export{Vs as default};
