const e=JSON.parse('{"key":"v-9c19a09a","path":"/JavaLang/JavaSE/13-%E9%9B%86%E5%90%88.html","title":"13-集合","lang":"zh-CN","frontmatter":{"title":"13-集合","date":"2021-11-05T17:35:33.000Z","category":"JavaSE","tag":["Java","JavaSE","Set","Map","List"],"description":"关于数组 好吧，在开始之前，得先了解一些东西，首先回顾一下之前常用的数组，想想他有什么不足的地方... emm大概有以下几点主要的，会让工作比较难受的： 数组的长度开始时必须指定，而且一指定就无法修改其值 保存的必须为同一类型的元素 使用数组进行增加元素比较麻烦 class Face { public static void main(String[] args) { int[] arr = {1, 2, 3}; //这时候想加个4... //目前赋值较为便捷的的方法是： int[] arr2 = new int[arr.length + 1]; System.arraycopy(arr, 0, arr2, 0, arr.length); arr2[3] = 4; arr = arr2; //草，这里多少行代码了都 } }","head":[["meta",{"property":"og:url","content":"http://www.amayakite.github.io/JavaLang/JavaSE/13-%E9%9B%86%E5%90%88.html"}],["meta",{"property":"og:site_name","content":"Amayakite Blogs"}],["meta",{"property":"og:title","content":"13-集合"}],["meta",{"property":"og:description","content":"关于数组 好吧，在开始之前，得先了解一些东西，首先回顾一下之前常用的数组，想想他有什么不足的地方... emm大概有以下几点主要的，会让工作比较难受的： 数组的长度开始时必须指定，而且一指定就无法修改其值 保存的必须为同一类型的元素 使用数组进行增加元素比较麻烦 class Face { public static void main(String[] args) { int[] arr = {1, 2, 3}; //这时候想加个4... //目前赋值较为便捷的的方法是： int[] arr2 = new int[arr.length + 1]; System.arraycopy(arr, 0, arr2, 0, arr.length); arr2[3] = 4; arr = arr2; //草，这里多少行代码了都 } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-17T15:14:40.000Z"}],["meta",{"property":"article:author","content":"Amayakite"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaSE"}],["meta",{"property":"article:tag","content":"Set"}],["meta",{"property":"article:tag","content":"Map"}],["meta",{"property":"article:tag","content":"List"}],["meta",{"property":"article:published_time","content":"2021-11-05T17:35:33.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-17T15:14:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"13-集合\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-05T17:35:33.000Z\\",\\"dateModified\\":\\"2023-06-17T15:14:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amayakite\\",\\"url\\":\\"https://github.com/Amayakite\\"}]}"]]},"headers":[{"level":2,"title":"关于数组","slug":"关于数组","link":"#关于数组","children":[]},{"level":2,"title":"集合的简介","slug":"集合的简介","link":"#集合的简介","children":[]},{"level":2,"title":"框架体系图","slug":"框架体系图","link":"#框架体系图","children":[{"level":3,"title":"Collection接口的子类构造图(单列集合-value)","slug":"collection接口的子类构造图-单列集合-value","link":"#collection接口的子类构造图-单列集合-value","children":[]},{"level":3,"title":"Map接口的构造图（双列集合-key-value）","slug":"map接口的构造图-双列集合-key-value","link":"#map接口的构造图-双列集合-key-value","children":[]}]},{"level":2,"title":"Collection接口的概述","slug":"collection接口的概述","link":"#collection接口的概述","children":[{"level":3,"title":"Collection的特点","slug":"collection的特点","link":"#collection的特点","children":[]},{"level":3,"title":"Collection接口的常用方法","slug":"collection接口的常用方法","link":"#collection接口的常用方法","children":[]},{"level":3,"title":"Collection接口遍历元素的方式-Iterator(迭代器)","slug":"collection接口遍历元素的方式-iterator-迭代器","link":"#collection接口遍历元素的方式-iterator-迭代器","children":[]},{"level":3,"title":"Iterator接口的方法","slug":"iterator接口的方法","link":"#iterator接口的方法","children":[]},{"level":3,"title":"Collection接口遍历元素的方式-增强for循环","slug":"collection接口遍历元素的方式-增强for循环","link":"#collection接口遍历元素的方式-增强for循环","children":[]}]},{"level":2,"title":"Collection接口的子接口：List实现类","slug":"collection接口的子接口-list实现类","link":"#collection接口的子接口-list实现类","children":[{"level":3,"title":"List的基本介绍","slug":"list的基本介绍","link":"#list的基本介绍","children":[]},{"level":3,"title":"List中额外的方法","slug":"list中额外的方法","link":"#list中额外的方法","children":[]}]},{"level":2,"title":"ArrayList","slug":"arraylist","link":"#arraylist","children":[{"level":3,"title":"ArrayList注意事项","slug":"arraylist注意事项","link":"#arraylist注意事项","children":[]},{"level":3,"title":"ArrayList的底层机制和源码分析(重点)","slug":"arraylist的底层机制和源码分析-重点","link":"#arraylist的底层机制和源码分析-重点","children":[]}]},{"level":2,"title":"Vector","slug":"vector","link":"#vector","children":[]},{"level":2,"title":"Vector底层结构和ArrayList的比较","slug":"vector底层结构和arraylist的比较","link":"#vector底层结构和arraylist的比较","children":[]},{"level":2,"title":"LinkedList","slug":"linkedlist","link":"#linkedlist","children":[{"level":3,"title":"底层结构","slug":"底层结构","link":"#底层结构","children":[]},{"level":3,"title":"LinkedList底层结构","slug":"linkedlist底层结构","link":"#linkedlist底层结构","children":[]}]},{"level":2,"title":"ArrayList和LinkedList的比较","slug":"arraylist和linkedlist的比较","link":"#arraylist和linkedlist的比较","children":[]},{"level":2,"title":"Collection接口的子接口：Set实现类","slug":"collection接口的子接口-set实现类","link":"#collection接口的子接口-set实现类","children":[{"level":3,"title":"基本介绍","slug":"基本介绍-1","link":"#基本介绍-1","children":[]}]},{"level":2,"title":"HashSet","slug":"hashset","link":"#hashset","children":[{"level":3,"title":"基本介绍","slug":"基本介绍-2","link":"#基本介绍-2","children":[]},{"level":3,"title":"HashSet底层机制","slug":"hashset底层机制","link":"#hashset底层机制","children":[]}]},{"level":2,"title":"HashSet添加元素的底层机制","slug":"hashset添加元素的底层机制","link":"#hashset添加元素的底层机制","children":[{"level":3,"title":"空的HashSet添加元素的流程","slug":"空的hashset添加元素的流程","link":"#空的hashset添加元素的流程","children":[]},{"level":3,"title":"添加了元素的HashSet继续添加第二个不同的元素","slug":"添加了元素的hashset继续添加第二个不同的元素","link":"#添加了元素的hashset继续添加第二个不同的元素","children":[]},{"level":3,"title":"添加了元素的HashSet继续添加一个相同的元素","slug":"添加了元素的hashset继续添加一个相同的元素","link":"#添加了元素的hashset继续添加一个相同的元素","children":[]},{"level":3,"title":"总结-LinkedList的添加机制","slug":"总结-linkedlist的添加机制","link":"#总结-linkedlist的添加机制","children":[]}]},{"level":2,"title":"LinkedHashSet","slug":"linkedhashset","link":"#linkedhashset","children":[{"level":3,"title":"LinkedHashSet全面说明","slug":"linkedhashset全面说明","link":"#linkedhashset全面说明","children":[]}]},{"level":2,"title":"TreeSet","slug":"treeset","link":"#treeset","children":[{"level":3,"title":"基本介绍","slug":"基本介绍-3","link":"#基本介绍-3","children":[]}]},{"level":2,"title":"Map接口的特点","slug":"map接口的特点","link":"#map接口的特点","children":[{"level":3,"title":"Map存放数据-Node和Entry","slug":"map存放数据-node和entry","link":"#map存放数据-node和entry","children":[]},{"level":3,"title":"Map接口的常用方法","slug":"map接口的常用方法","link":"#map接口的常用方法","children":[]},{"level":3,"title":"Map接口遍历方法","slug":"map接口遍历方法","link":"#map接口遍历方法","children":[]}]},{"level":2,"title":"HashMap","slug":"hashmap","link":"#hashmap","children":[{"level":3,"title":"Put替换解析","slug":"put替换解析","link":"#put替换解析","children":[]},{"level":3,"title":"HashMap低层机制及源码剖析","slug":"hashmap低层机制及源码剖析","link":"#hashmap低层机制及源码剖析","children":[]}]},{"level":2,"title":"HashTable","slug":"hashtable","link":"#hashtable","children":[]},{"level":2,"title":"HashMap和HashTable的对比","slug":"hashmap和hashtable的对比","link":"#hashmap和hashtable的对比","children":[]},{"level":2,"title":"Properties","slug":"properties","link":"#properties","children":[]},{"level":2,"title":"TreeMap","slug":"treemap","link":"#treemap","children":[]}],"git":{"createdTime":1687006308000,"updatedTime":1687014880000,"contributors":[{"name":"Amayakite","email":"amayakite@qq.com","commits":2}]},"readingTime":{"minutes":57.59,"words":17277},"filePathRelative":"JavaLang/JavaSE/13-集合.md","localizedDate":"2021年11月5日","excerpt":"<h2> 关于数组</h2>\\n<p>好吧，在开始之前，得先了解一些东西，首先回顾一下之前常用的数组，想想他有什么不足的地方...</p>\\n<p>emm大概有以下几点主要的，会让工作比较难受的：</p>\\n<ol>\\n<li>\\n<p>数组的长度开始时必须指定，而且一指定就无法修改其值</p>\\n</li>\\n<li>\\n<p>保存的必须为同一类型的元素</p>\\n</li>\\n<li>\\n<p>使用数组进行增加元素比较麻烦</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Face</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> arr <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//这时候想加个4...</span>\\n<span class=\\"token comment\\">//目前赋值较为便捷的的方法是：</span>\\n        <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> arr2 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span>arr<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">arraycopy</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> arr2<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        arr2<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">;</span>\\n        arr <span class=\\"token operator\\">=</span> arr2<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//草，这里多少行代码了都</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ol>","autoDesc":true}');export{e as data};
