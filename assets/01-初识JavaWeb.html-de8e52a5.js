import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as d,c as o,a as t,b as e,d as n,e as s}from"./app-2d4b26c1.js";const p="/images/JavaEE/01-JavaWeb/image-20211201131810873.png",c="/images/JavaEE/01-JavaWeb/image-20211201132814923.png",r="/images/JavaEE/01-JavaWeb/image-20211201133526546.png",u="/images/JavaEE/01-JavaWeb/image-20211201144410171.png",g="/images/JavaEE/01-JavaWeb/image-20211201144552317.png",m="/images/JavaEE/01-JavaWeb/image-20211201145309735.png",b="/images/JavaEE/01-JavaWeb/image-20211201150237458.png",v="/images/JavaEE/01-JavaWeb/image-20211201150302986.png",h="/images/JavaEE/01-JavaWeb/image-20211201150522519.png",f="/images/JavaEE/01-JavaWeb/image-20211201150659131.png",k="/images/JavaEE/01-JavaWeb/image-20211201152650445.png",x="/images/JavaEE/01-JavaWeb/image-20211201152822485.png",y="/images/JavaEE/01-JavaWeb/image-20211201151931839.png",_="/images/JavaEE/01-JavaWeb/image-20211201152144151.png",T="/images/JavaEE/01-JavaWeb/image-20211201160439772.png",E="/images/JavaEE/01-JavaWeb/image-20211201160935278.png",w="/images/JavaEE/01-JavaWeb/image-20211201161333604.png",S={},q=t("h2",{id:"开始前",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#开始前","aria-hidden":"true"},"#"),e(" 开始前")],-1),J={href:"https://www.bilibili.com/video/BV1E4411H73v",target:"_blank",rel:"noopener noreferrer"},P=s('<p>​ 现在的学习计划：Javaweb一条龙，然后就是算法和linux之类杂七杂八的使用，之后就去面试了</p><p>​ 如果你看到了这篇文章，我建议你从JavaWeb开始学起，了解这玩意，然后再去玩Spring Boot（那玩意不用代码的...）如果说你直接跳过了这玩意，再去学</p><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><p>web开发：</p><ul><li>WEB(World Wide Web) 网页的意思，之前在基础部分使用socket的时候也有带过一遍，现在来说说它吧</li><li>静态Web <ul><li>HTML、CSS</li><li>提供给所有人看的数据始终不会发生变化</li></ul></li><li>动态Web <ul><li>HTML、CSS、JavaScript</li><li>现在百分之九十九的网站都是动态web，例如淘宝、百度、腾讯、Google、GitHub等</li><li>提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的低点看到的信息各不相同</li><li>技术栈：Servlet/JSP（Java）、ASP（微软Microsoft）、PHP等</li></ul></li></ul><p><strong>在Java中，动态WEB资源开发的技术统称为JavaWeb</strong></p><p>如果你是一名阅读者，想要学习JavaWEB，我建议你在正式开始学习前先学习如下内容</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 网络的基础知识：端口、协议等</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> HTML</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> CSS</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> JavaScript</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> Vue、React、<strong>JQuery</strong></label></li></ul><p>Vue和React可以先不学(迟早要学)，但是JQuery是必须要学的，当然还有nodejs如果感兴趣的话可以了解下（还有webpack 如果上面这几个都熟手了甚至可以去当一个前端开发...）</p><h2 id="web应用程序的概念" tabindex="-1"><a class="header-anchor" href="#web应用程序的概念" aria-hidden="true">#</a> Web应用程序的概念</h2><p>Web应用程序：可以提供浏览器访问程序</p><ul><li><code>a.html</code>，<code>b.html</code>等多个web资源，这些web资源都可以被外界访问，对外界提供服务</li><li>就目前来说，能访问到的任何资源，包括这个Blog(目前是使用GitHub Pages搭建，托管在GitHub上)，都存在于这个世界上的某一个角落的计算机上</li><li>URL：统一资源定位符</li><li>这些统一的Web资源会被放在同一个文件夹下，这就是一个Web应用程序，在Java中，它依赖于Tomcat：服务器</li><li>一个Web应用由多部分组成 <ul><li>HTML、CSS、JS</li><li>JSP、Servlet</li><li>Java程序</li><li>Jar包</li><li>配置文件，数据文件（Properties、XML、JSON）</li></ul></li></ul><p>Web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理</p><h3 id="静态web" tabindex="-1"><a class="header-anchor" href="#静态web" aria-hidden="true">#</a> 静态Web</h3><ul><li><code>*.htm|html</code>这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取</li></ul><figure><img src="'+p+'" alt="image-20211201131810873" tabindex="0" loading="lazy"><figcaption>image-20211201131810873</figcaption></figure><p>静态Web存在的缺点：</p><ul><li>Web页面无法动态更新数据（例如用户的信息）</li><li>所有用户看到的都是同一个页面 <ul><li>轮播图、点击特效、页面跳转等都是JavaScript或者VBScript(微软家的，现在没几个人用)实现的伪动态</li></ul></li><li>无法和数据库交互（数据无法持久化，用户无法交互）</li></ul><h3 id="动态web" tabindex="-1"><a class="header-anchor" href="#动态web" aria-hidden="true">#</a> 动态Web</h3><p>页面会动态展示</p><ul><li>Web的页面展示的效果因人而异（每个用户看到的可能都是不同的页面）</li></ul><p>目前来说，可以这样理解（之后Spring Boot的时候会不一样）</p><figure><img src="'+c+'" alt="image-20211201132814923" tabindex="0" loading="lazy"><figcaption>image-20211201132814923</figcaption></figure><p>缺点</p><ul><li>假如服务器的动态Web资源出现了错误（服务器崩了）</li><li>需要重新编写后台程序（或者重启后台程序）让用户能够继续访问 <ul><li>在早期互联网的时候，这叫停机维护</li></ul></li></ul><p>有点</p><ul><li>Web页面可以动态更新，所有用户看到的都不一定是同一个页面</li><li>可以与数据库交互，用户数据能够持久化(比如用户注册后，相关信息存储到数据库中)</li></ul><figure><img src="'+r+'" alt="image-20211201133526546" tabindex="0" loading="lazy"><figcaption>image-20211201133526546</figcaption></figure><h2 id="认识web服务器" tabindex="-1"><a class="header-anchor" href="#认识web服务器" aria-hidden="true">#</a> 认识Web服务器</h2><p>就目前来说，实现Web服务器的方式非常多</p><p>几乎每种语言都有各自的实现方法</p><p>市面上常见的有：</p>',32),W=t("p",null,"ASP",-1),A=t("li",null,[t("p",null,"微软家的，国内最早流行的就是它")],-1),C=t("li",null,[t("p",null,"特点是在HTML嵌入VB脚本，ASP+COM")],-1),H=t("li",null,[t("p",null,"在ASP开发中，基本一个页面要像这样嵌入代码，每个页面都有几千行的业务逻辑代码，页面极其混乱")],-1),R=t("li",null,[t("p",null,"维护成本极高")],-1),I={href:"http://ASp.net",target:"_blank",rel:"noopener noreferrer"},L=s(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
        &lt;%
           System.out.writeLine(&quot;hello world&quot;);
           &gt;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),M=s("<li><p>PHP</p><ul><li>PHP开发速度很快，功能很强大，跨平台，代码很简单</li><li>无法承载大访问量的情况（高并发情况下效率堪忧） <ul><li>有局限性</li></ul></li><li>只适用于中小型网站：但恰恰国内的大部分网站都是中小型的。。。所以比较多人用</li><li>常见的人人都能用的大概有：WordPress（挺好用的Blog网站）</li></ul></li><li><p>JSP/Servlet</p><ul><li>Sun公司（目前被甲骨文收购了）主推的B/S架构 <ul><li>B/S:浏览器和服务器</li><li>C/S:客户端和服务器</li></ul></li><li>JSP的本质是Servlet</li><li>基于Java语言（恰好所有的大公司，或者一些开源的组件，都使用Java写的）</li><li>可以承载三高带来的影响（高并发。高可用。高性能）</li><li>语法很像ASP--&gt;ASP可以转JSP，加强市场强度</li></ul></li><li><p>NodeJs</p><ul><li>一般是搭配egg(Koa)来完成搭建WEB服务器</li><li>好处是JavaScript一条龙</li><li>坏处是：JavaScript是一个单线程的语言（虽然效率较高）</li></ul></li><li><p>还有很多，例如Python的Django、Flask等，这类不多做讲解了</p></li>",4),U=t("h2",{id:"web服务器",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#web服务器","aria-hidden":"true"},"#"),e(" Web服务器")],-1),B=t("p",null,"服务器是一种被动的操作，用来处理的一些请求和给用户相应一些信息",-1),O=t("h3",{id:"iis",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#iis","aria-hidden":"true"},"#"),e(" IIS")],-1),z={href:"http://xn--ASP-vs9dj4ujs1h.net",target:"_blank",rel:"noopener noreferrer"},N=t("h3",{id:"tomcat",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#tomcat","aria-hidden":"true"},"#"),e(" TomCat")],-1),j={href:"https://baike.baidu.com/item/tomcat/255751?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},G={href:"https://baike.baidu.com/item/Apache/6265",target:"_blank",rel:"noopener noreferrer"},D=t("strong",null,"免费(免费的才是最好的)",-1),F={href:"https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},V=t("strong",null,"对于一个Java初初学WEB的人来说，可以这样认为，当在一台机器上配置好Apache 服务器",-1),K={href:"https://baike.baidu.com/item/HTML",target:"_blank",rel:"noopener noreferrer"},X={href:"https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E9%80%9A%E7%94%A8%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/6805073",target:"_blank",rel:"noopener noreferrer"},$={href:"https://baike.baidu.com/item/IIS",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://baike.baidu.com/item/HTML",target:"_blank",rel:"noopener noreferrer"},Y=t("p",null,"工作3~5年之后，可以尝试手写一个TomCat",-1),Z=t("p",null,"ps：手写一个这玩意应该不难",-1),tt=t("h3",{id:"tomcat的基本使用",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#tomcat的基本使用","aria-hidden":"true"},"#"),e(" TomCat的基本使用")],-1),et=t("h3",{id:"下载",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#下载","aria-hidden":"true"},"#"),e(" 下载")],-1),at={href:"https://tomcat.apache.org/",target:"_blank",rel:"noopener noreferrer"},nt=s('<p>可以看到自己应该选择哪种版本，这里我是JDK1.8 所以选择10.0.x版本，当然，一般也可以选9，都差不多</p><figure><img src="'+u+'" alt="image-20211201144410171" tabindex="0" loading="lazy"><figcaption>image-20211201144410171</figcaption></figure><p>然后根据自己的系统(windows x64 or x86)下载对应的压缩包即可，Linux下载tar.gz即可</p><figure><img src="'+g+'" alt="image-20211201144552317" tabindex="0" loading="lazy"><figcaption>image-20211201144552317</figcaption></figure><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><p>在上一步中，下载到了一个压缩包，直接解压，得到这些文件：</p><figure><img src="'+m+`" alt="image-20211201145309735" tabindex="0" loading="lazy"><figcaption>image-20211201145309735</figcaption></figure><p>接下来尝试启动和关闭TomCat</p><p>先进入到bin目录，然后试图启动，发现了如下问题：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token function">PS</span> C:\\Users\\U\\Desktop\\apache-tomcat-10<span class="token punctuation">.</span>0<span class="token punctuation">.</span>13\\bin&gt; <span class="token punctuation">.</span>\\startup<span class="token punctuation">.</span>bat

Neither the JAVA_HOME nor the JRE_HOME environment variable is defined
At least one of these environment variable is needed to run this program
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方法：打开文本编辑器，把<code>startup.bat</code>拉进去，在最前面加上</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>C:<span class="token punctuation">\\</span>Program Files<span class="token punctuation">\\</span>Java<span class="token punctuation">\\</span>jdk-1.8.0_60       <span class="token comment">#（本机jdk安装目录）</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span>C:<span class="token punctuation">\\</span>Program Files<span class="token punctuation">\\</span>Java<span class="token punctuation">\\</span>jdk-1.8.0_60<span class="token punctuation">\\</span>jre         <span class="token comment">#（本机jre安装目录）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+b+'" alt="image-20211201150237458" tabindex="0" loading="lazy"><figcaption>image-20211201150237458</figcaption></figure><p>大概这样即可，然后再次重试启动：</p><figure><img src="'+v+'" alt="image-20211201150302986" tabindex="0" loading="lazy"><figcaption>image-20211201150302986</figcaption></figure><p>发现启动时启动了，但是出现了乱码的情况</p>',16),st={href:"https://blog.csdn.net/qq_25775675/article/details/104839569",target:"_blank",rel:"noopener noreferrer"},lt=s(`<p>修改<code>conf</code>文件下的<code>logging.properties</code>文件,将控制台输出的编码修改为GBK：</p><p>当然，这一步是可选的，等下到IEDA上跑就不会出现这样的问题了（改了反而可能会出问题）</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">java.util.logging.ConsoleHandler.encoding</span> <span class="token punctuation">=</span> <span class="token value attr-value">GBK</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>完美解决</p><figure><img src="`+h+'" alt="image-20211201150522519" tabindex="0" loading="lazy"><figcaption>image-20211201150522519</figcaption></figure><p>目前来说，我们接触到的脚本就两个：</p><figure><img src="'+f+'" alt="image-20211201150659131" tabindex="0" loading="lazy"><figcaption>image-20211201150659131</figcaption></figure><p>关闭手动关跟通过脚本关都可（一般直接关即可，不需要那个关闭脚本）</p>',8),it={href:"http://localhost:8080/",target:"_blank",rel:"noopener noreferrer"},dt=s('<p>它的相关端口信息（为什么能通过8080访问到）都是配置在<code>conf</code>目录下的<code>server.xml</code>XML文件中</p><p>可以通过更该这个<code>port=&quot;8080&quot;</code>中的8080改成想要的端口，如：80</p><p>修改完毕后需要重启服务</p><figure><img src="'+k+'" alt="image-20211201152650445" tabindex="0" loading="lazy"><figcaption>image-20211201152650445</figcaption></figure><p>更该主机IP地址同理：改这个字段即可</p><figure><img src="'+x+'" alt="image-20211201152822485" tabindex="0" loading="lazy"><figcaption>image-20211201152822485</figcaption></figure><blockquote><p>小TIPs：如果将这个Localhost更换成例如：<code>www.a.com</code>试图直接访问是访问不到的，因为其默认是将服务开启到本机上（本质还是：127.0.0.1:8080）</p><p>所以可以通过修改系统host的方式来将其重定向<code>127.0.0.1 www.a.com</code>（域名重定向）</p><p>当然，如果是在一台服务器上跑，比如<code>1.1.1.1</code>，并且这里填写的是<code>1.1.1.1</code>那么是可以访问到的</p></blockquote><p>我们访问的localhost:8080的网页文件在<code>webapps/ROOT</code>目录下</p><figure><img src="'+y+'" alt="image-20211201151931839" tabindex="0" loading="lazy"><figcaption>image-20211201151931839</figcaption></figure><p>可以在这个目录下看到一个<code>index.jsp</code>文件，打开后会有种熟悉的感觉：很像React、Vue</p><p>里面很像HTML代码，但是又包含一些特殊的东西：用<code>${}</code>包裹了一些内容，，如果你学过React、Vue之类的，应该对这个玩意不陌生，是一个<strong>模板字符串</strong>，其具体的内容由脚本控制，当视图在上面改动一些东西，刷新页面，也会同步刷新（就像是用XXX CLI那样）</p><figure><img src="'+_+'" alt="image-20211201152144151" tabindex="0" loading="lazy"><figcaption>image-20211201152144151</figcaption></figure><p>例如我替换下原来的Home之类的字段</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav-home<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${tomcatUrl}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav-hosts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${tomcatDocUrl}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>文档<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav-config<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${tomcatDocUrl}config/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>配置文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>刷新网页，发现同步更新了</p><p>接下来可以尝试去配置环境变量等杂七杂八的东西，当然也可以不配置（等下是要到IEDA上跑的）</p><h3 id="尝试发布一个网站" tabindex="-1"><a class="header-anchor" href="#尝试发布一个网站" aria-hidden="true">#</a> 尝试发布一个网站</h3><p>先把root文件夹复制一份到同级目录下，然后随便改个名字，把除了<code>WEB-INF</code>这个文件夹外的所有文件都删了</p><figure><img src="'+T+`" alt="image-20211201160439772" tabindex="0" loading="lazy"><figcaption>image-20211201160439772</figcaption></figure><p>这里我的名字是amayakite，你可以根据自己想的更该</p><p>然后进入<code>WEB-INF</code>目录下，可以看到里面有一个<code>web.xml</code>文件，打开</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token comment">&lt;!--
这里是一些注释信息，可以删了
--&gt;</span>
<span class="token comment">&lt;!--
下面的webapp是一些注释头文件，不能删
--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://jakarta.ee/xml/ns/jakartaee<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://jakarta.ee/xml/ns/jakartaee
                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5.0<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">metadata-complete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--
 下面这两个 一个是名字 一个是 注释 可以删掉或自由更改
    --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">&gt;</span></span>Welcome to Tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>
     Welcome to Tomcat
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将你之前通过任意前端技术写的东西（如：Jquery Vue React等写出来的项目的最终文件(build文件，JQuery直接上文件即可)）丢到<code>amayakite</code>(你起的名字的文件夹下)，需要确保至少有一个index.html文件（我这里是用VuePerss打包后的文件）</p><p>如果说你不会jq、vue、react之类的话，...就写个index.html，然后里面随便写点内容吧</p><figure><img src="`+E+'" alt="image-20211201160935278" tabindex="0" loading="lazy"><figcaption>image-20211201160935278</figcaption></figure><p>然后在启动Tomcat，在浏览器中输入<code>域名|ip地址:端口/文件夹名</code>即可访问，这样访问的话默认是访问该文件夹下的index.html或index,jsp，也可以手动输入要访问哪个文件</p><p>可选操作：将原先的root文件夹删掉，把这个文件夹名字改成<code>ROOT</code>即可在访问的时候直接<code>域名|ip地址:端口</code>访问</p><blockquote><p>接下来尝试访问 完美！</p></blockquote><figure><img src="'+w+`" alt="image-20211201161333604" tabindex="0" loading="lazy"><figcaption>image-20211201161333604</figcaption></figure><h4 id="tomcat的webapps目录结构" tabindex="-1"><a class="header-anchor" href="#tomcat的webapps目录结构" aria-hidden="true">#</a> Tomcat的webapps目录结构</h4><p>一个正常的通过Tomcat服务器建设的网站大概是长这样子的：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>-- webapps: Tomcat服务器的WEB目录
 <span class="token list punctuation">-</span> ROOT
 <span class="token list punctuation">-</span> 其他文件夹
 <span class="token list punctuation">-</span> amayakite：网站的目录名
  <span class="token list punctuation">-</span> WEB_INF
   <span class="token list punctuation">-</span> classes: Java程序
   <span class="token list punctuation">-</span> lib：web应用所依赖的jar包
   <span class="token list punctuation">-</span> web.xml：网站的配置文件
       <span class="token list punctuation">-</span> index.html  网站的首页
       <span class="token list punctuation">-</span> static
         -css
          -style.css
         -js
         -img
         -等其他的静态资源文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="扩展-高频率面试题-网站是如何进行访问的" tabindex="-1"><a class="header-anchor" href="#扩展-高频率面试题-网站是如何进行访问的" aria-hidden="true">#</a> 扩展-高频率面试题-网站是如何进行访问的</h4><p>请谈谈网站是如何进行访问的</p>`,34),ot=t("li",null,[t("p",null,"用户输入一个域名；回车")],-1),pt=t("p",null,"电脑检查本机的HOST配置文件下有没有这个域名映射",-1),ct=t("li",null,[t("p",null,"有：直接返回对应的IP地址"),t("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[t("pre",{class:"language-markdown"},[t("code",null,`127.0.0.1 www.a.com
`)]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"})])])],-1),rt={href:"http://xn--www-eo8e.baidu.com",target:"_blank",rel:"noopener noreferrer"},ut=s(`<h2 id="http的基本概念" tabindex="-1"><a class="header-anchor" href="#http的基本概念" aria-hidden="true">#</a> HTTP的基本概念</h2><p>在继续之后的学习之前，先来了解下什么是HTTP吧</p><p>​ HTTP(超文本传输协议)是一个简单的请求-响应协议，它通常<strong>运行在TCP之上</strong></p><ul><li>文本：html、字符串......</li><li>超文本：图片、音乐、视频、定位、地图......</li><li>HTTP协议的默认端口为80</li></ul><p>HTTPS：更安全的HTTP协议</p><ul><li>默认端口为443</li></ul><h3 id="http的两个时代" tabindex="-1"><a class="header-anchor" href="#http的两个时代" aria-hidden="true">#</a> HTTP的两个时代</h3><ul><li>http1.0 <ul><li>HTTP/1.0</li><li>客户端可以与web服务端连接后，只能获得<strong>一个</strong>web资源，然后断开连接</li></ul></li><li>http2.0 <ul><li>HTTP/1.1</li><li>客户端与web服务端连接后，可以获得<strong>多个</strong>web资源，然后断开连接</li><li>2.0 头部压缩，采用二进制帧进行传输，解决了1.1的队头阻塞问题</li></ul></li></ul><h3 id="http请求-request" tabindex="-1"><a class="header-anchor" href="#http请求-request" aria-hidden="true">#</a> HTTP请求（Request）</h3><p>客户端发送请求给服务器</p><p>拿访问一次百度举例子吧</p><p>当你打开浏览器，输入www.baidu.com之后，实际上你的浏览器向百度发送了如下数据</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>Request URL: https://www.baidu.com/ 请求地址
Request Method: GET 请求方式
Status Code: 200 OK  状态码
Remote Address: 36.152.44.96:443 远程地址
Referrer Policy: unsafe-url 或者 no-referrer-when-downgrade 一个协议，代表能访问到哪些东西
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以及一个请求头 这个请求头不多做讲解了，实际上用的时候直接往里面添加一些别的内容即可，比如JWT生成的COOKIE，或者做爬虫的使用借用下这里面的User-Agent</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,<span class="token italic"><span class="token punctuation">*</span><span class="token content">/</span><span class="token punctuation">*</span></span>;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9 这里设置的是语言
Cache-Control: max-age=0
Connection: keep-alive
Cookie: COOKIE 信息
sec-ch-ua: &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;96&quot;, &quot;Google Chrome&quot;;v=&quot;96&quot;
sec-ch-ua-mobile: ?0
sec-ch-ua-platform: &quot;Windows&quot;
Sec-Fetch-Dest: document
Sec-Fetch-Mode: navigate
Sec-Fetch-Site: same-origin
Sec-Fetch-User: ?1
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这之中可以细分下：</p><h4 id="请求行" tabindex="-1"><a class="header-anchor" href="#请求行" aria-hidden="true">#</a> 请求行</h4><ul><li>上方请求体中的请求方式：Get</li><li>请求方式大概有：get/post/head/delete/put/tract.....常用的就两个（其他的都是今年来新生的） <ul><li>get:请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据，不安全，但高效(当然使用ajax之类的请求是不会在浏览器的url显示数据的)</li><li>post:请求能够携带的参数没有限制，大小没有限制，不会在浏览器URL地址显示内容，安全但不高效</li><li>当然，高不高效对于现在来说已经体验不到什么了，一般来说，get请求数据，post提交数据，这样用即可</li></ul></li></ul><h4 id="请求头" tabindex="-1"><a class="header-anchor" href="#请求头" aria-hidden="true">#</a> 请求头</h4><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>Accept: 告诉服务器这个浏览器所支持的格式
Accept-Encoding: gzip, deflate,告诉服务器 支持哪种编码格式 
Accept-Language: zh-CN,zh;q=0.9 告诉服务器 浏览器的语言环境
Cache-Control: max-age=0 告诉服务器 缓存控制
Connection: keep-alive 告诉服务器，请求完成是断开还是保持连接
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="http相应-response" tabindex="-1"><a class="header-anchor" href="#http相应-response" aria-hidden="true">#</a> HTTP相应(Response)</h3><p>例如请求百度的响应</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>Cache-Control: private 缓存控制
Connection: keep-alive 连接：保持连接(保持活着)
Content-Encoding: gzip 编码：gzip
Content-Type: text/html;charset=utf-8 响应数据：html，utf8编码

<span class="token title important"><span class="token punctuation">#</span> 实际上就上面那四个是最有用的</span>

Date: Wed, 01 Dec 2021 08:42:34 GMT 响应时间
Expires: Wed, 01 Dec 2021 08:42:34 GMT 同上
Server: BWS/1.1 浏览器的服务信息
Set-Cookie: BDSVRTM=299; path=/ COOKIE地址
Set-Cookie: BD_HOME=1; path=/
Set-Cookie: COOKIE的内容
Strict-Transport-Security: max-age=172800 一些安全设置
Transfer-Encoding: chunked
X-Frame-Options: sameorigin
X-Ua-Compatible: IE=Edge,chrome=1  浏览器的响应兼容性
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>响应体</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>Accept: 告诉浏览器，它的数据类型
Accept-Encoding：支持哪种编码格式
Accept-Language：语言环境
Cache-Control：缓存控制
Conection：告诉浏览器，请求完成是断开连接还是保持连接
HOST：主机
Refresh：告诉客户端，多就刷新一次
Location：让网页重新定位
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。<br> 201 （已创建） 请求成功并且服务器创建了新的资源。<br> 202 （已接受） 服务器已接受请求，但尚未处理。<br> 203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。<br> 204 （无内容） 服务器成功处理了请求，但没有返回任何内容。<br> 205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。<br> 206 （部分内容） 服务器成功处理了部分 GET 请求。</p><p><strong><em>*http状态返回代码*</em> 3xx （重定向）</strong><br> 表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</p><p><strong>http状态返回代码</strong> 代码 说明<br> 300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。<br> 301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。<br> 302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。<br> 303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</p><p>304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。<br> 305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。<br> 307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p><p><strong><em>*http状态返回代码*</em> 4xx（请求错误）</strong><br> 这些状态代码表示请求可能出错，妨碍了服务器的处理。</p><p><strong>http状态返回代码</strong> 代码 说明<br> 400 （错误请求） 服务器不理解请求的语法。<br> 401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。<br> 403 （禁止） 服务器拒绝请求。<br> 404 （未找到） 服务器找不到请求的网页。<br> 405 （方法禁用） 禁用请求中指定的方法。<br> 406 （不接受） 无法使用请求的内容特性响应请求的网页。<br> 407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。<br> 408 （请求超时） 服务器等候请求时发生超时。<br> 409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。<br> 410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。<br> 411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。<br> 412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。<br> 413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。<br> 414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。<br> 415 （不支持的媒体类型） 请求的格式不受请求页面的支持。<br> 416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。<br> 417 （未满足期望值） 服务器未满足&quot;期望&quot;请求标头字段的要求。</p><p><strong><em>*http状态返回代码*</em> 5xx（服务器错误）</strong><br> 这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p><p><strong>http状态返回代码</strong> 代码 说明<br> 500 （服务器内部错误） 服务器遇到错误，无法完成请求。<br> 501 （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。<br> 502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。<br> 503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。<br> 504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。<br> 505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</p><p>一些常见的<strong>http状态返回代码</strong>为：</p><h2 id="http-状态码分类" tabindex="-1"><a class="header-anchor" href="#http-状态码分类" aria-hidden="true">#</a> HTTP 状态码分类</h2><p>HTTP 状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型。响应分为五类：信息响应(100–199)，成功响应(200–299)，重定向(300–399)，客户端错误(400–499)和服务器错误 (500–599)：常见的有：200/204/304/404/503</p><table><thead><tr><th style="text-align:left;">分类</th><th style="text-align:left;">分类描述</th></tr></thead><tbody><tr><td style="text-align:left;">1**</td><td style="text-align:left;">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td style="text-align:left;">2**</td><td style="text-align:left;">成功，操作被成功接收并处理</td></tr><tr><td style="text-align:left;">3**</td><td style="text-align:left;">重定向，需要进一步的操作以完成请求</td></tr><tr><td style="text-align:left;">4**</td><td style="text-align:left;">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td style="text-align:left;">5**</td><td style="text-align:left;">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><p>HTTP状态码列表:</p><table><thead><tr><th style="text-align:left;">状态码</th><th style="text-align:left;">状态码英文名称</th><th style="text-align:left;">中文描述</th></tr></thead><tbody><tr><td style="text-align:left;">100</td><td style="text-align:left;">Continue</td><td style="text-align:left;">继续。客户端应继续其请求</td></tr><tr><td style="text-align:left;">101</td><td style="text-align:left;">Switching Protocols</td><td style="text-align:left;">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">200</td><td style="text-align:left;">OK</td><td style="text-align:left;">请求成功。一般用于GET与POST请求</td></tr><tr><td style="text-align:left;">201</td><td style="text-align:left;">Created</td><td style="text-align:left;">已创建。成功请求并创建了新的资源</td></tr><tr><td style="text-align:left;">202</td><td style="text-align:left;">Accepted</td><td style="text-align:left;">已接受。已经接受请求，但未处理完成</td></tr><tr><td style="text-align:left;">203</td><td style="text-align:left;">Non-Authoritative Information</td><td style="text-align:left;">非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td style="text-align:left;">204</td><td style="text-align:left;">No Content</td><td style="text-align:left;">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td style="text-align:left;">205</td><td style="text-align:left;">Reset Content</td><td style="text-align:left;">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td style="text-align:left;">206</td><td style="text-align:left;">Partial Content</td><td style="text-align:left;">部分内容。服务器成功处理了部分GET请求</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">300</td><td style="text-align:left;">Multiple Choices</td><td style="text-align:left;">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td style="text-align:left;">301</td><td style="text-align:left;">Moved Permanently</td><td style="text-align:left;">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td style="text-align:left;">302</td><td style="text-align:left;">Found</td><td style="text-align:left;">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td style="text-align:left;">303</td><td style="text-align:left;">See Other</td><td style="text-align:left;">查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td style="text-align:left;">304</td><td style="text-align:left;">Not Modified</td><td style="text-align:left;">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td style="text-align:left;">305</td><td style="text-align:left;">Use Proxy</td><td style="text-align:left;">使用代理。所请求的资源必须通过代理访问</td></tr><tr><td style="text-align:left;">306</td><td style="text-align:left;">Unused</td><td style="text-align:left;">已经被废弃的HTTP状态码</td></tr><tr><td style="text-align:left;">307</td><td style="text-align:left;">Temporary Redirect</td><td style="text-align:left;">临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">400</td><td style="text-align:left;">Bad Request</td><td style="text-align:left;">客户端请求的语法错误，服务器无法理解</td></tr><tr><td style="text-align:left;">401</td><td style="text-align:left;">Unauthorized</td><td style="text-align:left;">请求要求用户的身份认证</td></tr><tr><td style="text-align:left;">402</td><td style="text-align:left;">Payment Required</td><td style="text-align:left;">保留，将来使用</td></tr><tr><td style="text-align:left;">403</td><td style="text-align:left;">Forbidden</td><td style="text-align:left;">服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td style="text-align:left;">404</td><td style="text-align:left;">Not Found</td><td style="text-align:left;">服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置&quot;您所请求的资源无法找到&quot;的个性页面</td></tr><tr><td style="text-align:left;">405</td><td style="text-align:left;">Method Not Allowed</td><td style="text-align:left;">客户端请求中的方法被禁止</td></tr><tr><td style="text-align:left;">406</td><td style="text-align:left;">Not Acceptable</td><td style="text-align:left;">服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td style="text-align:left;">407</td><td style="text-align:left;">Proxy Authentication Required</td><td style="text-align:left;">请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td style="text-align:left;">408</td><td style="text-align:left;">Request Time-out</td><td style="text-align:left;">服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td style="text-align:left;">409</td><td style="text-align:left;">Conflict</td><td style="text-align:left;">服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td style="text-align:left;">410</td><td style="text-align:left;">Gone</td><td style="text-align:left;">客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td style="text-align:left;">411</td><td style="text-align:left;">Length Required</td><td style="text-align:left;">服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td style="text-align:left;">412</td><td style="text-align:left;">Precondition Failed</td><td style="text-align:left;">客户端请求信息的先决条件错误</td></tr><tr><td style="text-align:left;">413</td><td style="text-align:left;">Request Entity Too Large</td><td style="text-align:left;">由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td style="text-align:left;">414</td><td style="text-align:left;">Request-URI Too Large</td><td style="text-align:left;">请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td style="text-align:left;">415</td><td style="text-align:left;">Unsupported Media Type</td><td style="text-align:left;">服务器无法处理请求附带的媒体格式</td></tr><tr><td style="text-align:left;">416</td><td style="text-align:left;">Requested range not satisfiable</td><td style="text-align:left;">客户端请求的范围无效</td></tr><tr><td style="text-align:left;">417</td><td style="text-align:left;">Expectation Failed</td><td style="text-align:left;">服务器无法满足Expect的请求头信息</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">500</td><td style="text-align:left;">Internal Server Error</td><td style="text-align:left;">服务器内部错误，无法完成请求</td></tr><tr><td style="text-align:left;">501</td><td style="text-align:left;">Not Implemented</td><td style="text-align:left;">服务器不支持请求的功能，无法完成请求</td></tr><tr><td style="text-align:left;">502</td><td style="text-align:left;">Bad Gateway</td><td style="text-align:left;">作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td style="text-align:left;">503</td><td style="text-align:left;">Service Unavailable</td><td style="text-align:left;">由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td style="text-align:left;">504</td><td style="text-align:left;">Gateway Time-out</td><td style="text-align:left;">充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td style="text-align:left;">505</td><td style="text-align:left;">HTTP Version not supported</td><td style="text-align:left;">服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table><h3 id="扩展-面试必问-当你的浏览器中地址栏输入回车的一瞬间到页面能够展示回来-经历了什么" tabindex="-1"><a class="header-anchor" href="#扩展-面试必问-当你的浏览器中地址栏输入回车的一瞬间到页面能够展示回来-经历了什么" aria-hidden="true">#</a> 扩展-面试必问：当你的浏览器中地址栏输入回车的一瞬间到页面能够展示回来，经历了什么？</h3><p>这道题暂时先不说明把。学完JavaWeb应该就明白了，或者回头百度即可</p><p>给个tips：http的底层依旧是TCP/IP</p>`,42);function gt(mt,bt){const a=i("ExternalLinkIcon");return d(),o("div",null,[q,t("p",null,[e("​ 终于将JavaSE的基础部分搞完了，当然那玩意远远不止那些，有空了得取看看老韩的"),t("a",J,[e("算法讲解"),n(a)]),e("，老韩是真的牛逼......现在时间是2021年12月1日13:19:56，期待他以后能出更好的课程")]),P,t("ul",null,[t("li",null,[W,t("ul",null,[A,C,H,R,t("li",null,[t("p",null,[e("在ASP里面，用的是C#（"),t("a",I,[e("ASp.net"),n(a)]),e("）")]),L])])]),M]),U,B,O,t("p",null,[e("微软的，"),t("a",z,[e("可以跑ASP.net"),n(a)]),e(" windows系统中自带")]),N,t("p",null,[e("这玩意应该面向百度编程：上百度查查"),t("a",j,[e("这玩意"),n(a)])]),t("p",null,[e("​ Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由"),t("a",G,[e("Apache"),n(a)]),e("、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且"),D,e("，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为比较流行的Web 应用服务器。")]),t("p",null,[e("​ Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用"),t("a",F,[e("服务器"),n(a)]),e("，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。"),V,e("，可利用它响应"),t("a",K,[e("HTML"),n(a)]),e("（"),t("a",X,[e("标准通用标记语言"),n(a)]),e("下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。")]),t("p",null,[e("​ 诀窍是，当配置正确时，Apache 为HTML页面服务，而Tomcat 实际上运行JSP 页面和Servlet。另外，Tomcat和"),t("a",$,[e("IIS"),n(a)]),e("等Web服务器一样，具有处理HTML页面的功能，另外它还是一个Servlet和JSP容器，独立的Servlet容器是Tomcat的默认模式。不过，Tomcat处理静态"),t("a",Q,[e("HTML"),n(a)]),e("的能力不如Apache服务器。Tomcat最新版本为10.0.5**。**")]),Y,Z,tt,et,t("p",null,[e("先进入"),t("a",at,[e("官网"),n(a)])]),nt,t("p",null,[e("根据百度得出"),t("a",st,[e("解决方法"),n(a)])]),lt,t("p",null,[e("启动完毕后，访问下"),t("a",it,[e("http://localhost:8080/"),n(a)]),e("即可看到")]),dt,t("ol",null,[ot,t("li",null,[pt,t("ol",null,[ct,t("li",null,[t("p",null,[e("没有：去DNS服务器找（DNS服务器上记录了所有的域名端口的对应，一般来说要去DNS服务器首先得通过自身宽带的DNS服务器走一些复杂的交换流程），找的到的话就返回，找不到就返回找不到（报错），当然如果已经访问过的网站（"),t("a",rt,[e("如www.baidu.com"),n(a)]),e("）会在本机建立一个缓存，默认情况下，会先到这个缓存中去找，没有的话才回去DNS服务器上走流程")])])])])]),ut])}const ft=l(S,[["render",gt],["__file","01-初识JavaWeb.html.vue"]]);export{ft as default};
