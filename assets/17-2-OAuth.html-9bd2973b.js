import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as t,e}from"./app-2d4b26c1.js";const l="/images/SpringCloud/17-2-OAuth/bg2019040902.jpg",u="/images/SpringCloud/17-2-OAuth/bg2019040907.jpg",d="/images/SpringCloud/17-2-OAuth/bg2019040904.jpg",r="/images/SpringCloud/17-2-OAuth/bg2019040905.jpg",k="/images/SpringCloud/17-2-OAuth/bg2019040906.jpg",m="/images/SpringCloud/17-2-OAuth/image-20220122132204686.png",v="/images/SpringCloud/17-2-OAuth/image-20220122132511389.png",g="/images/SpringCloud/17-2-OAuth/image-20220122135418708.png",b="/images/SpringCloud/17-2-OAuth/image-20220122135555575.png",h="/images/SpringCloud/17-2-OAuth/image-20220122135652611.png",q="/images/SpringCloud/17-2-OAuth/image-20220122140647710.png",y="/images/SpringCloud/17-2-OAuth/image-20220122140716682.png",f="/images/SpringCloud/17-2-OAuth/sa-oauth2-setup.png",_="/images/SpringCloud/17-2-OAuth/image-20220122145439501.png",A="/images/SpringCloud/17-2-OAuth/sa-oauth2-server-scope.png",x="/images/SpringCloud/17-2-OAuth/sa-oauth2-server-code.png",w="/images/SpringCloud/17-2-OAuth/image-20220122150139471.png",T={},C=n("h2",{id:"关于oauth",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#关于oauth","aria-hidden":"true"},"#"),s(" 关于OAuth")],-1),S=n("p",null,"总之，如果涉及到微信小程序之类的，基本上这个玩意是首选的",-1),O=n("p",null,"简单来讲，OAuth2.0的应用场景可以理解为单点登录的升级版，单点登录解决了多个系统间会话的共享，OAuth2.0在此基础上增加了应用之间的权限控制",-1),I={href:"https://www.ruanyifeng.com/blog/2019/04/oauth_design.html",target:"_blank",rel:"noopener noreferrer"},R=e('<h3 id="oauth概述-快递员问题" tabindex="-1"><a class="header-anchor" href="#oauth概述-快递员问题" aria-hidden="true">#</a> OAuth概述-快递员问题</h3><ol><li>我住在一个大型的居民小区</li><li>小区有门禁系统</li><li>进入的时候需要输入密码</li><li>我经常网购和外卖，每天都有快递员来送货。我必须找到一个办法，让快递员通过门禁系统，进入小区</li></ol><blockquote><p>如果我把自己的密码，告诉快递员，他就拥有了与我同样的权限，这样好像不太合适。万一我想取消他进入小区的权力，也很麻烦，我自己的密码也得跟着改了，还得通知其他的快递员。</p></blockquote><p>有没有一种办法，让快递员能够自由进入小区，又不必知道小区居民的密码，而且他的唯一权限就是送货，其他需要密码的场合，他都没有权限？</p><p>于是，我设计了一套授权机制</p><ol><li>门禁系统的密码输入器下面，增加一个按钮，叫做&quot;<strong>获取授权</strong>&quot;。快递员需要首先按这个按钮，去申请授权</li><li>他按下按钮以后，屋主（也就是我）的手机就会跳出对话框：有人正在要求授权。系统还会显示该快递员的姓名、工号和所属的快递公司 <ul><li>我确认请求属实，就点击按钮，告诉门禁系统，我同意给予他进入小区的授权</li></ul></li><li>门禁系统得到我的确认以后，向快递员显示一个进入小区的令牌（access token）。令牌就是类似密码的一串数字，只在短期内（比如七天）有效</li><li>快递员向门禁系统输入令牌，进入小区</li></ol><p>有人可能会问，为什么不是远程为快递员开门，而要为他单独生成一个令牌？</p><p>这是因为快递员可能每天都会来送货，第二天他还可以复用这个令牌。另外，有的小区有多重门禁，快递员可以使用同一个令牌通过它们</p><blockquote><p>互联网场景</p></blockquote><p>我们把上面的例子搬到互联网，就是 OAuth 的设计了。</p><p>首先，居民小区就是<strong>储存用户数据的网络服务</strong>。比如，微信储存了我的好友信息，获取这些信息，就必须经过微信的&quot;门禁系统&quot;。</p><p>其次，快递员（或者说快递公司）就是<strong>第三方应用</strong>，想要穿过门禁系统，进入小区。</p><p>最后，我就是用户本人，<strong>同意授权第三方应用</strong>进入小区，获取我的数据</p><p><strong>简单说，OAuth 就是一种授权机制。数据的所有者告诉系统，同意授权第三方应用进入系统，获取这些数据。系统从而产生一个短期的进入令牌（token），用来代替密码，供第三方应用使用。</strong></p><blockquote><p>令牌(Token)与密码(Password)</p></blockquote><p>令牌（token）与密码（password）的作用是一样的，都可以进入系统，但是有三点差异</p><ol><li>令牌是短期的，到期会自动失效，用户自己无法修改。密码一般长期有效，用户不修改，就不会发生变化</li><li>令牌可以被数据所有者撤销，会立即失效。以上例而言，屋主可以随时取消快递员的令牌。密码一般不允许被他人撤销</li><li>令牌有权限范围（scope），比如只能进小区的二号门。对于网络服务来说，只读令牌就比读写令牌更安全。密码一般是完整权限</li></ol><p>上面这些设计，保证了令牌既可以让第三方应用获得权限，同时又随时可控，不会危及系统安全。这就是 OAuth 2.0 的优点</p><p>注意，只要知道了令牌，就能进入系统。系统一般不会再次确认身份，所以<strong>令牌必须保密，泄漏令牌与泄漏密码的后果是一样的。</strong> 这也是为什么令牌的有效期，一般都设置得很短的原因。</p><p>OAuth 2.0 对于如何颁发令牌的细节，规定得非常详细。具体来说，一共分成四种授权类型（authorization grant），即四种颁发令牌的方式，适用于不同的互联网场景。</p><h3 id="rfc-6749标准" tabindex="-1"><a class="header-anchor" href="#rfc-6749标准" aria-hidden="true">#</a> RFC-6749标准</h3>',21),j={href:"https://tools.ietf.org/html/rfc6749",target:"_blank",rel:"noopener noreferrer"},z=e(`<blockquote><p>OAuth 引入了一个授权层，用来分离两种不同的角色：客户端和资源所有者。......资源所有者同意以后，资源服务器可以向客户端颁发令牌。客户端通过令牌，去请求数据。</p></blockquote><p>这段话的意思就是，**OAuth 的核心就是向第三方应用颁发令牌。**然后，RFC 6749 接着写道：</p><blockquote><p>（由于互联网有多种场景）本标准定义了获得令牌的四种授权方式（authorization grant ）</p></blockquote><p>也就是说，**OAuth 2.0 规定了四种获得令牌的流程。你可以选择最适合自己的那一种，向第三方应用颁发令牌。**下面就是这四种授权方式</p><blockquote><ul><li>授权码（authorization-code）</li><li>隐藏式（implicit）</li><li>密码式（password）</li><li>客户端凭证（client credentials）</li></ul></blockquote><p>注意，不管哪一种授权方式，第三方应用申请令牌之前，<strong>都必须先到系统备案</strong>，说明自己的身份，然后会拿到<strong>两个身份识别码</strong>：客户端 ID（client ID）和客户端密钥（client secret）。这是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的。</p><h3 id="方式一-授权码" tabindex="-1"><a class="header-anchor" href="#方式一-授权码" aria-hidden="true">#</a> 方式一：授权码</h3><p><strong>授权码（authorization code）方式，指的是第三方应用先申请一个授权码，然后再用该码获取令牌。</strong></p><p>这种方式是最常用的流程，安全性也最高，它适用于那些有后端的 Web 应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。</p><blockquote><p>第一步，A 网站提供一个链接，用户点击后就会跳转到 B 网站，授权用户数据给 A 网站使用。下面就是 A 网站跳转 B 网站的一个示意链接。</p></blockquote><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>https://b.com/oauth/authorize?
      response_type=code&amp;
      client_id=CLIENT_ID&amp;
      redirect_uri=CALLBACK_URL&amp;
      scope=read
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面 URL 中</p><ul><li><code>response_type</code>参数表示要求返回授权码(code)</li><li><code>client_id</code>参数让B知道是谁在请求</li><li><code>redirect_uri</code>参数是B接受或拒绝请求后跳转的网址</li><li><code>scope</code>参数表示要求的授权范围（这里是只读read）</li></ul><figure><img src="`+l+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>第二步：用户跳转后，B 网站会要求用户登录，然后询问是否同意给予 A 网站授权。用户表示同意，这时 B 网站就会跳回<code>redirect_uri</code>参数指定的网址。跳转时，会传回一个授权码，就像下面这样。</p></blockquote><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>https://a.com/callback?code=AUTHORIZATION_CODE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面 URL 中，<code>code</code>参数就是授权码</p><figure><img src="`+u+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>第三步，A 网站拿到授权码以后，就可以在后端，向 B 网站请求令牌</p></blockquote><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>https://b.com/oauth/token?
     client_id=CLIENT_ID&amp;
     client_secret=CLIENT_SECRET&amp;
     grant_type=authorization_code&amp;
     code=AUTHORIZATION_CODE&amp;
     redirect_uri=CALLBACK_URL
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的URL中</p><ul><li><code>client_id</code>和<code>client_secret</code>参数用来让B确认A的身份 <ul><li><code>client_sercet</code>参数是保密的，因此只能在后端发起请求</li></ul></li><li><code>grant_type</code>的值是<code>AUTHORIZATION_CODE</code>，表示使用的授权方式是授权码</li><li><code>code</code>是第二步中拿到的授权码</li><li><code>redirect_uri</code>参数是令牌颁发后的回调网址</li></ul><figure><img src="`+d+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>第四步，B网站收到请求后，就会颁发令牌，具体做法是向<code>rediect_uri</code>指定的网段，发送一段json数据</p></blockquote><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>    
  <span class="token property">&quot;access_token&quot;</span><span class="token operator">:</span><span class="token string">&quot;ACCESS_TOKEN&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;token_type&quot;</span><span class="token operator">:</span><span class="token string">&quot;bearer&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;expires_in&quot;</span><span class="token operator">:</span><span class="token number">2592000</span><span class="token punctuation">,</span>
  <span class="token property">&quot;refresh_token&quot;</span><span class="token operator">:</span><span class="token string">&quot;REFRESH_TOKEN&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scope&quot;</span><span class="token operator">:</span><span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;uid&quot;</span><span class="token operator">:</span><span class="token number">100101</span><span class="token punctuation">,</span>
  <span class="token property">&quot;info&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>...<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面 JSON 数据中，<code>access_token</code>字段就是令牌，A 网站在后端拿到了。</p><figure><img src="`+r+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="方式二-隐藏式" tabindex="-1"><a class="header-anchor" href="#方式二-隐藏式" aria-hidden="true">#</a> 方式二：隐藏式</h3><p>有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。<strong>RFC 6749 就规定了第二种方式，允许直接向前端颁发令牌。这种方式没有授权码这个中间步骤，所以称为（授权码）&quot;隐藏式&quot;（implicit）。</strong></p><blockquote><p>第一步，A 网站提供一个链接，要求用户跳转到 B 网站，授权用户数据给 A 网站使用。</p></blockquote><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>https://b.com/oauth/authorize?
      response_type=token&amp;
      client_id=CLIENT_ID&amp;
      redirect_uri=CALLBACK_URL&amp;
      scope=read
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面 URL 中，<code>response_type</code>参数为<code>token</code>，表示要求直接返回令牌，其他几个参数和方式一致分别是声明自己的<code>id</code>和<code>uri</code>以及需要的<code>权限</code></p><blockquote><p>第二步，用户跳转到 B 网站，登录后同意给予 A 网站授权。这时，B 网站就会跳回<code>redirect_uri</code>参数指定的跳转网址，并且把令牌作为 URL 参数，传给 A 网站。</p></blockquote><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>https://a.com/callback#token=ACCESS_TOKEN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面 URL 中，<code>token</code>参数就是令牌，A 网站因此直接在前端拿到令牌</p><p>注意，令牌的位置是 URL 锚点（fragment），而不是查询字符串（querystring），这是因为 OAuth 2.0 允许跳转网址是 HTTP 协议，因此存在&quot;中间人攻击&quot;的风险，而浏览器跳转时，锚点不会发到服务器，就减少了泄漏令牌的风险。</p><figure><img src="`+k+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这种方式把令牌直接传给前端，是很不安全的。因此，只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，浏览器关掉，令牌就失效了。</p><h3 id="方式三-密码式" tabindex="-1"><a class="header-anchor" href="#方式三-密码式" aria-hidden="true">#</a> 方式三：密码式</h3><p><strong>如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式称为&quot;密码式&quot;（password）。</strong></p><blockquote><p>第一步，A 网站要求用户提供 B 网站的用户名和密码。拿到以后，A 就直接向 B 请求令牌。</p></blockquote><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>https://oauth.b.com/token?
      grant_type=password&amp;
      username=USERNAME&amp;
      password=PASSWORD&amp;
      client_id=CLIENT_ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面 URL 中，<code>grant_type</code>参数是授权方式，这里的<code>password</code>表示&quot;密码式&quot;，<code>username</code>和<code>password</code>是 B 的用户名和密码。</p><blockquote><p>第二步，B 网站验证身份通过后，直接给出令牌。注意，这时不需要跳转，而是把令牌放在 JSON 数据里面，作为 HTTP 回应，A 因此拿到令牌。</p></blockquote><p>这种方式需要用户给出自己的用户名/密码，显然风险很大，因此只适用于其他授权方式都无法采用的情况，而且必须是用户高度信任的应用。</p><h3 id="方式四-凭证式" tabindex="-1"><a class="header-anchor" href="#方式四-凭证式" aria-hidden="true">#</a> 方式四：凭证式</h3><p><strong>最后一种方式是凭证式（client credentials），适用于没有前端的命令行应用，即在命令行下请求令牌。</strong></p><blockquote><p>第一步，A 应用在命令行向 B 发出请求</p></blockquote><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>https://oauth.b.com/token?
      grant_type=client_credentials&amp;
      client_id=CLIENT_ID&amp;
      client_secret=CLIENT_SECRET
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面 URL 中，<code>grant_type</code>参数等于<code>client_credentials</code>表示采用凭证式，<code>client_id</code>和<code>client_secret</code>用来让 B 确认 A 的身份</p><blockquote><p>第二步，B 网站验证通过以后，直接返回令牌。</p></blockquote><p>这种方式给出的令牌，是针对第三方应用的，而不是针对用户的，即有可能多个用户共享同一个令牌</p><h3 id="获取到令牌后的使用" tabindex="-1"><a class="header-anchor" href="#获取到令牌后的使用" aria-hidden="true">#</a> 获取到令牌后的使用</h3><blockquote><p>A 网站拿到令牌以后，就可以向 B 网站的 API 请求数据了</p></blockquote><p>此时，每个发到 API 的请求，都必须带有令牌。具体做法是在请求的头信息，加上一个<code>Authorization</code>字段，令牌就放在这个字段里面</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;Authorization: Bearer ACCESS_TOKEN&quot;</span> <span class="token punctuation">\\</span>
<span class="token string">&quot;https://api.b.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面命令中，<code>ACCESS_TOKEN</code>就是拿到的令牌。</p><h3 id="更新令牌" tabindex="-1"><a class="header-anchor" href="#更新令牌" aria-hidden="true">#</a> 更新令牌</h3><blockquote><p>令牌的有效期到了，如果让用户重新走一遍上面的流程，再申请一个新的令牌，很可能体验不好，而且也没有必要。OAuth 2.0 允许用户自动更新令牌</p></blockquote><p>具体方法是，B 网站颁发令牌的时候，一次性颁发两个令牌，一个用于获取数据，另一个用于获取新的令牌（refresh token 字段）。令牌到期前，用户使用 refresh token 发一个请求，去更新令牌</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>https://b.com/oauth/token?
      grant_type=refresh_token&amp;
      client_id=CLIENT_ID&amp;
      client_secret=CLIENT_SECRET&amp;
      refresh_token=REFRESH_TOKEN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面 URL 中</p><ul><li><code>grant_type</code>参数为<code>refresh_token</code>表示要求更新令牌</li><li><code>client_id</code>参数和<code>client_secret</code>参数用于确认身份</li><li><code>refresh_token</code>参数就是用于更新令牌的令牌</li></ul><p>B网站验证通过后，就会办法新的令牌</p><h3 id="实例-使用github来实现一个最简单的第三方登陆" tabindex="-1"><a class="header-anchor" href="#实例-使用github来实现一个最简单的第三方登陆" aria-hidden="true">#</a> 实例：使用GitHub来实现一个最简单的第三方登陆</h3><p>所谓第三方登录，实质就是 OAuth 授权。</p><p>用户想要登录 A 网站，A 网站让用户提供第三方网站的数据，证明自己的身份。获取第三方网站的身份数据，就需要 OAuth 授权。</p><p>举例来说，A 网站允许 GitHub 登录，背后就是下面的流程。</p><blockquote><ol><li>A 网站让用户跳转到 GitHub。</li><li>GitHub 要求用户登录，然后询问&quot;A 网站要求获得 xx 权限，你是否同意？&quot;</li><li>用户同意，GitHub 就会重定向回 A 网站，同时发回一个授权码。</li><li>A 网站使用授权码，向 GitHub 请求令牌。</li><li>GitHub 返回令牌.</li><li>A 网站使用令牌，向 GitHub 请求用户数据。</li></ol></blockquote><p>首先，我们通过前面的了解，已经知道一个应用要求OAuth授权，必须先到对方网站登记，让对方知道是谁在请求</p>`,70),E={href:"https://github.com/settings/applications/new",target:"_blank",rel:"noopener noreferrer"},L=e('<p>这样填写</p><figure><img src="'+m+'" alt="image-20220122132204686" tabindex="0" loading="lazy"><figcaption>image-20220122132204686</figcaption></figure><p>应用的名称随便填</p><p>主页 URL 填写<code>http://localhost:8080</code></p><p>跳转网址填写 <code>http://localhost:8080/oauth/redirect</code></p><p>提交表单以后，GitHub 应该会返回客户端 ID（client ID）和客户端密钥（client secret），这就是应用的身份识别码</p><figure><img src="'+v+`" alt="image-20220122132511389" tabindex="0" loading="lazy"><figcaption>image-20220122132511389</figcaption></figure><p>id： 5c87602a9e7c5818af38</p><p>secrect：06cc126ea698f7a931647aa1761f684efed603a6</p><p>接着，clone下阮一峰老师的下面这个仓库，这是一个Nodejs+Koa的仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/ruanyf/node-oauth-demo.git
<span class="token builtin class-name">cd</span> node-oauth-demo
<span class="token comment">#自行使用yarn或者npm install安装</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>index.js</code>内填入你的clientID和clientSecret</p><p>以及<code>public/index.html</code>中的client_id改成你的</p><p>接着启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> index.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,15),H={href:"http://localhost:8080/",target:"_blank",rel:"noopener noreferrer"},U=e('<p>就能看到这个页面</p><figure><img src="'+g+`" alt="image-20220122135418708" tabindex="0" loading="lazy"><figcaption>image-20220122135418708</figcaption></figure><p>示例的首页很简单，就是一个链接，让用户跳转到 GitHub。</p><p>跳转的 URL 如下。</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>https://github.com/login/oauth/authorize?
  client_id=你的client_id
  redirect_uri=http://localhost:8080/oauth/redirect
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 URL 指向 GitHub 的 OAuth 授权网址，带有两个参数：<code>client_id</code>告诉 GitHub 谁在请求，<code>redirect_uri</code>是稍后跳转回来的网址</p><blockquote><p>用户点击到了 GitHub，GitHub 会要求用户登录，确保是本人在操作。</p></blockquote><p>你点击之后，会跳转到github</p><figure><img src="`+b+'" alt="image-20220122135555575" tabindex="0" loading="lazy"><figcaption>image-20220122135555575</figcaption></figure><p>这里同意授权</p><p>接着你就能看到</p><figure><img src="'+h+`" alt="image-20220122135652611" tabindex="0" loading="lazy"><figcaption>image-20220122135652611</figcaption></figure><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>http://localhost:8080/oauth/redirect?
  code=授权码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>后端收到这个请求以后，就拿到了授权码（<code>code</code>参数）</p><p>同时你的后端也能获取到对应的内容</p><p>然后看看这个时候后端的实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 0. 你的对应的id和Secret</span>
<span class="token keyword">const</span> clientID <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">const</span> clientSecret <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

<span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> serve <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-static&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-route&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;axios&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> main <span class="token operator">=</span> <span class="token function">serve</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/public&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.</span>
<span class="token keyword">const</span> <span class="token function-variable function">oauth</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取请求中的params参数 code</span>
  <span class="token keyword">const</span> requestToken <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>code<span class="token punctuation">;</span>
  <span class="token comment">// 打印code</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;authorization code:&#39;</span><span class="token punctuation">,</span> requestToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
  <span class="token comment">// 3. 这里是精髓</span>
  <span class="token keyword">const</span> tokenResponse <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// 请求github给定的链接</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;https://github.com/login/oauth/access_token?&#39;</span> <span class="token operator">+</span>
      <span class="token comment">// 参数client_id和client_secret</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">client_id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>clientID<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">client_secret=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>clientSecret<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
      <span class="token comment">//code是我们刚刚获取到的</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">code=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>requestToken<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">accept</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
  <span class="token comment">// 将结果保存在变量内 这里获取到的是用户的令牌</span>
  <span class="token keyword">const</span> accessToken <span class="token operator">=</span> tokenResponse<span class="token punctuation">.</span>data<span class="token punctuation">.</span>access_token<span class="token punctuation">;</span>
   <span class="token comment">// 打印令牌</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">access token: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>accessToken<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//再通过这个令牌请求github，获取对应的用户信息</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://api.github.com/user</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">accept</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">Authorization</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">token </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>accessToken<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 打印用户信息</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> name <span class="token operator">=</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
   <span class="token comment">// 重定向到我们的html，并且附带上参数</span>
  ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/welcome.html?name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1. 这里是刚刚github重定向的连接，调用了oauth这个方法</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/oauth/redirect&#39;</span><span class="token punctuation">,</span> oauth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后你的浏览器中，就可以看到这样的内容</p><figure><img src="`+q+'" alt="image-20220122140647710" tabindex="0" loading="lazy"><figcaption>image-20220122140647710</figcaption></figure><p>并且在控制台上，能看到我们用户的相关信息</p><figure><img src="'+y+`" alt="image-20220122140716682" tabindex="0" loading="lazy"><figcaption>image-20220122140716682</figcaption></figure><p>拆解下</p><p>这里的关键是针对<code>/oauth/redirect</code>的请求，编写一个路由，完成 OAuth 认证。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">oauth</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/oauth/redirect&#39;</span><span class="token punctuation">,</span> oauth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>oauth</code>函数就是路由的处理函数。下面的代码都写在这个函数里面。</p><p>路由函数的第一件事，是从 URL 取出授权码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> requestToken <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>code<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着，后端使用这个授权码，向 GitHub 请求令牌。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> tokenResponse <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;https://github.com/login/oauth/access_token?&#39;</span> <span class="token operator">+</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">client_id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>clientID<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">client_secret=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>clientSecret<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">code=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>requestToken<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">accept</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>面代码中，GitHub 的令牌接口<code>https://github.com/login/oauth/access_token</code>需要提供三个参数。</p><blockquote><ul><li><code>client_id</code>：客户端的 ID</li><li><code>client_secret</code>：客户端的密钥</li><li><code>code</code>：授权码</li></ul></blockquote><p>作为回应，GitHub 会返回一段 JSON 数据，里面包含了令牌<code>accessToken</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> accessToken <span class="token operator">=</span> tokenResponse<span class="token punctuation">.</span>data<span class="token punctuation">.</span>access_token<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有了令牌以后，就可以向 API 请求数据了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://api.github.com/user</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">accept</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Authorization</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">token </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>accessToken<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，GitHub API 的地址是<code>https://api.github.com/user</code>，请求的时候必须在 HTTP 头信息里面带上令牌<code>Authorization: token 361507da</code></p><p>然后，就可以拿到用户数据，得到用户的身份。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/welcome.html?name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="oauth和单点登陆如何选择" tabindex="-1"><a class="header-anchor" href="#oauth和单点登陆如何选择" aria-hidden="true">#</a> OAuth和单点登陆如何选择？</h3><table><thead><tr><th>功能点</th><th>SSO单点登录</th><th>OAuth2.0</th></tr></thead><tbody><tr><td>统一认证</td><td>支持度高</td><td>支持度高</td></tr><tr><td>统一注销</td><td>支持度高</td><td>支持度低</td></tr><tr><td>多个系统会话一致性</td><td>强一致</td><td>弱一致</td></tr><tr><td>第三方应用授权管理</td><td>不支持</td><td>支持度高</td></tr><tr><td>自有系统授权管理</td><td>支持度高</td><td>支持度低</td></tr><tr><td>Client级的权限校验</td><td>不支持</td><td>支持度高</td></tr><tr><td>集成简易度</td><td>比较简单</td><td>难度中等</td></tr></tbody></table><p>按需选择即可</p><p>注：以上仅为在 Sa-Token 中两种技术的差异度比较，不同框架的实现可能略有差异，但整体思想是一致的。</p><h2 id="使用sa-oauth搭建oauth2-server" tabindex="-1"><a class="header-anchor" href="#使用sa-oauth搭建oauth2-server" aria-hidden="true">#</a> 使用Sa-OAuth搭建OAuth2-Server</h2><p>之前的过程中，我们已经使用了github给我们提供的对应的接口</p><p>那么如何自己实现一个呢？</p><p>注意：OAuth2和单点登录之间选型是比较重要的，单点登录的特点就是说一个账户密码可以在多个地方登陆</p><p>虽然说OAuth2也可以通过密码式来这样做，但是就有了一种杀鸡焉用宰牛刀的感觉…</p>`,47),B={href:"https://tools.ietf.org/html/rfc6749",target:"_blank",rel:"noopener noreferrer"},N=n("ol",null,[n("li",null,"授权码（Authorization Code）：OAuth2.0标准授权步骤，Server端向Client端下放Code码，Client端再用Code码换取授权Token"),n("li",null,"隐藏式（Implicit）：无法使用授权码模式时的备用选择，Server端使用URL重定向方式直接将Token下放到Client端页面"),n("li",null,"密码式（Password）：Client直接拿着用户的账号密码换取授权Token"),n("li",null,"客户端凭证（Client Credentials）：Server端针对Client级别的Token，代表应用自身的资源授权")],-1),D=n("img",{src:f,alt:"https://oss.dev33.cn/sa-token/doc/oauth2/sa-oauth2-setup.png",tabindex:"0",loading:"lazy"},null,-1),P={href:"https://oss.dev33.cn/sa-token/doc/oauth2/sa-oauth2-setup.png",target:"_blank",rel:"noopener noreferrer"},G=e(`<h3 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h3><p>我们首先修改下Hosts文件</p><ul><li>WIndows <code>C:\\windows\\system32\\drivers\\etc\\hosts</code></li><li>Linux <code>/etc/hosts</code></li></ul><p>方便之后的测试</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>127.0.0.1 sa-oauth-server.com
127.0.0.1 sa-oauth-client.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="依赖准备" tabindex="-1"><a class="header-anchor" href="#依赖准备" aria-hidden="true">#</a> 依赖准备</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- Sa-Token-OAuth2.0 模块 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.dev33<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sa-token-oauth2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.28.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- Sa-Token 权限认证, 在线文档：http://sa-token.dev33.cn/ --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.dev33<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sa-token-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.28.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 提供Redis连接池 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- Sa-Token 整合 Redis （使用jackson序列化方式） --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.dev33<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sa-token-dao-redis-jackson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.28.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--        基础内容--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span>

<span class="token comment"># Sa-Token 配置</span>
<span class="token key atrule">sa-token</span><span class="token punctuation">:</span>
  <span class="token comment"># 首先是标准配置</span>
  <span class="token comment"># token名称 (同时也是cookie名称)</span>
  <span class="token key atrule">token-name</span><span class="token punctuation">:</span> satoken
  <span class="token comment"># token有效期，单位s 默认30天, -1代表永不过期</span>
  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">2592000</span>
  <span class="token comment"># token临时有效期 (指定时间内无操作就视为token过期) 单位: 秒</span>
  <span class="token key atrule">activity-timeout</span><span class="token punctuation">:</span> <span class="token number">-1</span>
  <span class="token comment"># 是否允许同一账号并发登录 (为true时允许一起登录, 为false时新登录挤掉旧登录)</span>
  <span class="token key atrule">is-concurrent</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token comment"># 在多人登录同一账号时，是否共用一个token (为true时所有登录共用一个token, 为false时每次登录新建一个token)</span>
  <span class="token key atrule">is-share</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token comment"># token风格</span>
  <span class="token key atrule">token-style</span><span class="token punctuation">:</span> uuid
  <span class="token comment"># 是否输出操作日志</span>
  <span class="token key atrule">is-log</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token comment"># Redis配置 （SSO模式一和模式二使用Redis来同步会话）</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token comment"># Redis数据库索引（默认为0）</span>
    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">1</span>
    <span class="token comment"># Redis服务器地址</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> myserver
    <span class="token comment"># Redis服务器连接端口</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">13355</span>
    <span class="token comment"># Redis服务器连接密码（默认为空）</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> amayakite
    <span class="token comment"># 连接超时时间</span>
    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s
    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
        <span class="token comment"># 连接池最大连接数</span>
        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">200</span>
        <span class="token comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span>
        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>1ms
        <span class="token comment"># 连接池中的最大空闲连接</span>
        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">10</span>
        <span class="token comment"># 连接池中的最小空闲连接</span>
        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="开放服务-saoauth2templateimpl" tabindex="-1"><a class="header-anchor" href="#开放服务-saoauth2templateimpl" aria-hidden="true">#</a> 开放服务-SaOAuth2TemplateImpl</h3><p>路径：<code>template/SaOAuth2TemplateImpl</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaOAuth2TemplateImpl</span> <span class="token keyword">extends</span> <span class="token class-name">SaOAuth2Template</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据 id 获取 Client 信息</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">SaClientModel</span> <span class="token function">getClientModel</span><span class="token punctuation">(</span><span class="token class-name">String</span> clientId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 此为模拟数据，真实环境需要从数据库查询</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;1001&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SaClientModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">setClientId</span><span class="token punctuation">(</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">setClientSecret</span><span class="token punctuation">(</span><span class="token string">&quot;aaaa-bbbb-cccc-dddd-eeee&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">setAllowUrl</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">setContractScope</span><span class="token punctuation">(</span><span class="token string">&quot;userinfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 根据ClientId 和 LoginId 获取openid</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOpenid</span><span class="token punctuation">(</span><span class="token class-name">String</span> clientId<span class="token punctuation">,</span> <span class="token class-name">Object</span> loginId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 此为模拟数据，真实环境需要从数据库查询</span>
        <span class="token keyword">return</span> <span class="token string">&quot;gr_SwoIN0MC1ewxHX_vfCW3BothWDZMMtx__&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="开放路由-saoauth2servercontroller" tabindex="-1"><a class="header-anchor" href="#开放路由-saoauth2servercontroller" aria-hidden="true">#</a> 开放路由-SaOAuth2ServerController</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Sa-OAuth2 Server端 控制器 
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaOAuth2ServerController</span> <span class="token punctuation">{</span>

    <span class="token comment">// 处理所有OAuth相关请求 </span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/oauth2/*&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;------- 进入请求: &quot;</span> <span class="token operator">+</span> <span class="token class-name">SaHolder</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">SaOAuth2Handle</span><span class="token punctuation">.</span><span class="token function">serverRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Sa-OAuth2 定制化配置 </span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSaOAuth2Config</span><span class="token punctuation">(</span><span class="token class-name">SaOAuth2Config</span> cfg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cfg<span class="token punctuation">.</span>
            <span class="token comment">// 配置：未登录时返回的View </span>
            <span class="token function">setNotLoginView</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">&quot;当前会话在SSO-Server端尚未登录，请先访问&quot;</span>
                            <span class="token operator">+</span> <span class="token string">&quot;&lt;a href=&#39;/oauth2/doLogin?name=sa&amp;pwd=123456&#39; target=&#39;_blank&#39;&gt; doLogin登录 &lt;/a&gt;&quot;</span>
                            <span class="token operator">+</span> <span class="token string">&quot;进行登录之后，刷新页面开始授权&quot;</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> msg<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
            <span class="token comment">// 配置：登录处理函数 </span>
            <span class="token function">setDoLoginHandle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;sa&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">StpUtil</span><span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token class-name">SaResult</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token class-name">SaResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;账号名或密码错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
            <span class="token comment">// 配置：确认授权时返回的View </span>
            <span class="token function">setConfirmView</span><span class="token punctuation">(</span><span class="token punctuation">(</span>clientId<span class="token punctuation">,</span> scope<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">&quot;&lt;p&gt;应用 &quot;</span> <span class="token operator">+</span> clientId <span class="token operator">+</span> <span class="token string">&quot; 请求授权：&quot;</span> <span class="token operator">+</span> scope <span class="token operator">+</span> <span class="token string">&quot;&lt;/p&gt;&quot;</span>
                        <span class="token operator">+</span> <span class="token string">&quot;&lt;p&gt;请确认：&lt;a href=&#39;/oauth2/doConfirm?client_id=&quot;</span> <span class="token operator">+</span> clientId <span class="token operator">+</span> <span class="token string">&quot;&amp;scope=&quot;</span> <span class="token operator">+</span> scope <span class="token operator">+</span> <span class="token string">&quot;&#39; target=&#39;_blank&#39;&gt; 确认授权 &lt;/a&gt;&lt;/p&gt;&quot;</span>
                        <span class="token operator">+</span> <span class="token string">&quot;&lt;p&gt;确认之后刷新页面&lt;/p&gt;&quot;</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> msg<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 全局异常拦截  </span>
    <span class="token annotation punctuation">@ExceptionHandler</span>
    <span class="token keyword">public</span> <span class="token class-name">SaResult</span> <span class="token function">handlerException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">return</span> <span class="token class-name">SaResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="访问测试" tabindex="-1"><a class="header-anchor" href="#访问测试" aria-hidden="true">#</a> 访问测试</h3><p>对，只要经过上面的配置就可以了…</p><p>由于暂未搭建Client端，我们可以使用Sa-Token官网作为重定向URL进行测试：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>http://sa-oauth-server.com:8001/oauth2/authorize?response_type=code&amp;client_id=1001&amp;redirect_uri=http://sa-token.dev33.cn/&amp;scope=userinfo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于首次访问，我们在OAuth-Server端暂未登录，会被转发到登录视图</p><figure><img src="`+_+'" alt="image-20220122145439501" tabindex="0" loading="lazy"><figcaption>image-20220122145439501</figcaption></figure><p>点击doLogin进行登录之后刷新页面，会提示我们确认授权</p><figure><img src="'+A+'" alt="sa-oauth2-server-login-view" tabindex="0" loading="lazy"><figcaption>sa-oauth2-server-login-view</figcaption></figure><p>点击确认授权之后刷新页面，我们会被重定向至 redirect_uri 页面，并携带了code参数</p><figure><img src="'+x+`" alt="sa-oauth2-server-code" tabindex="0" loading="lazy"><figcaption>sa-oauth2-server-code</figcaption></figure><p>我们拿着code参数，访问以下地址：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>http://sa-oauth-server.com:8001/oauth2/token?grant_type=authorization_code&amp;client_id=1001&amp;client_secret=aaaa-bbbb-cccc-dddd-eeee&amp;code=你刚刚获取到的code
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>就可以获取如下内容： <code>Access-Token</code>、<code>Refresh-Token</code>、<code>openid</code>等授权信息</p><figure><img src="`+w+`" alt="image-20220122150139471" tabindex="0" loading="lazy"><figcaption>image-20220122150139471</figcaption></figure><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;access_token&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nKmkSgOkDLWnoBz9ssnapiqvSet3LKNd7bYn0RDz1deZGwztJmkSzDUxHRkJ&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;refresh_token&quot;</span><span class="token operator">:</span> <span class="token string">&quot;EvPoUaxy7Vs4eZQISi1bEU2YKxmyZBFilZ8msfjvH98EsEccYNqnRHveZ7AX&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;expires_in&quot;</span><span class="token operator">:</span> <span class="token number">7199</span><span class="token punctuation">,</span>
        <span class="token property">&quot;refresh_expires_in&quot;</span><span class="token operator">:</span> <span class="token number">2591999</span><span class="token punctuation">,</span>
        <span class="token property">&quot;client_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1001&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;scope&quot;</span><span class="token operator">:</span> <span class="token string">&quot;userinfo&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;openid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gr_SwoIN0MC1ewxHX_vfCW3BothWDZMMtx__&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着就可以用这个做很多事情了..</p><h2 id="api列表" tabindex="-1"><a class="header-anchor" href="#api列表" aria-hidden="true">#</a> API列表</h2><h3 id="方式一-授权码-1" tabindex="-1"><a class="header-anchor" href="#方式一-授权码-1" aria-hidden="true">#</a> 方式一：授权码</h3><h4 id="获取获取授权码" tabindex="-1"><a class="header-anchor" href="#获取获取授权码" aria-hidden="true">#</a> 获取获取授权码</h4><p>根据以下格式构建URL，引导用户访问 （复制时请注意删减掉相应空格和换行符）</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>http://sa-oauth-server.com:8001/oauth2/authorize
    ?response_type=code
    &amp;client_id={value}
    &amp;redirect_uri={value}
    &amp;scope={value}
    $state={value}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数详解：</p><table><thead><tr><th>参数</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>response_type</td><td>是</td><td>返回类型，这里请填写：code</td></tr><tr><td>client_id</td><td>是</td><td>应用id</td></tr><tr><td>redirect_uri</td><td>是</td><td>用户确认授权后，重定向的url地址</td></tr><tr><td>scope</td><td>否</td><td>具体请求的权限，多个用逗号隔开</td></tr><tr><td>state</td><td>否</td><td>随机值，此参数会在重定向时追加到url末尾，不填不追加</td></tr></tbody></table><p>注意点：</p><ol><li>如果用户在Server端尚未登录：会被转发到登录视图，你可以参照文档或官方示例自定义登录页面</li><li>如果scope参数为空，或者请求的权限用户近期已确认过，则无需用户再次确认，达到静默授权的效果，否则需要用户手动确认，服务器才可以下放code授权码</li></ol><p>用户确认授权之后，会被重定向至<code>redirect_uri</code>，并追加code参数与state参数，形如：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>redirect_uri?code={code}&amp;state={state}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Code授权码具有以下特点：</p><ol><li>每次授权产生的Code码都不一样</li><li>Code码用完即废，不能二次使用</li><li>一个Code的有效期默认为五分钟，超时自动作废</li><li>每次授权产生新Code码，会导致旧Code码立即作废，即使旧Code码尚未使用</li></ol><h4 id="根据授权码获取access-token" tabindex="-1"><a class="header-anchor" href="#根据授权码获取access-token" aria-hidden="true">#</a> 根据授权码获取access-token</h4><p>获得Code码后，我们可以通过以下接口，获取到用户的<code>Access-Token</code>、<code>Refresh-Token</code>、<code>openid</code>等关键信息</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>http://sa-oauth-server.com:8001/oauth2/token
    ?grant_type=authorization_code
    &amp;client_id={value}
    &amp;client_secret={value}
    &amp;code={value}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数详解：</p><table><thead><tr><th>参数</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>grant_type</td><td>是</td><td>授权类型，这里请填写：authorization_code</td></tr><tr><td>client_id</td><td>是</td><td>应用id</td></tr><tr><td>client_secret</td><td>是</td><td>应用秘钥</td></tr><tr><td>code</td><td>是</td><td>步骤1.1中获取到的授权码</td></tr></tbody></table><p>接口返回示例：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token comment">// 200表示请求成功，非200标识请求失败, 以下不再赘述 </span>
    <span class="token property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;access_token&quot;</span><span class="token operator">:</span> <span class="token string">&quot;7Ngo1Igg6rieWwAmWMe4cxT7j8o46mjyuabuwLETuAoN6JpPzPO2i3PVpEVJ&quot;</span><span class="token punctuation">,</span>    
        <span class="token comment">// Access-Token值</span>
        <span class="token property">&quot;refresh_token&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ZMG7QbuCVtCIn1FAJuDbgEjsoXt5Kqzii9zsPeyahAmoir893ARA4rbmeR66&quot;</span><span class="token punctuation">,</span>    
        <span class="token comment">// Refresh-Token值</span>
        <span class="token property">&quot;expires_in&quot;</span><span class="token operator">:</span> <span class="token number">7199</span><span class="token punctuation">,</span>                 
        <span class="token comment">// Access-Token剩余有效期，单位秒  </span>
        <span class="token property">&quot;refresh_expires_in&quot;</span><span class="token operator">:</span> <span class="token number">2591999</span><span class="token punctuation">,</span>      
        <span class="token comment">// Refresh-Token剩余有效期，单位秒  </span>
        <span class="token property">&quot;client_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1001&quot;</span><span class="token punctuation">,</span>                
        <span class="token comment">// 应用id</span>
        <span class="token property">&quot;scope&quot;</span><span class="token operator">:</span> <span class="token string">&quot;userinfo&quot;</span><span class="token punctuation">,</span>                
        <span class="token comment">// 此令牌包含的权限</span>
        <span class="token property">&quot;openid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gr_SwoIN0MC1ewxHX_vfCW3BothWDZMMtx__&quot;</span>     
        <span class="token comment">// openid </span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="刷新token" tabindex="-1"><a class="header-anchor" href="#刷新token" aria-hidden="true">#</a> 刷新Token</h4><p>Access-Token的有效期较短，如果每次过期都需要重新授权的话，会比较影响用户体验，因此我们可以在后台通过<code>Refresh-Token</code> 刷新 <code>Access-Token</code></p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>http://sa-oauth-server.com:8001/oauth2/refresh
    ?grant_type=refresh_token
    &amp;client_id={value}
    &amp;client_secret={value}
    &amp;refresh_token={value}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数详解：</p><table><thead><tr><th>参数</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>grant_type</td><td>是</td><td>授权类型，这里请填写：refresh_token</td></tr><tr><td>client_id</td><td>是</td><td>应用id</td></tr><tr><td>client_secret</td><td>是</td><td>应用秘钥</td></tr><tr><td>refresh_token</td><td>是</td><td>步骤1.2中获取到的<code>Refresh-Token</code>值</td></tr></tbody></table><h4 id="在access-token过期前主动将其回收" tabindex="-1"><a class="header-anchor" href="#在access-token过期前主动将其回收" aria-hidden="true">#</a> 在Access-Token过期前主动将其回收</h4><blockquote><p>也就是回收Token，如果需要的话：</p></blockquote><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>http://sa-oauth-server.com:8001/oauth2/revoke
    ?client_id={value}
    &amp;client_secret={value}
    &amp;access_token={value}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数详解：</p><table><thead><tr><th>参数</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>client_id</td><td>是</td><td>应用id</td></tr><tr><td>client_secret</td><td>是</td><td>应用秘钥</td></tr><tr><td>access_token</td><td>是</td><td>步骤1.2中获取到的<code>Access-Token</code>值</td></tr></tbody></table><p>返回值样例：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="根据-access-token-获取相应用户的账号信息" tabindex="-1"><a class="header-anchor" href="#根据-access-token-获取相应用户的账号信息" aria-hidden="true">#</a> 根据 Access-Token 获取相应用户的账号信息</h4><blockquote><p>注：此接口为官方仓库模拟接口，正式项目中大家可以根据此样例，自定义需要的接口及参数</p></blockquote><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>http://sa-oauth-server.com:8001/oauth2/userinfo?access_token={value}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回值：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;nickname&quot;</span><span class="token operator">:</span> <span class="token string">&quot;shengzhang_&quot;</span><span class="token punctuation">,</span>         <span class="token comment">// 账号昵称</span>
        <span class="token property">&quot;avatar&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://xxx.com/1.jpg&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// 头像地址</span>
        <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token string">&quot;18&quot;</span><span class="token punctuation">,</span>                       <span class="token comment">// 年龄</span>
        <span class="token property">&quot;sex&quot;</span><span class="token operator">:</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span>                       <span class="token comment">// 性别</span>
        <span class="token property">&quot;address&quot;</span><span class="token operator">:</span> <span class="token string">&quot;山东省 青岛市 城阳区&quot;</span>   <span class="token comment">// 所在城市 </span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="方式二-隐藏式-1" tabindex="-1"><a class="header-anchor" href="#方式二-隐藏式-1" aria-hidden="true">#</a> 方式二：隐藏式</h4><p>根据以下格式构建URL，引导用户访问：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>http://sa-oauth-server.com:8001/oauth2/authorize
    ?response_type=token
    &amp;client_id={value}
    &amp;redirect_uri={value}
    &amp;scope={value}
    $state={value}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数详解：</p><table><thead><tr><th>参数</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>response_type</td><td>是</td><td>返回类型，这里请填写：token</td></tr><tr><td>client_id</td><td>是</td><td>应用id</td></tr><tr><td>redirect_uri</td><td>是</td><td>用户确认授权后，重定向的url地址</td></tr><tr><td>scope</td><td>否</td><td>具体请求的权限，多个用逗号隔开</td></tr><tr><td>state</td><td>否</td><td>随机值，此参数会在重定向时追加到url末尾，不填不追加</td></tr></tbody></table><p>此模式会越过授权码的步骤，直接返回Access-Token到前端页面，形如：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>redirect_uri#token=xxxx-xxxx-xxxx-xxxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="方式三-密码式-1" tabindex="-1"><a class="header-anchor" href="#方式三-密码式-1" aria-hidden="true">#</a> 方式三：密码式</h4><p>首先在Client端构建表单，让用户输入Server端的账号和密码，然后在Client端访问接口</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>http://sa-oauth-server.com:8001/oauth2/token
    ?grant_type=password
    &amp;client_id={value}
    &amp;username={value}
    &amp;password={value}复制到剪贴板错误复制成功12345
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数详解：</p><p>参数详解：</p><table><thead><tr><th>参数</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>grant_type</td><td>是</td><td>返回类型，这里请填写：password</td></tr><tr><td>client_id</td><td>是</td><td>应用id</td></tr><tr><td>username</td><td>是</td><td>用户的Server端账号</td></tr><tr><td>password</td><td>是</td><td>用户的Server端密码</td></tr><tr><td>scope</td><td>否</td><td>具体请求的权限，多个用逗号隔开</td></tr></tbody></table><p>接口返回示例：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token comment">// 200表示请求成功，非200标识请求失败, 以下不再赘述 </span>
    <span class="token property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;access_token&quot;</span><span class="token operator">:</span> <span class="token string">&quot;7Ngo1Igg6rieWwAmWMe4cxT7j8o46mjyuabuwLETuAoN6JpPzPO2i3PVpEVJ&quot;</span><span class="token punctuation">,</span>     <span class="token comment">// Access-Token值</span>
        <span class="token property">&quot;refresh_token&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ZMG7QbuCVtCIn1FAJuDbgEjsoXt5Kqzii9zsPeyahAmoir893ARA4rbmeR66&quot;</span><span class="token punctuation">,</span>    <span class="token comment">// Refresh-Token值</span>
        <span class="token property">&quot;expires_in&quot;</span><span class="token operator">:</span> <span class="token number">7199</span><span class="token punctuation">,</span>                 <span class="token comment">// Access-Token剩余有效期，单位秒  </span>
        <span class="token property">&quot;refresh_expires_in&quot;</span><span class="token operator">:</span> <span class="token number">2591999</span><span class="token punctuation">,</span>      <span class="token comment">// Refresh-Token剩余有效期，单位秒  </span>
        <span class="token property">&quot;client_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1001&quot;</span><span class="token punctuation">,</span>                <span class="token comment">// 应用id</span>
        <span class="token property">&quot;scope&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>                        <span class="token comment">// 此令牌包含的权限</span>
        <span class="token property">&quot;openid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gr_SwoIN0MC1ewxHX_vfCW3BothWDZMMtx__&quot;</span>     <span class="token comment">// openid </span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="方式四-凭证式-1" tabindex="-1"><a class="header-anchor" href="#方式四-凭证式-1" aria-hidden="true">#</a> 方式四：凭证式</h4><p>以上三种模式获取的都是用户的 <code>Access-Token</code>，代表用户对第三方应用的授权， 在OAuth2.0中还有一种针对 Client级别的授权， 即：<code>Client-Token</code>，代表应用自身的资源授权</p><p>在Client端的后台访问以下接口：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>http://sa-oauth-server.com:8001/oauth2/client_token
    ?grant_type=client_credentials
    &amp;client_id={value}
    &amp;client_secret={value}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数详解：</p><table><thead><tr><th>参数</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>grant_type</td><td>是</td><td>返回类型，这里请填写：client_credentials</td></tr><tr><td>client_id</td><td>是</td><td>应用id</td></tr><tr><td>client_secret</td><td>是</td><td>应用秘钥</td></tr><tr><td>scope</td><td>否</td><td>申请权限</td></tr></tbody></table><p>接口返回值样例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;client_token&quot;</span><span class="token operator">:</span> <span class="token string">&quot;HmzPtaNuIqGrOdudWLzKJRSfPadN497qEJtanYwE7ZvHQWDy0jeoZJuDIiqO&quot;</span><span class="token punctuation">,</span>    <span class="token comment">// Client-Token 值</span>
        <span class="token string-property property">&quot;expires_in&quot;</span><span class="token operator">:</span> <span class="token number">7199</span><span class="token punctuation">,</span>     <span class="token comment">// Token剩余有效时间，单位秒 </span>
        <span class="token string-property property">&quot;client_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1001&quot;</span><span class="token punctuation">,</span>    <span class="token comment">// 应用id</span>
        <span class="token string-property property">&quot;scope&quot;</span><span class="token operator">:</span> <span class="token keyword">null</span>           <span class="token comment">// 包含权限 </span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：<code>Client-Token</code>具有延迟作废特性，即：在每次获取最新<code>Client-Token</code>的时候，旧<code>Client-Token</code>不会立即过期，而是作为<code>Past-Token</code>再次储存起来， 资源请求方只要携带其中之一便可通过Token校验，这种特性保证了在大量并发请求时不会出现“新旧Token交替造成的授权失效”， 保证了服务的高可用</p><h2 id="sa-oauth2模块常用方法" tabindex="-1"><a class="header-anchor" href="#sa-oauth2模块常用方法" aria-hidden="true">#</a> Sa-OAuth2模块常用方法</h2><p>官方示例只提供了基本的授权流程，以及userinfo资源的开放，如果您需要开放更多的接口，则二次开发时用到以下相关API方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 根据 id 获取 Client 信息, 如果 Client 为空，则抛出异常 </span>
<span class="token class-name">SaOAuth2Util</span><span class="token punctuation">.</span><span class="token function">checkClientModel</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取 Access-Token，如果Access-Token为空则抛出异常 </span>
<span class="token class-name">SaOAuth2Util</span><span class="token punctuation">.</span><span class="token function">checkAccessToken</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取 Client-Token，如果Client-Token为空则抛出异常</span>
<span class="token class-name">SaOAuth2Util</span><span class="token punctuation">.</span><span class="token function">checkClientToken</span><span class="token punctuation">(</span>clientToken<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取 Access-Token 所代表的LoginId</span>
<span class="token class-name">SaOAuth2Util</span><span class="token punctuation">.</span><span class="token function">getLoginIdByAccessToken</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 校验：指定 Access-Token 是否具有指定 Scope</span>
<span class="token class-name">SaOAuth2Util</span><span class="token punctuation">.</span><span class="token function">checkScope</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">,</span> scopes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 根据 code码 生成 Access-Token </span>
<span class="token class-name">SaOAuth2Util</span><span class="token punctuation">.</span><span class="token function">generateAccessToken</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 根据 Refresh-Token 生成一个新的 Access-Token</span>
<span class="token class-name">SaOAuth2Util</span><span class="token punctuation">.</span><span class="token function">refreshAccessToken</span><span class="token punctuation">(</span>refreshToken<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 构建 Client-Token </span>
<span class="token class-name">SaOAuth2Util</span><span class="token punctuation">.</span><span class="token function">generateClientToken</span><span class="token punctuation">(</span>clientId<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 回收 Access-Token </span>
<span class="token class-name">SaOAuth2Util</span><span class="token punctuation">.</span><span class="token function">revokeAccessToken</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 持久化：用户授权记录 </span>
<span class="token class-name">SaOAuth2Util</span><span class="token punctuation">.</span><span class="token function">saveGrantScope</span><span class="token punctuation">(</span>clientId<span class="token punctuation">,</span> loginId<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取：Refresh-Token Model</span>
<span class="token class-name">SaOAuth2Util</span><span class="token punctuation">.</span><span class="token function">getRefreshToken</span><span class="token punctuation">(</span>refreshToken<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关的配置表" tabindex="-1"><a class="header-anchor" href="#相关的配置表" aria-hidden="true">#</a> 相关的配置表</h2><table><thead><tr><th>参数名称</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>isCode</td><td>Boolean</td><td>true</td><td>是否打开模式：授权码（Authorization Code）</td></tr><tr><td>isImplicit</td><td>Boolean</td><td>false</td><td>是否打开模式：隐藏式（Implicit）</td></tr><tr><td>isPassword</td><td>Boolean</td><td>false</td><td>是否打开模式：密码式（Password）</td></tr><tr><td>isClient</td><td>Boolean</td><td>false</td><td>是否打开模式：凭证式（Client Credentials）</td></tr><tr><td>isNewRefresh</td><td>Boolean</td><td>false</td><td>是否在每次 Refresh-Token 刷新 Access-Token 时，产生一个新的 Refresh-Token</td></tr><tr><td>codeTimeout</td><td>long</td><td>300</td><td>Code授权码 保存的时间(单位秒) 默认五分钟</td></tr><tr><td>accessTokenTimeout</td><td>long</td><td>7200</td><td>Access-Token 保存的时间(单位秒) 默认两个小时</td></tr><tr><td>refreshTokenTimeout</td><td>long</td><td>2592000</td><td>Refresh-Token 保存的时间(单位秒) 默认30 天</td></tr><tr><td>clientTokenTimeout</td><td>long</td><td>7200</td><td>Client-Token 保存的时间(单位秒) 默认两个小时</td></tr></tbody></table><p>配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># Sa-Token 配置</span>
<span class="token key atrule">sa-token</span><span class="token punctuation">:</span> 
    <span class="token key atrule">token-name</span><span class="token punctuation">:</span> satoken<span class="token punctuation">-</span>server
    <span class="token comment"># OAuth2.0 配置 </span>
    <span class="token key atrule">oauth2</span><span class="token punctuation">:</span> 
        <span class="token key atrule">is-code</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">is-implicit</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">is-password</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">is-client</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,98);function M(W,K){const a=o("ExternalLinkIcon");return c(),i("div",null,[C,S,O,n("p",null,[s("这玩意整体来说有点绕，不过你可以参考下面的介绍很快的了解这玩意（摘抄自阮一峰老师的"),n("a",I,[s("博客"),t(a)]),s("）")]),R,n("p",null,[s("OAuth 2.0 的标准是 "),n("a",j,[s("RFC 6749"),t(a)]),s(" 文件。该文件先解释了 OAuth 是什么。")]),z,n("p",null,[s("所以，我们要先去GitHub"),n("a",E,[s("登记"),t(a)]),s("一下")]),L,n("p",null,[s("然后浏览器访问"),n("a",H,[s("http://localhost:8080/"),t(a)])]),U,n("p",null,[s("a-OAuth2 模块基于 "),n("a",B,[s("RFC-6749 标准"),t(a)]),s(" 编写，基于不同的使用场景，OAuth2.0设计了四种模式：")]),N,n("figure",null,[D,n("figcaption",null,[n("a",P,[s("https://oss.dev33.cn/sa-token/doc/oauth2/sa-oauth2-setup.png"),t(a)])])]),G])}const J=p(T,[["render",M],["__file","17-2-OAuth.html.vue"]]);export{J as default};
