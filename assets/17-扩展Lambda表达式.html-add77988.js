const a=JSON.parse('{"key":"v-1f0b3204","path":"/JavaLang/JavaSE/17-%E6%89%A9%E5%B1%95Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","title":"17-扩展-Lambda表达式","lang":"zh-CN","frontmatter":{"title":"17-扩展-Lambda表达式","date":"2021-11-13T17:50:31.000Z","category":"JavaSE","tag":["Java","JavaSE","Lambda"],"description":"简要信息 λ（alt+42699）希腊字母表中的第十一位字符，英语名称为Lambda 支持的版本：JDK8，8+，是由JDK8开始引入的，使用它设计的代码会更加简洁，通过Lambda表达式，可以替代我们以前经常写的匿名内部类来实现接口，Lambda表达式的本质是一个函数 用途: 避免匿名内部类定义过多 其实质属于函数式编程的概念 为什么要使用Lambda表达式？ 避免匿名内部类定义过多 可以让代码看起来更简洁 去掉了一堆没有意义的代码，只留下核心的逻辑 也许刚刚用它的时候，不但不觉得简介，反而觉得更乱了，看不懂，那是因为还没习惯，习惯就好（就和其他语言中的匿名函数，匿名方法一样，刚开始用的时候不习惯，用习惯了习惯用） 在正式开始之前，得先了解一些东西 Function Interface（函数式接口）是lambda表达式的关键所在 函数式接口的定义： 任何接口，如果只包含唯一一个抽象方法，那么他就是一个函数式接口 对于函数式接口，可以通过lambda表达式来创建该接口的对象","head":[["meta",{"property":"og:url","content":"http://www.amayakite.github.io/JavaLang/JavaSE/17-%E6%89%A9%E5%B1%95Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Amayakite Blogs"}],["meta",{"property":"og:title","content":"17-扩展-Lambda表达式"}],["meta",{"property":"og:description","content":"简要信息 λ（alt+42699）希腊字母表中的第十一位字符，英语名称为Lambda 支持的版本：JDK8，8+，是由JDK8开始引入的，使用它设计的代码会更加简洁，通过Lambda表达式，可以替代我们以前经常写的匿名内部类来实现接口，Lambda表达式的本质是一个函数 用途: 避免匿名内部类定义过多 其实质属于函数式编程的概念 为什么要使用Lambda表达式？ 避免匿名内部类定义过多 可以让代码看起来更简洁 去掉了一堆没有意义的代码，只留下核心的逻辑 也许刚刚用它的时候，不但不觉得简介，反而觉得更乱了，看不懂，那是因为还没习惯，习惯就好（就和其他语言中的匿名函数，匿名方法一样，刚开始用的时候不习惯，用习惯了习惯用） 在正式开始之前，得先了解一些东西 Function Interface（函数式接口）是lambda表达式的关键所在 函数式接口的定义： 任何接口，如果只包含唯一一个抽象方法，那么他就是一个函数式接口 对于函数式接口，可以通过lambda表达式来创建该接口的对象"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-17T12:51:48.000Z"}],["meta",{"property":"article:author","content":"Amayakite"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaSE"}],["meta",{"property":"article:tag","content":"Lambda"}],["meta",{"property":"article:published_time","content":"2021-11-13T17:50:31.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-17T12:51:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"17-扩展-Lambda表达式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-13T17:50:31.000Z\\",\\"dateModified\\":\\"2023-06-17T12:51:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amayakite\\",\\"url\\":\\"https://github.com/Amayakite\\"}]}"]]},"headers":[{"level":2,"title":"简要信息","slug":"简要信息","link":"#简要信息","children":[]},{"level":2,"title":"表达式的使用","slug":"表达式的使用","link":"#表达式的使用","children":[]},{"level":2,"title":"Lambda语法细讲","slug":"lambda语法细讲","link":"#lambda语法细讲","children":[]},{"level":2,"title":"进一步精简语法","slug":"进一步精简语法","link":"#进一步精简语法","children":[]},{"level":2,"title":"方法引用","slug":"方法引用","link":"#方法引用","children":[]},{"level":2,"title":"构造方法引用","slug":"构造方法引用","link":"#构造方法引用","children":[]},{"level":2,"title":"Lambda的实际应用","slug":"lambda的实际应用","link":"#lambda的实际应用","children":[]},{"level":2,"title":"@FunctionallInterface注解","slug":"functionallinterface注解","link":"#functionallinterface注解","children":[{"level":3,"title":"Java内置函数式接口","slug":"java内置函数式接口","link":"#java内置函数式接口","children":[]}]}],"git":{"createdTime":1687006308000,"updatedTime":1687006308000,"contributors":[{"name":"Amayakite","email":"amayakite@qq.com","commits":1}]},"readingTime":{"minutes":7.09,"words":2128},"filePathRelative":"JavaLang/JavaSE/17-扩展Lambda表达式.md","localizedDate":"2021年11月13日","excerpt":"<h2> 简要信息</h2>\\n<ul>\\n<li>\\n<p>λ（alt+42699）希腊字母表中的第十一位字符，英语名称为Lambda</p>\\n</li>\\n<li>\\n<p>支持的版本：<code>JDK8，8+</code>，是由JDK8开始引入的，使用它设计的代码会更加简洁，通过Lambda表达式，可以替代我们以前经常写的匿名内部类来实现接口，Lambda表达式的本质是一个函数</p>\\n</li>\\n<li>\\n<p>用途:</p>\\n<ul>\\n<li>避免匿名内部类定义过多</li>\\n<li>其实质属于函数式编程的概念</li>\\n</ul>\\n</li>\\n<li>\\n<p>为什么要使用Lambda表达式？</p>\\n<ul>\\n<li>避免匿名内部类定义过多</li>\\n<li>可以让代码看起来更简洁</li>\\n<li>去掉了一堆没有意义的代码，只留下核心的逻辑</li>\\n</ul>\\n</li>\\n<li>\\n<p>也许刚刚用它的时候，不但不觉得简介，反而觉得更乱了，看不懂，那是因为还没习惯，习惯就好（就和其他语言中的匿名函数，匿名方法一样，刚开始用的时候不习惯，用习惯了习惯用）</p>\\n</li>\\n<li>\\n<p>在正式开始之前，得先了解一些东西</p>\\n<ul>\\n<li><code>Function Interface</code>（函数式接口）是lambda表达式的关键所在</li>\\n<li>函数式接口的定义：\\n<ul>\\n<li>任何接口，如果<strong>只包含唯一一个抽象方法</strong>，那么他就是一个函数式接口</li>\\n<li>对于函数式接口，可以通过lambda表达式来创建该接口的对象</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{a as data};
