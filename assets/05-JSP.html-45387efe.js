import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-3ab2953d.js";const i="/images/Java/JavaEE/05-JSP/image-20211206120843372.png",u="/images/Java/JavaEE/05-JSP/image-20211206123334428.png",r="/images/Java/JavaEE/05-JSP/image-20211206123425700.png",k="/images/Java/JavaEE/05-JSP/image-20211206123540480.png",d="/images/Java/JavaEE/05-JSP/image-20211206141244413.png",v="/images/Java/JavaEE/05-JSP/image-20211206140558244.png",m="/images/Java/JavaEE/05-JSP/image-20211206142755283.png",g="/images/Java/JavaEE/05-JSP/image-20211206142845918.png",b="/images/Java/JavaEE/05-JSP/image-20211206144442202.png",h="/images/Java/JavaEE/05-JSP/image-20211206145400795.png",f="/images/Java/JavaEE/05-JSP/image-20211206145505903.png",q="/images/Java/JavaEE/05-JSP/image-20211206150030961.png",x="/images/Java/JavaEE/05-JSP/image-20211206150147744.png",y="/images/Java/JavaEE/05-JSP/image-20211206150649757.png",w="/images/Java/JavaEE/05-JSP/image-20211206151722723.png",S="/images/Java/JavaEE/05-JSP/image-20211206152007851.png",j="/images/Java/JavaEE/05-JSP/image-20211206152620654.png",_="/images/Java/JavaEE/05-JSP/image-20211206152719104.png",E="/images/Java/JavaEE/05-JSP/image-20211206154103227.png",J="/images/Java/JavaEE/05-JSP/image-20211206154340122.png",C="/images/Java/JavaEE/05-JSP/image-20211206153413808.png",P="/images/Java/JavaEE/05-JSP/image-20211206162047442.png",F="/images/Java/JavaEE/05-JSP/image-20211206164556420.png",L="/images/Java/JavaEE/05-JSP/image-20211206165002714.png",I="/images/Java/JavaEE/05-JSP/image-20211206171508674.png",T="/images/Java/JavaEE/05-JSP/image-20211206171750922.png",H="/images/Java/JavaEE/05-JSP/image-20211206171800762.png",A="/images/Java/JavaEE/05-JSP/image-20211206172946529.png",O="/images/Java/JavaEE/05-JSP/image-20211206223248677.png",R="/images/Java/JavaEE/05-JSP/image-20211206230851372.png",z="/images/Java/JavaEE/05-JSP/image-20211206231744235.png",M="/images/Java/JavaEE/05-JSP/image-20211207121352017.png",N="/images/Java/JavaEE/05-JSP/image-20211207121932296.png",$="/images/Java/JavaEE/05-JSP/image-20211207153825970.png",B="/images/Java/JavaEE/05-JSP/image-20211207161617663.png",W="/images/Java/JavaEE/05-JSP/image-20211207161818205.png",D="/images/Java/JavaEE/05-JSP/image-20211207163532641.png",U="/images/Java/JavaEE/05-JSP/image-20211207180618388.png",V="/images/Java/JavaEE/05-JSP/image-20211207214110480.png",G="/images/Java/JavaEE/05-JSP/image-20211207214130720.png",K="/images/Java/JavaEE/05-JSP/image-20211207215653754.png",X="/images/Java/JavaEE/05-JSP/image-20211207215731561.png",Y="/images/Java/JavaEE/05-JSP/image-20211207221430453.png",Q="/images/Java/JavaEE/05-JSP/image-20211207223958124.png",Z="/images/Java/JavaEE/05-JSP/image-20211207224718369.png",nn="/images/Java/JavaEE/05-JSP/image-20211207225744152.png",sn="/images/Java/JavaEE/05-JSP/image-20211207231512239.png",an={},tn=e('<h2 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍" aria-hidden="true">#</a> 基本介绍</h2><p>​ Jsp的全称是 Java Server Pages，Java的服务器页面</p><p>​ JSP的主要作用是替代Servlet程序回传HTML页面的数据</p><p>​ 因为Servlet程序回传HTML页面数据是一件非常繁琐的事情，开发成本和维护成本都极高</p><p>​ (我上一个文章用的并非是完整的SSM思想，正确的SSM思想是在收到用户数据后回传HTML页面，并让用户跳转到指定页面)</p><p>​ <strong>Jsp目前来说可以算是一个过时的东西，前后端分离才是主流</strong></p><p>​ 或者说SSM也是一个过时的东西（耦合性太高了）</p><p>​ 但还是有必要学习下</p><p>比如说我们正常的通过流来传输一些HTML数据，是比较繁琐的</p><p>假设需要动态传递给客户端数据（不用ajax的前提下）</p><figure><img src="'+i+`" alt="image-20211206120843372" tabindex="0" loading="lazy"><figcaption>image-20211206120843372</figcaption></figure><p>截下来使用JSP来简化这一步操作</p><p>在webapp目录下新建一个a.jsp</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%--
  Created by IntelliJ IDEA.
  User: Amayakite
  Date: 2021/12/6
  Time: 12:09
  To change this template use File | Settings | File Templates.
--%&gt;
&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
这里可以写任意的HTML内容，相当于是一个增强版的HTML，具体后面说
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jsp的本质" tabindex="-1"><a class="header-anchor" href="#jsp的本质" aria-hidden="true">#</a> JSP的本质</h3><p>本事是一个Servlet</p><p>我们现在创建一个<code>a.jsp</code>和<code>b.jsp</code>，在里面写入不同的内容，然后试图访问他们两</p><p>打包后的资源文件夹位置如下所示</p><p><img src="`+u+'" alt="image-20211206123334428" loading="lazy">我们先进入这个文件夹，然后访问a.jsp，看看会发生什么：</p><p><img src="'+r+'" alt="image-20211206123425700" loading="lazy">可以看到，未访问的时候，该文件夹下的<code>work\\Catalina\\localhost\\jsp\\org\\apache\\jsp</code>这个路境内首先只有一个index_jsp.class</p><p>访问后：</p><figure><img src="'+k+`" alt="image-20211206123540480" tabindex="0" loading="lazy"><figcaption>image-20211206123540480</figcaption></figure><p>然后看看a.jsp的源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.13
 * Generated at: 2021-12-06 04:35:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */</span>
<span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jsp</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token comment">//HttpJspBase 这个类之前说过 相当于HttpServlet的子类  也就是说是一个Servlet程序</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> a_jsp <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span>HttpJspBase</span>
    <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span>JspSourceDependent</span><span class="token punctuation">,</span>
                 <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span>JspSourceImports</span> <span class="token punctuation">{</span>
 <span class="token comment">//.... 这里省略一堆代码</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">_jspService</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletResponse</span> response<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>ServletException</span> <span class="token punctuation">{</span>

      <span class="token comment">//这里省略一堆判定内容</span>


    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">//熟悉的流</span>
      response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      pageContext <span class="token operator">=</span> _jspxFactory<span class="token punctuation">.</span><span class="token function">getPageContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span>
         <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">8192</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      _jspx_page_context <span class="token operator">=</span> pageContext<span class="token punctuation">;</span>
      application <span class="token operator">=</span> pageContext<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      config <span class="token operator">=</span> pageContext<span class="token punctuation">.</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      session <span class="token operator">=</span> pageContext<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      out <span class="token operator">=</span> pageContext<span class="token punctuation">.</span><span class="token function">getOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      _jspx_out <span class="token operator">=</span> out<span class="token punctuation">;</span>

      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;html&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;head&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;    &lt;title&gt;Title&lt;/title&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/head&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;body&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;这里是A.jsp&lt;/h1&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/body&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/html&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span></span>SkipPageException</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        out <span class="token operator">=</span> _jspx_out<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> out<span class="token punctuation">.</span><span class="token function">getBufferSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isCommitted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              out<span class="token punctuation">.</span><span class="token function">clearBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_jspx_page_context <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> _jspx_page_context<span class="token punctuation">.</span><span class="token function">handlePageException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      _jspxFactory<span class="token punctuation">.</span><span class="token function">releasePageContext</span><span class="token punctuation">(</span>_jspx_page_context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：经过查看<code>a.jsp</code>自动转换成的java程序，可以得到结果，jsp就是Servlet程序</p><h3 id="头部的page指令和它的属性" tabindex="-1"><a class="header-anchor" href="#头部的page指令和它的属性" aria-hidden="true">#</a> 头部的page指令和它的属性</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到，它的头部有这样一个玩意</p><p>他可以修改jsp页面中的一些重要的属性或者行为</p><p>page中可以写上去的属性</p>`,30),en=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"属性名"),n("th",{style:{"text-align":"left"}},"作用"),n("th",{style:{"text-align":"center"}},"示例")])],-1),pn=n("tr",null,[n("td",{style:{"text-align":"center"}},"language"),n("td",{style:{"text-align":"left"}},[s("表示jsp翻译后是什么语言文件"),n("br"),s("暂时只支持Java")]),n("td",{style:{"text-align":"center"}},'language="java"')],-1),on=n("tr",null,[n("td",{style:{"text-align":"center"}},"contentType"),n("td",{style:{"text-align":"left"}},[s("表示jsp返回的数据类型"),n("br"),s("就相当于Servlet中的setContenType")]),n("td",{style:{"text-align":"center"}},'contentType="image/png"')],-1),cn=n("tr",null,[n("td",{style:{"text-align":"center"}},"pageEncoding"),n("td",{style:{"text-align":"left"}},"表示当前jsp页面文件本身的字符集"),n("td",{style:{"text-align":"center"}},'pageEncoding="utf-8"')],-1),ln=n("tr",null,[n("td",{style:{"text-align":"center"}},"import"),n("td",{style:{"text-align":"left"}},[s("跟Java源代码中一样"),n("br"),s("用导包的方式倒类")]),n("td",{style:{"text-align":"center"}},[s('<%@page import="java.util.ArrayList" %>'),n("br"),s(' <%@page import="java.util.List" %>')])],-1),un=n("tr",null,[n("td",{style:{"text-align":"center"}},"autoFlush"),n("td",{style:{"text-align":"left"}},[s("设置当out输出流缓冲区满了之后"),n("br"),s("是否自动刷新缓冲区"),n("br"),s("默认为true"),n("br"),s("一般不会用这玩意")]),n("td",{style:{"text-align":"center"}},'autoFlush="true"')],-1),rn=n("tr",null,[n("td",{style:{"text-align":"center"}},"buffer"),n("td",{style:{"text-align":"left"}},[s("设置out输出流缓冲区的大小"),n("br"),s("默认是8kb"),n("br"),s("一般也是不动它")]),n("td",{style:{"text-align":"center"}},'buffer="8kb"')],-1),kn=n("td",{style:{"text-align":"center"}},"errorPage",-1),dn={style:{"text-align":"left"}},vn=n("br",null,null,-1),mn=n("br",null,null,-1),gn=n("br",null,null,-1),bn=n("br",null,null,-1),hn={href:"http://ip:port/%E5%B7%A5%E7%A8%8B%E8%B7%AF%E5%BE%84/",target:"_blank",rel:"noopener noreferrer"},fn=n("br",null,null,-1),qn=n("td",{style:{"text-align":"center"}},[s('errorPage="/error"'),n("br"),s('errorPage="/error500.jsp"')],-1),xn=n("tr",null,[n("td",{style:{"text-align":"center"}},"isErrorPage"),n("td",{style:{"text-align":"left"}},[s("设置当前jsp页面是否是错误信息页面"),n("br"),s("默认是false"),n("br"),s("如果设置为true可以获取异常信息")]),n("td",{style:{"text-align":"center"}})],-1),yn=n("tr",null,[n("td",{style:{"text-align":"center"}},"session"),n("td",{style:{"text-align":"left"}},[s("设置访问当前jsp页面，是否会创建"),n("br"),s("HttpSession对象，默认是true"),n("br"),s("也就是是否能创建Session对象"),n("br"),s("一般不动它")]),n("td",{style:{"text-align":"center"}})],-1),wn=n("td",{style:{"text-align":"center"}},"extends",-1),Sn=n("td",{style:{"text-align":"left"}},[s("设置jsp翻译出来的java类默认继承谁"),n("br"),s("一般不动它，让tomcat自动生成")],-1),jn={style:{"text-align":"center"}},_n={href:"http://xxx.xx.xxx.xxx",target:"_blank",rel:"noopener noreferrer"},En=n("br",null,null,-1),Jn=e(`<h2 id="jsp中的常用脚本" tabindex="-1"><a class="header-anchor" href="#jsp中的常用脚本" aria-hidden="true">#</a> Jsp中的常用脚本</h2><h3 id="声明脚本" tabindex="-1"><a class="header-anchor" href="#声明脚本" aria-hidden="true">#</a> 声明脚本</h3><p>格式<code>&lt;%! 这里写java代码 %&gt;</code></p><p>作用：可以给jsp编译出来的Java类定义属性和方法，例如这样：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%!
    public static List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">&gt;</span></span> list = new ArrayList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">&gt;</span></span>();
    public static void add(String s){
        list.add(s);
    }
%&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>声明类属性</li><li>声明static静态代码块</li><li>声明类方法</li><li>声明内部类</li></ul><p>在ieda中，在这个声明脚本中使用的类会自动导入</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%@ page import=&quot;java.util.Map&quot; %&gt;
&lt;%@ page import=&quot;java.util.HashMap&quot; %&gt;
&lt;%!
//声明类属性
    private Integer id;
    private String name;
//静态属性
    private static Map<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,Object</span><span class="token punctuation">&gt;</span></span> map;
//声明static静态代码块
    static{
        map = new HashMap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,Object</span><span class="token punctuation">&gt;</span></span>();
        map.put(&quot;id&quot;,1);
        map.put(&quot;name&quot;,&quot;张三&quot;);
        System.out.println(&quot;Hello Jsp!&quot;);
    }
//声明类方法
    public int abc(){
        return 1;
    }
//声明内部类
 public static class A{
        private Inetger id = 12;
        private String abc = &quot;abc&quot;;
    }
%&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问后，我们的控制台(不是浏览器的)成功输出了：Hello Jsp!</p><p>接下来看看源码他们都变成了啥：直接转换成了java代码...</p><figure><img src="`+d+`" alt="image-20211206141244413" tabindex="0" loading="lazy"><figcaption>image-20211206141244413</figcaption></figure><h3 id="使用声明脚本导入自己的类的时候注意事项" tabindex="-1"><a class="header-anchor" href="#使用声明脚本导入自己的类的时候注意事项" aria-hidden="true">#</a> 使用声明脚本导入自己的类的时候注意事项</h3><p>语法：<code>&lt;%@ page import=&quot;包名&quot; %&gt;</code></p><p>注意 这个包名不能是没有任何目录的，必须得com.xxx.xxx.xx</p><p>比如Person</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%@ page import=&quot;Person&quot; %&gt;
你的包就在java的根目录下 然后这样导入了，但还是会出现异常
必须得将它放在一些其他的包中，例如com.test.Person
然后：
&lt;%@ page import=&quot;com.test.Person&quot; %&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且，需要安装一个依赖，不然一定会在运行时出错</p>`,17),Cn={href:"https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-catalina",target:"_blank",rel:"noopener noreferrer"},Pn=e(`<p>根据你的tomcat版本安装，我这里是10.0.13</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-catalina --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat-catalina<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>10.0.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个包</p><h3 id="表达式脚本-目前来说较少使用" tabindex="-1"><a class="header-anchor" href="#表达式脚本-目前来说较少使用" aria-hidden="true">#</a> 表达式脚本(目前来说较少使用)</h3><p>格式：<code>&lt;!= 这里写表达式 !&gt;</code></p><p>表达式脚本的作用是：在jsp页面上输出数据</p><p>可以输出的数据：</p><ul><li>整数</li><li>浮点</li><li>字符串</li><li>Object(自动调用Object的toString()方法，就像是字符输出流.write()那样)</li></ul><p>在里面可以调用之前定义的方法</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>这里是A.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
&lt;%=12%&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
&lt;%=12.34%&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
&lt;%=&quot;Hello 表达式脚本&quot;%&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
&lt;%=map%&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
&lt;%=abc()%&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+`" alt="image-20211206140558244" tabindex="0" loading="lazy"><figcaption>image-20211206140558244</figcaption></figure><p>看下编译后的源码：哦原来是自动帮我们转换成了<code>out.print()</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello 表达式脚本&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;br&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;br&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;br&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/body&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="表达式脚本的特点" tabindex="-1"><a class="header-anchor" href="#表达式脚本的特点" aria-hidden="true">#</a> 表达式脚本的特点</h4><ol><li>所有表达式都会被翻译到<code>_jspService(req,res)</code>方法中</li><li>所有表达式都会被翻译成为<code>out.print()</code>输出到页面上</li><li>由于表达式脚本翻译的内容都在<code>_jspService(req,res)</code>方法中，所以在所有在这个类中定义的对象都可以直接使用（比如说之前定义的声明脚本中的对象）</li><li>脚本表达式中的表达式不能以<code>;</code>号结束（看源码就知道了，把我们写在里面的代码原原本本的放进<code>out.print()</code>里面了）</li></ol><h3 id="代码脚本" tabindex="-1"><a class="header-anchor" href="#代码脚本" aria-hidden="true">#</a> 代码脚本</h3><p>格式：<code>&lt;% 这里写Java语句 %&gt;</code></p><p>作用：可以在Jsp页面中，编写我们自己需要的功能（得是Java语句）</p><p>注意：运行的时间根据我们拜访的位置决定</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
&lt;%--if语句--%&gt;
&lt;%
    if (true) {
        System.out.println(&quot;if语句&quot;);
    }
%&gt;
&lt;%
    int i = 5;
    for (int i1 = 0; i1 &lt; i; i1++) {
        System.out.println(i1);
    }
%&gt;
&lt;%--可以自由操作_jspService中的对象(req,res)或者这个类中的其他对象--%&gt;
&lt;%
    //注意 这个write是jspService方法中生成的流对象
    out.write(&quot;测试 脚本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>&quot;);
    out.write((String) map.get(&quot;name&quot;)+&quot;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>&quot;);

%&gt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+'" alt="image-20211206142755283" tabindex="0" loading="lazy"><figcaption>image-20211206142755283</figcaption></figure><p>编译后的Java文件</p><figure><img src="'+g+`" alt="image-20211206142845918" tabindex="0" loading="lazy"><figcaption>image-20211206142845918</figcaption></figure><h4 id="代码脚本的特点和注意事项" tabindex="-1"><a class="header-anchor" href="#代码脚本的特点和注意事项" aria-hidden="true">#</a> 代码脚本的特点和注意事项</h4><ol><li><p>代码脚本翻译之后都是在<code>_jspService</code>方法中</p></li><li><p>代码脚本由于翻译到<code>_jspService</code>方法中，所以在<code>_jspService</code>方法中现有的对象都可以直接使用</p></li><li><p>代码脚本还可以由多个代码脚本快组合完成一个完整的语句</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%
    if (true) {%&gt;
&lt;%
        System.out.println(&quot;if语句&quot;);
    }
%&gt;
这样不会出错，并且能正常运行...但是不推荐这样用
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>也可以和表达式脚本一块使用：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%
    int i = 5;
 for (int i1 = 0; i1 &lt; i; i1++) {%&gt;
&lt;%=i%&gt;
&lt;%
    }
%&gt;
这样可以在浏览器上看到0~5
但是依旧不推荐使用
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="jsp中的三种注释方式" tabindex="-1"><a class="header-anchor" href="#jsp中的三种注释方式" aria-hidden="true">#</a> JSP中的三种注释方式</h3><ol><li>HTML注释：<code>&lt;!--这里是HTML注释--&gt;</code><ul><li>会编译到Java源代码中，会在HTML端显示</li></ul></li><li>JSP注释：<code>&lt;%--这里写JSP注释--%&gt;</code><ul><li>不会编译到任何文件中，只是给自个看的</li></ul></li><li>Java注释：就正常的Java注释 <ul><li>会编译到Java源代码中，能在Java源代码中看到</li><li>不能在HTML中看到</li></ul></li></ol><h2 id="jsp的九大内置对象" tabindex="-1"><a class="header-anchor" href="#jsp的九大内置对象" aria-hidden="true">#</a> JSP的九大内置对象</h2><p>​ Tomcat在编译jsp页面成为Servlet源码后，内部会提供九个对象</p><figure><img src="`+b+`" alt="image-20211206144442202" tabindex="0" loading="lazy"><figcaption>image-20211206144442202</figcaption></figure><h3 id="四大域对象" tabindex="-1"><a class="header-anchor" href="#四大域对象" aria-hidden="true">#</a> 四大域对象</h3><p>​ 使用方法都跟<code>Context</code>全局上下文对象一样，可以自由增删改查数据（都很像是map）</p><p>分别是：</p><ul><li>pageContext ：JSP的上下文对象 <ul><li>当前jsp页面范围内有效</li></ul></li><li>request：请求对象 <ul><li>一次请求内有效</li></ul></li><li>session：会话对象 <ul><li>一个会话范围内有效（打开浏览器访问服务器，直到关闭浏览器）</li></ul></li><li>application：ServletContext全局域对象(<code>getServletContext()</code>) <ul><li>整个Web范围都有效，只要web项目不关闭，就一直在</li></ul></li></ul><h3 id="jsp中的out输出和res-getwrite输出的区别" tabindex="-1"><a class="header-anchor" href="#jsp中的out输出和res-getwrite输出的区别" aria-hidden="true">#</a> jsp中的out输出和res.getWrite输出的区别</h3><ul><li><p>out根据当前的位置来输出</p></li><li><p>res.getWrite的输出位置在out之前</p></li></ul><p>先看一个代码吧：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
&lt;%
    out.write(&quot;这个是out输出的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>&quot;);
    response.getWriter().write(&quot;这个是response输出的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>&quot;);
%&gt;

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你在此时是不是觉得输出内容很正常，先是out，再是res，但结果是：</p><figure><img src="`+h+'" alt="image-20211206145400795" tabindex="0" loading="lazy"><figcaption>image-20211206145400795</figcaption></figure><p>emm遇事不决先看源码：</p><figure><img src="'+f+'" alt="image-20211206145505903" tabindex="0" loading="lazy"><figcaption>image-20211206145505903</figcaption></figure><p>源码似乎并没有什么问题，接下来分析下</p><p><img src="'+q+`" alt="image-20211206150030961" loading="lazy"> 说以说，我们可以通过提前调用out.flush的方式来让out中的内容比res中的内容先一步渲染出去</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
&lt;%
    out.write(&quot;这个是out输出的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>&quot;);
    out.flush();
    response.getWriter().write(&quot;这个是response输出的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>&quot;);
%&gt;

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><figure><img src="`+x+'" alt="image-20211206150147744" tabindex="0" loading="lazy"><figcaption>image-20211206150147744</figcaption></figure><h3 id="out-write和out-print的区别" tabindex="-1"><a class="header-anchor" href="#out-write和out-print的区别" aria-hidden="true">#</a> out.write和out.print的区别</h3><p>如果你试图这样：<code>out.write(12)</code>，就能发现页面上啥都没显示</p><figure><img src="'+y+'" alt="image-20211206150649757" tabindex="0" loading="lazy"><figcaption>image-20211206150649757</figcaption></figure><p>但是换成print却又可以</p><p>这里简单说下吧：</p><p>调用<code>out.print</code>的时候，会根据传入的值动态的转换为字符串类型，但是write不会</p><p>所以你明确的知道自己要输出的是字符串的话，就用write，如果不是的话就用print()</p><p>算了还是仔细分析下源码吧：</p><ol><li>首先out对象维护了一个数组（字符缓冲区）`char[] chars``</li><li>``write<code>是直接将值转换成</code>char<code>并放入数组中</code>chars[index]=(char)1`</li><li>1转换成char就是一个ascii码字符了(乱码的)</li><li>如果是<code>char c = &#39;1&#39;</code> 那么转换为<code>(int)c</code>就是<code>49</code></li><li>所以说，如果要将1 放入到char数组中，则需要：<code>chars[index]=(char)49</code></li></ol><p>但是write没有这样做。。print做的方法是：无论传入的是任何类型，都会先转换成字符串类型（比如boolean就转换成“true”和&quot;false&quot;这两个字符串）并传递给write，这样write这样接收到的就始终是字符串中相应数据的编码，就不会出错的了</p><h2 id="jsp常用的标签" tabindex="-1"><a class="header-anchor" href="#jsp常用的标签" aria-hidden="true">#</a> JSP常用的标签</h2><p>众所周知，大部分网站中的结构都是这样的：</p><figure><img src="'+w+'" alt="image-20211206151722723" tabindex="0" loading="lazy"><figcaption>image-20211206151722723</figcaption></figure><p>​ 假设你现在有一个网站，有10w个页面，如果每个页面都这样写重复的内容，那岂不是太难受了，并且修改的时候也要10w个页面的内容都一起改</p><p>​ 所以就要用到JSP中的标签（这玩意用起来跟Vue之类的有点像，不过Vue之类的都是Diff渲染，这个是服务端渲染）</p><h3 id="静态包含" tabindex="-1"><a class="header-anchor" href="#静态包含" aria-hidden="true">#</a> 静态包含</h3><p>就是这样：</p><figure><img src="'+S+`" alt="image-20211206152007851" tabindex="0" loading="lazy"><figcaption>image-20211206152007851</figcaption></figure><p>语法：</p><p><code>&lt;%@ include file=&quot;文件名.jsp&quot; %&gt;</code></p><p>file属性指定要包含的jsp页面的路径，地址中第一个斜杠表示<code>http://ip:port/工程路径/</code>，映射到代码的web目录</p><p>特点：</p><ol><li>静态包含不会编译被包含的jsp页面</li><li>静态包含其实就是把被包含的jsp页面的代码拷贝到包含的位置进行输出</li></ol><p>实例：<code>include/main.jsp</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>
&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>头部信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>主要信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
&lt;%@ include file=&quot;/include/footer.jsp&quot; %&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>include/footer.jsp</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>
&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
这里是独立的页脚信息
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><figure><img src="`+j+'" alt="image-20211206152620654" tabindex="0" loading="lazy"><figcaption>image-20211206152620654</figcaption></figure><p>分析下源码：</p><figure><img src="'+_+`" alt="image-20211206152719104" tabindex="0" loading="lazy"><figcaption>image-20211206152719104</figcaption></figure><p>草，直接把哪个页面的out中的所有内容搬到这里来了......</p><h3 id="jsp动态包含" tabindex="-1"><a class="header-anchor" href="#jsp动态包含" aria-hidden="true">#</a> JSP动态包含</h3><p>先说下使用原则：简单的代码用静态包含，有逻辑的复杂一点的代码用动态包含</p><p>实际工作中，静态包含用的多一些，</p><p>语法：<code>&lt;jsp:include page=&quot;资源路径和资源名&quot;&gt;&lt;/jsp:include&gt;</code></p><p>也可以简写成：<code>&lt;jsp:include page=&quot;资源路径和资源名&quot;/&gt;</code></p><p>特点：</p><ol><li><p>动态包含会把包含的jsp页面也翻译成为Java代码</p></li><li><p>动态包含底层使用如下代码去调用被包含的jsp页面执行输出</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span>JspRuntimeLibrary</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token string">&quot;资源和路径名&quot;</span><span class="token punctuation">,</span> out<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+E+`" alt="image-20211206154103227" tabindex="0" loading="lazy"><figcaption>image-20211206154103227</figcaption></figure></li><li><p>动态包含还可以传递参数：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>include</span> <span class="token attr-name">page</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/include/footer.jsp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>李四<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>王老五<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">jsp:</span>include</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>实例：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>
&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>头部信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>主要信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
&lt;%--&lt;%@ include file=&quot;/include/footer.jsp&quot; %&gt;--%&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>include</span> <span class="token attr-name">page</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/include/footer.jsp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>李四<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>王老五<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">jsp:</span>include</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>footer:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%--
  Created by IntelliJ IDEA.
  User: Amayakite
  Date: 2021/12/6
  Time: 15:22
  To change this template use File | Settings | File Templates.
--%&gt;
&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
这里是独立的页脚信息
&lt;%--获取参数--%&gt;
&lt;%=request.getParameter(&quot;name&quot;) %&gt;&gt;
&lt;%=request.getParameter(&quot;password&quot;) %&gt;&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><figure><img src="`+J+'" alt="image-20211206154340122" tabindex="0" loading="lazy"><figcaption>image-20211206154340122</figcaption></figure><p>和静态包含不同的是，他会生成被包含的文件的编译文件：</p><figure><img src="'+C+`" alt="image-20211206153413808" tabindex="0" loading="lazy"><figcaption>image-20211206153413808</figcaption></figure><p>并且在源码中调用了这样一个方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;头部信息&lt;/h1&gt;&lt;br&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;主要信息&lt;/h1&gt;&lt;br&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">&#39;\\r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//</span>
<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span>JspRuntimeLibrary</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token string">&quot;/include/footer.jsp&quot;</span><span class="token punctuation">,</span> out<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/body&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/html&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jsp请求转发标签" tabindex="-1"><a class="header-anchor" href="#jsp请求转发标签" aria-hidden="true">#</a> JSP请求转发标签</h3><p>这个不是重定向不是重定向这个不是重定向不是重定向这个不是重定向不是重定向这个不是重定向不是重定向</p><p>非常简单：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>
&lt;%--你可以选择在Servlet中的转发方式--%&gt;
&lt;%
    request.getRequestDispatcher(&quot;/a.jsp&quot;).forward(request, response);
%&gt;

&lt;%--或者通过jsp的转发标签来实现--%&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>forward</span> <span class="token attr-name">page</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/a.jsp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>123456<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">jsp:</span>forward</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="listener监听器" tabindex="-1"><a class="header-anchor" href="#listener监听器" aria-hidden="true">#</a> Listener监听器</h2><ol><li>Listener监听器是JavaWeb的三大组件之一，JavaWeb的三大组件分别是：Servlet程序，Filter过滤器和Listener监听器</li><li>Listener和Servlet一样，是一个JavaEE定义的规范（接口）</li><li>监听器的作用是：监听某种事物的变化，通过回调函数，反馈给程序（客户端）去做一些相对应的事情 <ul><li>就有点像是emmmVue的Vuex和React的Redux</li></ul></li><li>监听器有八个，但是随着时代变化，到现在还有人用的就只剩下了: <ul><li><code>ServletContextListener</code></li><li><code>HttpSessionListener</code></li><li><code>ServletRequestListener</code></li></ul></li></ol>`,102),Fn={href:"https://blog.csdn.net/li_jia_wei/article/details/79658205",target:"_blank",rel:"noopener noreferrer"},Ln=e(`<h3 id="servletcontextlistener监听器" tabindex="-1"><a class="header-anchor" href="#servletcontextlistener监听器" aria-hidden="true">#</a> ServletContextListener监听器</h3><p>​ 其他的用法跟这个都差不多</p><p>​ ServletContextListener可以监听ServletContext对象的创建和销毁</p><p>​ ServletContext在Web工程启动的时候创建，全局唯一，在Web停止的时候销毁</p><p>​ ServletContextListener在监听到ServletContext监听和销毁后都会被调用</p><p>​ 坚挺到创建和销毁之后都会分别调用<code>ServletContextListener</code>的方法反馈</p><p>两个方法分别是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServletContextListener</span> <span class="token keyword">extends</span> <span class="token class-name">EventListener</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 在ServletContext对象创建之后马上调用，做初始化
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
  * 在ServletContext销毁的时候调用，做一些后续资源的关闭等
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法：</p><ol><li>编写类去实现ServletContextListener接口</li><li>重写两个方法</li><li>在WEB.xml中通过<code>&lt;listener&gt;</code>标签或者在那个类的顶部加个<code>@WebListener</code>来注册监听器</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebListener</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;程序启动辣&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;程序结束辣&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要在xml中配置监听器的话：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>xx.xx.xx.MyListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><figure><img src="`+P+`" alt="image-20211206162047442" tabindex="0" loading="lazy"><figcaption>image-20211206162047442</figcaption></figure><h2 id="el表达式" tabindex="-1"><a class="header-anchor" href="#el表达式" aria-hidden="true">#</a> EL表达式</h2><p>全程：Expression Language 是表达式语言</p><p>作用：主要是替代JSP页面中表达式脚本在JSP页面中输出</p><p>格式：<code>\${表达式}</code>，在输出null值的时候，会自动转换成空字符串<code>&quot;&quot;</code></p><p>EL表达式在输出数据的时候，要比JSP表达式更简洁</p><p>使用之前，需要在这个页面中设置下isELIgnored属性=false 否则表达式将不会生效</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%@ page isELIgnored=&quot;false&quot;
%&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>并且提前安装好了这个包</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-jsp-api --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat-jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>10.0.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  这里根据你自己的tomcat版本来
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用：举个很简单的例子：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%
request.setAttribute(&quot;key&quot;,&quot;123&quot;);
%&gt;
JS表达式：&lt;%=request.getAttribute(&quot;key&quot;)%&gt;
EL表达式：\${key}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+F+`" alt="image-20211206164556420" tabindex="0" loading="lazy"><figcaption>image-20211206164556420</figcaption></figure><h3 id="el表达式搜索区域的顺序" tabindex="-1"><a class="header-anchor" href="#el表达式搜索区域的顺序" aria-hidden="true">#</a> El表达式搜索区域的顺序</h3><p>按照就近原则：pageContext&gt;request&gt;session&gt;application(Context)从小到大来搜索</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%
    pageContext.setAttribute(&quot;key&quot;, &quot;pageContext&quot;);
    request.setAttribute(&quot;key&quot;, &quot;request&quot;);
    session.setAttribute(&quot;key&quot;, &quot;session&quot;);
    application.setAttribute(&quot;key&quot;, &quot;application&quot;);

%&gt;
EL表达式：\${key}
&lt;%--输出结果应该是：pageContext--%&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+L+`" alt="image-20211206165002714" tabindex="0" loading="lazy"><figcaption>image-20211206165002714</figcaption></figure><h3 id="el表达式输出bean的普通属性、数组属性、list集合属性、map集合属性" tabindex="-1"><a class="header-anchor" href="#el表达式输出bean的普通属性、数组属性、list集合属性、map集合属性" aria-hidden="true">#</a> EL表达式输出Bean的普通属性、数组属性、List集合属性、Map集合属性</h3><p>上代码：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%
    Person person = new Person(&quot;张三&quot;, 20);
    List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Person</span><span class="token punctuation">&gt;</span></span> list = new ArrayList&lt;&gt;();
    list.add(person);
    list.add(new Person(&quot;李四&quot;, 30));
    HashMap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">Person</span><span class="token punctuation">&gt;</span></span> map = new HashMap&lt;&gt;();
    map.put(&quot;person&quot;, person);
    map.put(&quot;person2&quot;, new Person(&quot;王五&quot;, 40));
    pageContext.setAttribute(&quot;person&quot;, person);
    pageContext.setAttribute(&quot;list&quot;, list);
    pageContext.setAttribute(&quot;map&quot;, map);

%&gt;
EL表达式读取Object：\${person}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
&lt;%--读取属性实际上是通过反射机制来读取的，这样private的属性也能读取到--%&gt;
EL表达式读取Person的属性:\${person.name}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
&lt;%--这里读取数组同理--%&gt;
EL表达式读取List的属性:\${list[0].name}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
&lt;%--EL输出list--%&gt;
EL表达式输出list:\${list}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
EL表达式读取Map的属性:\${map.person.name}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
&lt;%--EL输出集合--%&gt;
EL表达式输出map：\${map}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><figure><img src="`+I+'" alt="image-20211206171508674" tabindex="0" loading="lazy"><figcaption>image-20211206171508674</figcaption></figure><h3 id="el表达式-运算" tabindex="-1"><a class="header-anchor" href="#el表达式-运算" aria-hidden="true">#</a> EL表达式-运算</h3><h4 id="关系运算" tabindex="-1"><a class="header-anchor" href="#关系运算" aria-hidden="true">#</a> 关系运算</h4><figure><img src="'+T+'" alt="image-20211206171750922" tabindex="0" loading="lazy"><figcaption>image-20211206171750922</figcaption></figure><p>关系运算是通过方法内的equals来决定的</p><h4 id="逻辑运算" tabindex="-1"><a class="header-anchor" href="#逻辑运算" aria-hidden="true">#</a> 逻辑运算</h4><figure><img src="'+H+'" alt="image-20211206171800762" tabindex="0" loading="lazy"><figcaption>image-20211206171800762</figcaption></figure><p>还有</p><ul><li>算数运算</li><li>empty运算 <ul><li>这玩意是判断一个数据是否为空，如果为空则输出true，否则false</li><li>如果说字符串是空串的话也是会判定为空</li><li>Object数组长度为0时也是空</li><li>list集合、map集合元素个数为0时也是空</li><li>语法：<code>${empty 想要运算的值}</code>：<code>${empty person}</code></li></ul></li><li><code>.</code>运算</li><li>中括号运算</li><li>三元运算 <ul><li><code>${true?&quot;hello&quot;:&quot;no Hell&quot;}</code></li></ul></li></ul><h3 id="el表达式中的11个内置对象" tabindex="-1"><a class="header-anchor" href="#el表达式中的11个内置对象" aria-hidden="true">#</a> EL表达式中的11个内置对象</h3><figure><img src="'+A+'" alt="image-20211206172946529" tabindex="0" loading="lazy"><figcaption>image-20211206172946529</figcaption></figure>',46),In=e("<li><code>pageScope</code>：获取pageContext域属性，相当于pageContext.getAttribute(&quot;xxx&quot;)</li><li><code>requestScope</code>：获取request域属性，相当于request.getAttribute(&quot;xxx&quot;)</li><li><code>sessionScope</code>：获取session域属性，相当于session.getAttribute(&quot;xxx&quot;)</li><li><code>applicationScope</code>：获取application域属性，相当于application.getAttribute(&quot;xxx&quot;)</li><li><code>param</code>：对应参数，它是一个Map，其中key是参数，value是参数值，适用于单值的参数，相当于request.getParameter(&quot;xxx&quot;)</li><li><code>paramValues</code>：对应参数，她是一个Map，其中key是参数，value是多个参数值，适用于多值的参数，相当于request.getParameterValues(&quot;xxx&quot;)</li><li><code>header</code>：对应请求头，它是一个Map，其中key表示头名称，value是单个头值，适用于单值的请求头，相当于request.getHeader(&quot;xxx&quot;)</li><li><code>headerValues</code>：对应请求头，它是一个Map，其中key表示头名称，value是多个头值，适用于多值的请求头，相当于request.getHeaders(&quot;xxx&quot;)</li>",8),Tn=n("code",null,"initParam",-1),Hn=n("code",null,"<context-param>",-1),An={href:"http://initParam.xxx",target:"_blank",rel:"noopener noreferrer"},On=n("code",null,"<param-name>",-1),Rn=n("code",null,"<param-value>",-1),zn=n("li",null,[n("code",null,"cookie"),s("：用于获取cookie，Map<String,Cookie>，其中key是cookie的name，value是cookie对象，例如${cookie.JSESSIONID.value }就是获取sessionId")],-1),Mn=n("li",null,[n("code",null,"pageContext"),s("：可以获取JSP九大内置对象，相当于使用该对象调用getxxx()方法，例如pageContext.getRequest()可以写为${pageContext.request)")],-1),Nn=n("h2",{id:"jstl标签库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jstl标签库","aria-hidden":"true"},"#"),s(" JSTL标签库")],-1),$n=n("p",null,"​ 全称：JSP Standard Tag Library JSP标准标签库。是一个不断完善的开源标签库",-1),Bn=n("p",null,"​ EL表达式主要是为了替换JSP中的表达式脚本，而标签库则是替换了代码脚本，这样使得整个JSP页面变得更加简洁",-1),Wn={href:"https://blog.csdn.net/amiao_2018/article/details/116357125",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://blog.csdn.net/RonaldMH/article/details/116675297",target:"_blank",rel:"noopener noreferrer"},Un=e(`<p>我按照教程来的，先在pom.xml中添加如下依赖 版本目前来说是固定的2.0.0 如果你到时使用的最新版本tomcat且发现这玩意有更新的版本，就用更新的吧</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.glassfish.web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jakarta.servlet.jsp.jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>jakarta.servlet.jsp.jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jakarta.servlet.jsp.jstl-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>然后在web.xml中webapp标签内的内容和tomcat自带的webapps内的web.xml内容一致</strong></p><p>然后再到你的xx.jsp的头部添加如下内容：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>就可以使用jstl了（整好后先重启下服务，不然一定会一直报错）</p><h3 id="基本功能" tabindex="-1"><a class="header-anchor" href="#基本功能" aria-hidden="true">#</a> 基本功能</h3><h4 id="存放数据" tabindex="-1"><a class="header-anchor" href="#存放数据" aria-hidden="true">#</a> 存放数据</h4><p>语法：<code>&lt;c:set scope=&quot;存放区域 可选 默认是page&quot; var=&quot;键&quot; value=&quot;值&quot;/&gt;</code></p><p>scope参数：</p><ul><li>page：表示pageContext</li><li>request：表示requestContext</li><li>session：SessionContext</li><li>application：ServletContext</li></ul><p>例子：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>set</span>  <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>page<span class="token punctuation">&quot;</span></span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
//读取数据
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>out</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${foo}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="判断" tabindex="-1"><a class="header-anchor" href="#判断" aria-hidden="true">#</a> 判断</h4><p>语法：<code>&lt;c:if test=&quot;{EL表达式}&quot;&gt; 表达式为true显示的内容 &lt;/c:if&gt;</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${12==12}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>12=12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>if</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="多重分支判断" tabindex="-1"><a class="header-anchor" href="#多重分支判断" aria-hidden="true">#</a> 多重分支判断</h4><p>if语句并不能做多条件判断（没有elseif）</p><p>但是有替代的标签：choose when otherwise 就跟java中的switch case default那样使用即可</p><p>语法和使用：（注意，在choose标签内不能含有HTML的注释，只能含有jsp注释）</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%
    request.setAttribute(&quot;height&quot;, 50);
%&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>choose</span><span class="token punctuation">&gt;</span></span>
&lt;%--    这里相当于case--%&gt;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${height&gt;100}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>height&gt;100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${height&lt;10}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>height&lt;10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">&gt;</span></span>
&lt;%--    这里相当于default--%&gt;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>otherwise</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>100&gt;height&gt;10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>otherwise</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>choose</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="遍历-foreach" tabindex="-1"><a class="header-anchor" href="#遍历-foreach" aria-hidden="true">#</a> 遍历 forEach</h4><p>看代码吧：</p><p>语法：<code>&lt;c:forEach 可选参数&gt;&lt;/c:forEach&gt;</code></p><ul><li>begin 设置开始的索引</li><li>end 设置结束的索引</li><li>var 设置循环变量</li><li>items 设置一个要遍历的对象（数组、集合）</li><li>setp 表示遍历的步长值 <ul><li>就像是<code>for(int i;i&lt;100;i++)</code>中的i++一样，可以设置setp的值来让i每次加多少</li></ul></li><li>varStatus <ul><li>表示当前遍历的对象的状态</li><li>可以通过<code>varStatus=&quot;status&quot;</code> 来讲statuc设置成为当前对象的状态</li><li>这个状态可以在for循环中调用<code>statuc.方法名</code></li><li>status是一个LoopTagStatus对象：<br><img src="`+O+`" alt="image-20211206223248677" loading="lazy"></li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%--遍历1~10
    begin 设置开始的索引
    end   设置结束的索引
    var   设置循环变量(也是当前正在遍历到的数据)
--%&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">begin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">end</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>i<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    \${i}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">&gt;</span></span>

&lt;%--遍历数组--%&gt;
&lt;%
    request.setAttribute(&quot;arr&quot;, new String[]{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;});
%&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${arr}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">varStatus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>status<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    当前获取到的数据\${item}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
&lt;%--    获取是否是第一条--%&gt;
    \${status.isFirst()}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">&gt;</span></span>
&lt;%--遍历map集合

--%&gt;
&lt;%
    HashMap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">String</span><span class="token punctuation">&gt;</span></span> map = new HashMap&lt;&gt;();
    map.put(&quot;a&quot;, &quot;aa&quot;);
    map.put(&quot;b&quot;, &quot;bb&quot;);
    map.put(&quot;c&quot;, &quot;cc&quot;);
    request.setAttribute(&quot;map&quot;, map);
%&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${map}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>entry<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    &lt;%--    这里获取到的是Map.Entry Entry中包含key和value属性--%&gt;
    当前获取到的数据\${entry.key}:\${entry.value}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">&gt;</span></span>
&lt;%--遍历List集合--%&gt;

&lt;%
    ArrayList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Person</span><span class="token punctuation">&gt;</span></span> list = new ArrayList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Person</span><span class="token punctuation">&gt;</span></span>();
    list.add(new Person(&quot;user1&quot;, 18));
    list.add(new Person(&quot;user2&quot;, 20));
    list.add(new Person(&quot;user3&quot;, 30));
    request.setAttribute(&quot;list&quot;, list);
%&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
&lt;%--这里也可以用begin 和 end 来设置开始和结束位置--%&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">begin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">end</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${list.size()}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${requestScope.list}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>person<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    &lt;%--    这里依然是用到了反射来读取数据--%&gt;
    List数据\${person.name}=\${person.age}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件的上传和下载" tabindex="-1"><a class="header-anchor" href="#文件的上传和下载" aria-hidden="true">#</a> 文件的上传和下载</h2><h3 id="文件的上传" tabindex="-1"><a class="header-anchor" href="#文件的上传" aria-hidden="true">#</a> 文件的上传</h3><ol><li>有一个form标签，method=post</li><li>from标签的encType属性必须为<code>multipart/form-data</code></li><li>在from标签中使用input，type=file 添加上传的文件</li><li>编写服务器代码处理上传的请求</li></ol><p>先说一个可能会遇到的小问题：如果你访问自己写的Servlet不到了的话：</p><p>在web.xml中</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://jakarta.ee/xml/ns/jakartaee<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://jakarta.ee/xml/ns/jakartaee
                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5.0<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">metadata-complete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">&lt;---这条删掉</span> <span class="token attr-name">然后重新部署</span>
<span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jsp：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>\${pageContext.request.contextPath}/upFileService<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multipart/form-data<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${pageContext.request.contextPath}/upFileService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
    选择文件：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>上传<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;upFile&quot;</span><span class="token punctuation">,</span> urlPatterns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/upFileService&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> upFile <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
<span class="token comment">//        接收用户上传的文件</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件上传成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现将用户上传的文件存储" tabindex="-1"><a class="header-anchor" href="#实现将用户上传的文件存储" aria-hidden="true">#</a> 实现将用户上传的文件存储</h3><p>在这之前，先了解下文件上传时浏览器发送了那些数据</p><figure><img src="`+R+`" alt="image-20211206230851372" tabindex="0" loading="lazy"><figcaption>image-20211206230851372</figcaption></figure><p>我们先获取下用户发送的流，看下有哪些内容：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//        获取流</span>
<span class="token class-name">ServletInputStream</span> inputStream <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+z+'" alt="image-20211206231744235" tabindex="0" loading="lazy"><figcaption>image-20211206231744235</figcaption></figure><p>看起来没错，那么该如何获取到这个文件呢？</p><p>我们就得用到第三方的包了（程序员准则：不要重复造轮子）</p>',44),Vn={href:"https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload",target:"_blank",rel:"noopener noreferrer"},Gn={href:"https://apidoc.gitee.com/dromara/hutool/cn/hutool/core/net/multipart/MultipartFormData.html",target:"_blank",rel:"noopener noreferrer"},Kn=e(`<p>使用：这里省略了将文件信息存储进数据库</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        判断用户是否是使用form-data(获取Content-Type)</span>
        <span class="token class-name">String</span> contentType <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>contentType <span class="token operator">+</span> <span class="token string">&quot;********&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;数据异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span>
<span class="token comment">//        正则匹配判断是否是form-data</span>
        <span class="token punctuation">(</span><span class="token operator">!</span>contentType<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;^multipart/form-data.*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;数据异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//        接收用户上传的文件</span>
<span class="token comment">//        获取流</span>
        <span class="token class-name">MultipartFormData</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultipartFormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        data<span class="token punctuation">.</span><span class="token function">parseRequestStream</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        获取用户传入的存储文件名</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getParam</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;数据不正确&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> 
            <span class="token comment">//这里是判断文件名是否为空</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span>username <span class="token operator">=</span> username<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;数据不正确&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//        获取文件</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fileParamNames <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getFileParamNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        如果文件数量是否等于1（每次只能上传一个文件）</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fileParamNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件数量大于1或者小于0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            req<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;文件数量不正确&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//        获取上传的文件名</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> fileParamNames<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 只获取第一个文件 如果说要多文件上传的话 这一步可以改成while</span>
        <span class="token comment">// 并且文件名才用uuid生成</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Object</span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//            保存文件</span>
            <span class="token class-name">UploadFile</span> file <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//            获取文件后缀名</span>
            <span class="token class-name">String</span> suffix <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//            存储文件 这里如果是实际工作的话username要拿uuid加密过一遍</span>
            file<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\&quot;</span> <span class="token operator">+</span> username <span class="token operator">+</span> suffix<span class="token punctuation">)</span><span class="token punctuation">;</span>
            req<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//            上传成功 这里省略将文件信息写入数据库</span>
            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;上传成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件上传成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果（若多个文件上传，只会上传第一个）：</p><figure><img src="`+M+'" alt="image-20211207121352017" tabindex="0" loading="lazy"><figcaption>image-20211207121352017</figcaption></figure><h3 id="文件下载-发送给客户端" tabindex="-1"><a class="header-anchor" href="#文件下载-发送给客户端" aria-hidden="true">#</a> 文件下载（发送给客户端）</h3><p>切记：如果是要给客户端的img的src用的话，最好是服务端先转个base64然后发送过去</p><p>或者是有一个public目录，该目录下存放相应的文件</p><p>大概流程：</p><figure><img src="'+N+`" alt="image-20211207121932296" tabindex="0" loading="lazy"><figcaption>image-20211207121932296</figcaption></figure><h3 id="发送其他文件并让客户端直接下载" tabindex="-1"><a class="header-anchor" href="#发送其他文件并让客户端直接下载" aria-hidden="true">#</a> 发送其他文件并让客户端直接下载</h3><p>jsp代码，这里也可以改成ajax请求</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%--来个输入框让用户输入文件名 传递给服务器下载文件--%&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${pageContext.request.contextPath}/downloadFile<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fileName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>下载<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java代码：</p><p>下面主要解决了： URL编码乱码 、动态文件等问题</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>http<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span></span><span class="token class-name">IOUtils</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLEncoder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">MessageFormat</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> Amayakite
 * <span class="token keyword">@version</span> 1.0.0
 * @BelongsProject 17-Servlet
 * @BelongsPackage com
 * <span class="token keyword">@date</span> 2021/12/7 12:20
 * <span class="token keyword">@description</span> 项目描述
 */</span>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;downloadFile&quot;</span><span class="token punctuation">,</span> urlPatterns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/downloadFile&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> downloadFile <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
<span class="token comment">//        设置头 防止乱码</span>
        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        获取用户传入的文件名</span>
        <span class="token class-name">String</span> fileName <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;fileName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        设置下载的文件名</span>
<span class="token comment">//        获取文件</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;e:/高光时刻.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        二选一即可 下面是动态获取文件发送给客户端 getRealPath 获取文件绝对路径 这里的aaa.txt可以通过filename动态绑定</span>
<span class="token comment">//        file = new File(getServletContext().getRealPath(&quot;/public/aaa.txt&quot;));</span>
<span class="token comment">//        这里动态的获取文件类型 并设置</span>
        <span class="token class-name">String</span> contentType <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>contentType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>contentType<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        如果不是图片、视频类型的文件 则设置下载文件名 设置下载文件的大小 如果是图片、视频类型的文件，则直接返回给客户端的浏览器展示</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>contentType<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;^(image|video).*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//        设置下载的文件名</span>
<span class="token comment">//            先对文件名进行URL编码，防止乱码</span>
            <span class="token class-name">String</span> encode <span class="token operator">=</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>fileName <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Disposition&quot;</span><span class="token punctuation">,</span> <span class="token class-name">MessageFormat</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;attachment;filename={0}{1}&quot;</span><span class="token punctuation">,</span> encode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        设置下载的文件大小</span>
            resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Length&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

<span class="token comment">//        获取文件的输入流</span>
        <span class="token class-name">BufferedInputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        将文件写入到客户端 这里使用IOUTils简化自己的操作</span>
        <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件发送完毕&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> Cookie</h2><h3 id="基本介绍-1" tabindex="-1"><a class="header-anchor" href="#基本介绍-1" aria-hidden="true">#</a> 基本介绍</h3><ol><li>翻译过来就是饼干</li><li>COOKIE是服务器通知客户端保存键值对的一种技术 是一个规范（接口），由tomcat下的包实现了它</li><li>客户端有了Cookie后，每次请求都发送给服务器</li><li>每个Cookie的大小不能超过4kb</li></ol><p>这玩意在学前端的时候应该有体系的说过了，我就不过多赘述</p><p>当我们想在jsp中获取cookie(AJAX同理)</p><p>COOKIE是一个接口，我们的Tomcat包完整了这个借口的封装</p><p>先发送一个请求给服务端，接下来服务端处理</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${pageContext.request.contextPath}/getCookie<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>获取cookie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="新增cookie" tabindex="-1"><a class="header-anchor" href="#新增cookie" aria-hidden="true">#</a> 新增cookie</h3><p>注意，一般cookie的value都会经过一系列的加密在给到客户端</p><p>Cookie 可以重名（前提是作用路径之类的不一样，否则新的会替换掉旧的）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;getCookie&quot;</span><span class="token punctuation">,</span> urlPatterns <span class="token operator">=</span> <span class="token string">&quot;/getCookie&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> getCookie <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
<span class="token comment">//        创建一个cookie</span>
        <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        设置cookie的有效期 不设置的话默认是这次浏览器关闭就失效(默认是-1) 这里的Cookie的时间单位是秒</span>
<span class="token comment">//        设置了一个有效期为7天的cookie</span>
        cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//可以通过如下方式设置一个永久有效的cookie</span>
        <span class="token comment">// 永久有效的定义大概是：5~10年不失效（一般公司撑不了这么久）</span>
        <span class="token comment">// 下面这样大概设置了80年</span>
        cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        
<span class="token comment">//        注释</span>
        cookie<span class="token punctuation">.</span><span class="token function">setComment</span><span class="token punctuation">(</span><span class="token string">&quot;这是一个测试cookie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        设置cookie的路径</span>
<span class="token comment">//        这个默认是当前网址的当前项目的路径（这个/getCookie所在的路径下生效） 可以改写为/ ：当前网站下的所有路径均生效</span>
        cookie<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        设置cookie的域名 这玩意儿是可以设置多个域名的 但是不能设置ip:port的形式</span>
<span class="token comment">//        cookie.setDomain(&quot;www.baidu.com&quot;);</span>
<span class="token comment">//        设置cookie的安全性 设置了这玩意之后，这个cookie只能在https协议下访问 或者localhost（本地）访问</span>
        cookie<span class="token punctuation">.</span><span class="token function">setSecure</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        设置cookie是否为HttpOnly(只能用于http请求，JavaScript代码无法读取)</span>
        cookie<span class="token punctuation">.</span><span class="token function">setHttpOnly</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        设置cookie的版本</span>
        cookie<span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        将cookie添加到响应头中</span>
        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
<span class="token comment">//        可以添加多个cookie</span>
        <span class="token class-name">Cookie</span> cookie1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;18&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookie1<span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接收cookie" tabindex="-1"><a class="header-anchor" href="#接收cookie" aria-hidden="true">#</a> 接收cookie</h3><p>浏览器发送请求给服务器时，默认会携带在自身<code>path</code>下所拥有的所有cookie</p><p>jsp:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%--发送cookie--%&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${pageContext.request.contextPath}/setCookie<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>发送cookie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接收</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;setCookie&quot;</span><span class="token punctuation">,</span> urlPatterns <span class="token operator">=</span> <span class="token string">&quot;/setCookie&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> setCookie <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
<span class="token comment">//       获取客户端发送过来的cookie</span>
        <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        这个cookie有非常多的get方法（就是上面那里设置的这里都能get） 一般就在下面开始验证</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除、修改cookie" tabindex="-1"><a class="header-anchor" href="#删除、修改cookie" aria-hidden="true">#</a> 删除、修改cookie</h3><p>Cookie没有直接的删除方式，如果需要删除的话，设置<code>setMaxAge(1)</code>即可 表示立即失效（1秒后失效）</p><p>如果<code>setMaxAge(0)</code>表示马上失效，两者都可以使用 看个人习惯 ，如果说测试的话一般设置个1（这样还能在浏览器的控制台瞄上一眼）</p><p>比如客户端原先有一个<code>name</code>=<code>张三</code>的cookie</p><p>我们只需要</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//先获取到原先用户的COOKIE</span>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;setCookie&quot;</span><span class="token punctuation">,</span> urlPatterns <span class="token operator">=</span> <span class="token string">&quot;/deleteCookie&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> setCookie <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
<span class="token comment">//       获取客户端发送过来的cookie</span>
        <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">if</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
               <span class="token comment">//设置时长为0表示删除Cookie 在这里还可以判定下cookie的作用路径等再进行删除</span>
               cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果说要删除一个不在当前项目路径下，比如说Cookie：<code>token</code>，当前用户在<code>/test</code>发出请求，而Cookie存储的位置在<code>/</code></p><p>那么就需要通过新建一个同名COOKIE的方式来覆盖</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cookie<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同理，也可以通过这种方式来修改cookie</p><p>不设置path的话，默认针对的是当前项目路径下的cookie</p><p>注意：修改一个cookie的话，如果cookie没创建，就会创建 如果被创建了 就会被修改</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//设置值为自己定的</span>
<span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;132123123132123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cookie<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置有效期为一天</span>
cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关于cookie的path" tabindex="-1"><a class="header-anchor" href="#关于cookie的path" aria-hidden="true">#</a> 关于Cookie的Path</h3><figure><img src="`+$+`" alt="image-20211207153825970" tabindex="0" loading="lazy"><figcaption>image-20211207153825970</figcaption></figure><h2 id="session" tabindex="-1"><a class="header-anchor" href="#session" aria-hidden="true">#</a> Session</h2><h3 id="基本介绍-2" tabindex="-1"><a class="header-anchor" href="#基本介绍-2" aria-hidden="true">#</a> 基本介绍</h3><ol><li>也是一个接口（HttpSession）</li><li>session就是会话，它是用来维护一个客户端和服务器之间关联的一种技术</li><li>每个客户端都有自己的一个Session会话</li><li>Session会话中，我们经常用来保存用户登陆之后的信息</li></ol><h3 id="创建和获取session" tabindex="-1"><a class="header-anchor" href="#创建和获取session" aria-hidden="true">#</a> 创建和获取Session</h3><p>方法：<code>reques.getSession()</code> 返回一个Session对象</p><ul><li>第一次调用 是创建一个session会话</li><li>之后每次调用都是 获取前面创建好的session</li></ul><p><code>session.isNew()</code>：判断是不是一个刚创建出来的session</p><p>每个会话都有一个身份证号，也就是ID值，而且这个ID是唯一的</p><p>当然还有些其他的信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//        创建一个session对象</span>
    <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        判断这个session是否是刚创建出来的</span>
    <span class="token keyword">boolean</span> aNew <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">isNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        获取这个会话的id</span>
    <span class="token class-name">String</span> id <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        获取这个会话的创建时间</span>
    <span class="token keyword">long</span> creationTime <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getCreationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        获取这个会话的最后访问时间</span>
    <span class="token keyword">long</span> lastAccessedTime <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getLastAccessedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        获取这个会话的最大生命周期</span>
    <span class="token keyword">int</span> maxInactiveInterval <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        将如上内容都发送给客户端</span>
    resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;是否是刚创建的Session：&quot;</span> <span class="token operator">+</span> aNew <span class="token operator">+</span> <span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Session的id：&quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Session的创建时间：&quot;</span> <span class="token operator">+</span> creationTime <span class="token operator">+</span> <span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Session的最后访问时间：&quot;</span> <span class="token operator">+</span> lastAccessedTime <span class="token operator">+</span> <span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Session的最大生命周期：&quot;</span> <span class="token operator">+</span> maxInactiveInterval <span class="token operator">+</span> <span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问结果：</p><blockquote><p>是否是刚创建的Session：true<br> Session的id：E219AD1DD1276E79ED6EEC440A065BD4<br> Session的创建时间：1638863911293<br> Session的最后访问时间：1638863911293<br> Session的最大生命周期：1800</p></blockquote><h3 id="读取和写入session" tabindex="-1"><a class="header-anchor" href="#读取和写入session" aria-hidden="true">#</a> 读取和写入session</h3><p>写入：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//        创建一个session对象</span>
    <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;18&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取就是<code>session.getAttribute(&quot;name&quot;)</code>即可，会话有效期内都可以读取到相应的值</p><h3 id="关于session的时长-超时-控制" tabindex="-1"><a class="header-anchor" href="#关于session的时长-超时-控制" aria-hidden="true">#</a> 关于session的时长（超时）控制</h3><p>如果说设置为负数的话，表示用不超时，全局和局部都是如此</p><figure><img src="`+B+'" alt="image-20211207161617663" tabindex="0" loading="lazy"><figcaption>image-20211207161617663</figcaption></figure><p>上面那个是全局的，如果想要设置单个会话的话：</p><figure><img src="'+W+'" alt="image-20211207161818205" tabindex="0" loading="lazy"><figcaption>image-20211207161818205</figcaption></figure><h3 id="让session立刻超时-销毁" tabindex="-1"><a class="header-anchor" href="#让session立刻超时-销毁" aria-hidden="true">#</a> 让session立刻超时（销毁）</h3><p>语法：<code>session.invalidata()</code></p><p>也就是让当前这个Session会话马上超时（无效）</p><h3 id="session的细节说明-重要" tabindex="-1"><a class="header-anchor" href="#session的细节说明-重要" aria-hidden="true">#</a> Session的细节说明（重要）</h3><p>一张图概括，相当于浏览器和服务端之间的Session是通过COOKIE联系的</p><figure><img src="'+D+'" alt="image-20211207163532641" tabindex="0" loading="lazy"><figcaption>image-20211207163532641</figcaption></figure><h3 id="session的实例-验证码" tabindex="-1"><a class="header-anchor" href="#session的实例-验证码" aria-hidden="true">#</a> Session的实例-验证码</h3><p>​ 可以将我在上个章节的验证码的密文/明文存储（存储在Header中的）替换为使用Session来保存，这样用户就始终不知道密文，也无法暴力破解了</p><p>​ 验证码可以通过Google的Kaptcha来生成，或者使用huTool</p><p>​ 当让这样的话得严格限制下Session的超时时间，例如一分钟，否则抗不太住高频请求</p><h2 id="filter过滤器" tabindex="-1"><a class="header-anchor" href="#filter过滤器" aria-hidden="true">#</a> Filter过滤器</h2><p>​ JavaWeb的三大组件之一：Servlet程序、Listener监听器、Filter监听器</p><p>​ Filter是JavaEE的规范，也就是接口</p><p>​ Filter过滤器的作用是：<strong>拦截请求</strong>、过滤响应</p><p>常见的应用场景：</p><ol><li>权限检查</li><li>日记操作</li><li>事务管理</li></ol><p>就有点像Vue的前后置路由守卫那样</p><h3 id="filter的初体验" tabindex="-1"><a class="header-anchor" href="#filter的初体验" aria-hidden="true">#</a> Filter的初体验</h3><p>要求：web工程下，有一个admin目录，这个admin目录下的所有资源（HTMl页面。jpg图片。JSp文件等）都必须是用户登录之后才允许访问</p><figure><img src="'+U+`" alt="image-20211207180618388" tabindex="0" loading="lazy"><figcaption>image-20211207180618388</figcaption></figure><p>根据我们之前学习的东西来说，用户登陆之后，相关信息都在COOKIE中有，或者在Session域中存在</p><p>所以我们可以根据以上两点来判断是否有</p><p>所以说可以在admin/index.jsp中加入如下内容</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%
    Object user = session.getAttribute(&quot;user&quot;);
    if (user == null) {
//        重定向到登录页面
        response.sendRedirect(request.getContextPath() + &quot;/login.jsp&quot;);
    }
%&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>试了下，问题倒是没问题，但是在html或者资源图片中又该怎么实现..这些玩意并不能使用Java代码</p><p>所以我们就得用到Filter</p><h3 id="创建一个简单的filter" tabindex="-1"><a class="header-anchor" href="#创建一个简单的filter" aria-hidden="true">#</a> 创建一个简单的filter</h3><p>前面说过，Filter是一个接口，所以我们要使用它最直接的方式是实现接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 初始化的方法 这玩意我们应该用不着
     * <span class="token keyword">@param</span> <span class="token parameter">filterConfig</span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ServletException</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * doFilter方法 专门用于拦截请求，过滤响应 可以做权限检查
     * <span class="token keyword">@param</span> <span class="token parameter">request</span>
     * <span class="token keyword">@param</span> <span class="token parameter">response</span>
     * <span class="token keyword">@param</span> <span class="token parameter">chain</span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ServletException</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 销毁的方法 这个应该也用不着
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这玩意有三个方法要我们去实现，但是我们只需要实现中间那个就行</p><h3 id="实现dofilter方法" tabindex="-1"><a class="header-anchor" href="#实现dofilter方法" aria-hidden="true">#</a> 实现doFilter方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">//        获取session</span>
        session <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> user <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        如果user为null 表示还没有登陆</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//           重定向到登陆页面</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/login.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//下面是那啥来着到用户页面 对 转发</span>
<span class="token comment">//            request.getRequestDispatcher(&quot;/login.jsp&quot;).forward(request, response);</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token comment">//            如果user不为null 表示已经登陆了</span>
<span class="token comment">//            让程序继续往下访问用户的目标资源</span>
            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置过滤器" tabindex="-1"><a class="header-anchor" href="#配置过滤器" aria-hidden="true">#</a> 配置过滤器</h3><p>有两种配置方式</p><h4 id="通过web-xml配置" tabindex="-1"><a class="header-anchor" href="#通过web-xml配置" aria-hidden="true">#</a> 通过web.xml配置</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--filter标签用于配置一个Filter过滤器--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--配置FIlter的别名--&gt;</span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>AdminFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--配置Filter的全类名--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>com.Filter.MyFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--配置Filter过滤器的拦截路径--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--filter-name表示当前的拦截路径给哪个filter使用--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>AdminFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--filter-pattren配置拦截路径
		/ 表示请求地址为 http://ip:port/工程路径/ 映射到IEDA的WEB目录
  		/admin/* 表示:http://ip:port/工程路径/admin/* 该目录下的所有路径
--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-pattren</span><span class="token punctuation">&gt;</span></span>/admin/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-pattren</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="通过注解来配置" tabindex="-1"><a class="header-anchor" href="#通过注解来配置" aria-hidden="true">#</a> 通过注解来配置</h4><p>一句话搞定：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span> filterName <span class="token operator">=</span> <span class="token string">&quot;AdminFilter&quot;</span><span class="token punctuation">,</span> urlPatterns <span class="token operator">=</span> <span class="token string">&quot;/admin/*&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//   名称       拦截的路径</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filter的生命周期" tabindex="-1"><a class="header-anchor" href="#filter的生命周期" aria-hidden="true">#</a> Filter的生命周期</h3><p>Filter的生命周期包含如下方法：</p><ol><li>构造器方法</li><li>init初始化方法 <ul><li>第一个和第二个都会在WEB工程启动的时候运行（Filter已经创建）</li><li>执行顺序：构造器--&gt;init</li></ul></li><li>doFilter过滤方法 <ul><li>doFilter：每次拦截到请求，就会执行</li><li>没有拦截到请求，则不会执行</li></ul></li><li>destory 销毁方法 <ul><li>停止web工程的时候，会执行destory中的方法</li><li>也就是说，停止web工程的时候，也会销毁filter过滤器</li></ul></li></ol><h3 id="filterconfig类" tabindex="-1"><a class="header-anchor" href="#filterconfig类" aria-hidden="true">#</a> FilterConfig类</h3><p>​ 见名知意，它是Filter过滤器的配置文件类</p><p>​ Tomcat每次创建Filter的时候，也会同时创建一个FilterConfig类，这里包含了Filter配置文件的配置信息</p><p>FilterConfig类的作用是获取FIlter过滤器配置的内容</p><ol><li>获取Filter名称：FIlter-name标签中的内容</li><li>获取在filter中配置的init-param标签中的初始化参数</li><li>获取ServletContext对象</li></ol><p>这里我们通过注解生成哦氯气：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>
        filterName <span class="token operator">=</span> <span class="token string">&quot;AdminFilter&quot;</span><span class="token punctuation">,</span>
        urlPatterns <span class="token operator">=</span> <span class="token string">&quot;/admin/*&quot;</span><span class="token punctuation">,</span>
        initParams <span class="token operator">=</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;adminName&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在init中写入如下内容：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;------------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> initParameterNames <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getInitParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        获取在filter中配置的init-param标签中的初始化参数</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>initParameterNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> initParameterNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> filterConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token comment">//        获取过滤器名称</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;过滤器名称:&quot;</span> <span class="token operator">+</span> filterConfig<span class="token punctuation">.</span><span class="token function">getFilterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        获取ServletContext对象</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ServletContext对象:&quot;</span> <span class="token operator">+</span> filterConfig<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终结果：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token hr punctuation">------------------------------</span>
adminName:admin
password:123456
过滤器名称:AdminFilter
ServletContext对象:org.apache.catalina.core.ApplicationContextFacade@79f987f6

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filterchain过滤器链" tabindex="-1"><a class="header-anchor" href="#filterchain过滤器链" aria-hidden="true">#</a> FilterChain过滤器链</h3><p>​ 我们可以看到doFilter方法内有个<code>FilterChain chain</code>参数，并且我们在调用过滤器的时候最后调用了<code>chain.doFilter(request, response);</code>方法</p><p>​ 这玩意目前我看来就跟其他语言中的上下文传递对象挺像的，接下来详细的说明下它</p><p>​ Filter 过滤</p><p>​ Chain 链条</p><p>​ FilterChain 就是过滤器链（多个过滤器如何一起工作）</p><p>比如说我们现在有两个Filter：Filter1 和Filter2</p><p>PS：可以用HttpFilter来操作，只需要重写下doFilter方法即可，自带转型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>filterName <span class="token operator">=</span> <span class="token string">&quot;filter1&quot;</span><span class="token punctuation">,</span> urlPatterns <span class="token operator">=</span> <span class="token string">&quot;/*&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Filter1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpFilter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;filter1 成功拦截了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;filter1 后置代码&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FIlter2的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Filter2 成功拦截了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Filter2 的后置代码执行了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FIlter1的路径是<code>/*</code>，Filter2的路径是<code>/admin/*</code></p><p>接下来访问下<code>/admin/index.jsp</code></p><p>结果：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>filter1 成功拦截了
Filter2 成功拦截了
Filter2 的后置代码执行了
filter1 后置代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+V+'" alt="image-20211207214110480" tabindex="0" loading="lazy"><figcaption>image-20211207214110480</figcaption></figure><p>使用Thread.currentThread.getName()查看线程</p><figure><img src="'+G+`" alt="image-20211207214130720" tabindex="0" loading="lazy"><figcaption>image-20211207214130720</figcaption></figure><h3 id="filter的三种拦截匹配模式" tabindex="-1"><a class="header-anchor" href="#filter的三种拦截匹配模式" aria-hidden="true">#</a> Filter的三种拦截匹配模式</h3><ul><li>精确匹配 <ul><li>例如：<code>/target.jsp</code></li><li>以上配置的路径表示请求地址必须为：<code>http://ip:port/工程路径/target.jsp</code></li></ul></li><li>目录匹配 <ul><li>例如：<code>/public/*</code></li><li>以上配置的路径表示请求地址必须为：<code>http://ip:port/工程路径/public/任意文件</code></li></ul></li><li>后缀名匹配 <ul><li>例如<code>*.html</code></li><li>表示请求地址必须以<code>.html</code>结尾</li><li>例如：<code>/target.html</code>或者<code>/public/aaa.html</code></li></ul></li></ul><p><strong>FIlter过滤器只关心请求的地址是否匹配，不关心请求的资源是否存在</strong></p><h2 id="配置自定义的错误页面" tabindex="-1"><a class="header-anchor" href="#配置自定义的错误页面" aria-hidden="true">#</a> 配置自定义的错误页面</h2><p>在我们 学习过程中 可能会有大量的错误页面出现在网页上，但是那些目前来说都不重要</p><p>但在工作中，往往都得自己配一个错误页面</p><p>配置的方式很简单，在web.xml中添加如下标签即可</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--error-page标签配置-服务器出错后，自动跳转的页面--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--error-code是错误类型--&gt;</span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">&gt;</span></span>500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--localtion标签标识，要跳转去的页面路径（可以是文件 也可以是一个Servlet）--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localtion</span><span class="token punctuation">&gt;</span></span>/404.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localtion</span><span class="token punctuation">&gt;</span></span> 
    <span class="token comment">&lt;!--上面这样配置的是项目根目录下的404.html为发生code 500 错误时自动跳转的页面--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如我现在设置一个ErrorPage页面，内容就一个h1标签里面写着Errorpage</p><figure><img src="`+K+`" alt="image-20211207215653754" tabindex="0" loading="lazy"><figcaption>image-20211207215653754</figcaption></figure><p>然后设置下web.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">&gt;</span></span>500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">&gt;</span></span>/ErrorPage.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在login.jsp中加入一个错误的代码：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%
    System.out.println(12 % 0);
%&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>试图进入login.jsp：发现是转发了内容，而不是重定向，说明我们可以直接编写一个Error的Servlet，然后获取错误内容并存储到数据库之类的</p><figure><img src="`+X+'" alt="image-20211207215731561" tabindex="0" loading="lazy"><figcaption>image-20211207215731561</figcaption></figure><h2 id="i18n国际化" tabindex="-1"><a class="header-anchor" href="#i18n国际化" aria-hidden="true">#</a> I18N国际化</h2><p>​ 这里只是做个引子，实际上在通常情况下，国际化的任务是交给前端来完成的（ReactI18N、VueI18N）</p><p>​ 国际化指的是同一个网站可以支持多种不同的语言，以便不同的国家、地点、用户访问</p><p>​ 关于国际化我们相当的最简单的方案是为不同的国家创建不同的网站</p>',160),Xn={href:"https://www.apple.xn--comhttps-nd0mx14eug2b832d49vt://www.apple.com/cn",target:"_blank",rel:"noopener noreferrer"},Yn=e('<p>​ 但是这种方案并不适合全部公司---造价较高</p><p>​ 我们通常希望一个相同的网站，在相同的人访问的时候，可以展现出不同的语言，实际上这种需求并不强烈，一般真的有国际化需求的公司，主流用的依然是苹果公司的那种方案，为不同国家的人创建不同的页面，所以国际化的内容并不是终点</p><p>​ 国际化的全称是：internationalization 由于字母过长，老外就想了个简单的叫法：I18N，这个单词总共有20个字母，掐头去尾18个，头是I，尾是N</p><p>​ 以后有人跟你说I18N那就是在跟你说国际化</p><h3 id="国际化的相关要素" tabindex="-1"><a class="header-anchor" href="#国际化的相关要素" aria-hidden="true">#</a> 国际化的相关要素</h3><figure><img src="'+Y+`" alt="image-20211207221430453" tabindex="0" loading="lazy"><figcaption>image-20211207221430453</figcaption></figure><p>示例：</p><p>我们最简单的获取当前时区名的方式是使用<code>java.util.Locale</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//获取系统默认语言的国家信息</span>
    <span class="token class-name">Locale</span> locale <span class="token operator">=</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>locale<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//zh_CN</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=============================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//       获取所有的locale</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Locale</span> locale <span class="token operator">:</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token function">getAvailableLocales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>locale<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=============================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 下面是常见的Locale 最常见的是最上面的三个</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">CHINA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">US</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">JAPAN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">FRANCE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">GERMANY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">ITALY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">KOREA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好了，基本的了解完了，接下来实现国际化</p><p>我们先新建两个properties，分别为i18n_zh_CN.properties和老美的，内容分别如下</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>//中国的
<span class="token key attr-name">username</span><span class="token punctuation">=</span><span class="token value attr-value">用户名</span>
<span class="token key attr-name">password</span><span class="token punctuation">=</span><span class="token value attr-value">密码</span>
<span class="token key attr-name">login</span><span class="token punctuation">=</span><span class="token value attr-value">登录</span>
<span class="token key attr-name">logout</span><span class="token punctuation">=</span><span class="token value attr-value">退出</span>

//美国的
<span class="token key attr-name">username</span><span class="token punctuation">=</span><span class="token value attr-value">UserName</span>
<span class="token key attr-name">password</span><span class="token punctuation">=</span><span class="token value attr-value">Password</span>
<span class="token key attr-name">login</span><span class="token punctuation">=</span><span class="token value attr-value">Login</span>
<span class="token key attr-name">logout</span><span class="token punctuation">=</span><span class="token value attr-value">Logout</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一定要放在res文件夹中，对应打包后的classes根目录，否则是无法读取到的：当你的文件名和路径都准确无误时，IEDA会给你自动加上一个资源包的tag（实际上就是在res的根目录）</p><figure><img src="`+Q+`" alt="image-20211207223958124" tabindex="0" loading="lazy"><figcaption>image-20211207223958124</figcaption></figure><p>然后编写一个测试类测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Locale</span> locale <span class="token operator">=</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">US</span><span class="token punctuation">;</span>
    <span class="token class-name">ResourceBundle</span> i18n <span class="token operator">=</span> <span class="token class-name">ResourceBundle</span><span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">&quot;i18n&quot;</span><span class="token punctuation">,</span> locale<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i18n<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你测试美国的时候，发现没有问题，但是测试中国的时候，出了问题：文字乱码了</p>`,17),Qn={href:"https://www.cnblogs.com/feshfans/p/9885985.html",target:"_blank",rel:"noopener noreferrer"},Zn=e('<p>或者像我一样，设置下properties的文件编码，然后删除原先创建的文件，再新建一个相同的文件，就是UTF-8编码了</p><figure><img src="'+Z+`" alt="image-20211207224718369" tabindex="0" loading="lazy"><figcaption>image-20211207224718369</figcaption></figure><h3 id="在网页中使用i18n" tabindex="-1"><a class="header-anchor" href="#在网页中使用i18n" aria-hidden="true">#</a> 在网页中使用I18N</h3><p>这里用JSP代码为例：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%@ page import=&quot;java.util.Locale&quot; %&gt;
&lt;%@ page import=&quot;java.util.ResourceBundle&quot; %&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
&lt;%
    //从请求头中获取locale信息
    Locale locale = request.getLocale();
    System.out.println(locale);
    //获取国际化资源文件
    ResourceBundle i18n =  ResourceBundle.getBundle(&quot;i18n&quot;, locale);

%&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>&lt;%=i18n.getString(&quot;username&quot;)%&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>&lt;%=i18n.getString(&quot;password&quot;)%&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>&lt;%=i18n.getString(&quot;login&quot;)%&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>&lt;%=i18n.getString(&quot;logout&quot;)%&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终结果</p><figure><img src="`+nn+`" alt="image-20211207225744152" tabindex="0" loading="lazy"><figcaption>image-20211207225744152</figcaption></figure><h3 id="如何让用户自己选择语言" tabindex="-1"><a class="header-anchor" href="#如何让用户自己选择语言" aria-hidden="true">#</a> 如何让用户自己选择语言</h3><p>其实非常简单，直接上代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">&quot;java.util.Locale&quot;</span> <span class="token operator">%</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">&quot;java.util.ResourceBundle&quot;</span> <span class="token operator">%</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token annotation punctuation">@page</span> contentType<span class="token operator">=</span><span class="token string">&quot;text/html&quot;</span> pageEncoding<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span> isELIgnored<span class="token operator">=</span><span class="token string">&quot;false&quot;</span> <span class="token operator">%</span><span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>html<span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">%</span>
    <span class="token comment">//从请求头中获取locale信息</span>
    <span class="token class-name">Locale</span> locale <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>locale<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//    获取用户传入的language参数</span>
    <span class="token class-name">String</span> language <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;language&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>language <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> language<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>language<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">&quot;zh&quot;</span><span class="token operator">:</span>
                locale <span class="token operator">=</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">CHINA</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;us&quot;</span><span class="token operator">:</span>
                locale <span class="token operator">=</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">US</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token comment">//默认中文 识别不了的都转成中文</span>
                locale <span class="token operator">=</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">CHINA</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//获取国际化资源文件</span>
    <span class="token class-name">ResourceBundle</span> i18n <span class="token operator">=</span> <span class="token class-name">ResourceBundle</span><span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">&quot;i18n&quot;</span><span class="token punctuation">,</span> locale<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">%</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span>两个<span class="token class-name">A</span>标签分别切换中英文<span class="token operator">--</span><span class="token operator">%</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;\${pageContext.request.contextPath}/index.jsp?language=zh&quot;</span><span class="token operator">&gt;</span>点我切换成中文<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span> <span class="token operator">|</span>
<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;\${pageContext.request.contextPath}/index.jsp?language=us&quot;</span><span class="token operator">&gt;</span><span class="token class-name">English</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>h1<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">%=</span>i18n<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>h1<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">%=</span>i18n<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>h1<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">%=</span>i18n<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;login&quot;</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>h1<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">%=</span>i18n<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;logout&quot;</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开网页，可以自由切换了</p><figure><img src="`+sn+'" alt="image-20211207231512239" tabindex="0" loading="lazy"><figcaption>image-20211207231512239</figcaption></figure><h3 id="使用jstl标签实现国际化" tabindex="-1"><a class="header-anchor" href="#使用jstl标签实现国际化" aria-hidden="true">#</a> 使用JSTL标签实现国际化</h3><p>只能说，我这一步没成功，懒得折腾了，反正以后用不着Tomcat的这玩意</p><p>Tomcat10 太阴间 找不到问题 要看就去看这个系列的最后1P吧，安装教程也没有 （MD 找不到那个包 气死我了）</p>',15),ns=n("iframe",{src:"//player.bilibili.com/player.html?aid=91909529&bvid=BV1Y7411K7zz&cid=157064727&page=325",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true"}," ",-1),ss=n("p",null,"JavaWEB就先学到这，如果你有兴趣的话就跟着尚硅谷敲一遍前端代码。接下来我的学习路线是先学习JUC（JavaSE中的），然后继续学习SPring全家桶",-1);function as(ts,es){const a=o("ExternalLinkIcon");return c(),l("div",null,[tn,n("table",null,[en,n("tbody",null,[pn,on,cn,ln,un,rn,n("tr",null,[kn,n("td",dn,[s("当JSP页面运行时出错"),vn,s("自动跳转去的错误页面路径"),mn,s("这个路径一般都是以斜杠大头"),gn,s("它表示请求地址为："),bn,n("a",hn,[s("http://ip:port/工程路径/"),t(a)]),fn,s("映射到代码的web目录")]),qn]),xn,yn,n("tr",null,[wn,Sn,n("td",jn,[s('extends="'),n("a",_n,[s("xxx.xx.xxx.xxx"),t(a)]),s('"|'),En])])])]),Jn,n("p",null,[n("a",Cn,[s("https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-catalina"),t(a)])]),Pn,n("p",null,[s("关于他们的话这里有"),n("a",Fn,[s("一篇文章"),t(a)]),s("可以概况")]),Ln,n("ul",null,[In,n("li",null,[Tn,s("：获取web.xml中"),Hn,s("内的参数，${ "),n("a",An,[s("initParam.xxx"),t(a)]),s("}，xxx就是"),On,s("标签内的值，进而得到"),Rn,s("中的值")]),zn,Mn]),Nn,$n,Bn,n("p",null,[s("安装参考："),n("a",Wn,[s("这篇博客"),t(a)]),s("和"),n("a",Dn,[s("这篇博客"),t(a)]),s("（Tomcat10+）")]),Un,n("p",null,[s("你这里可以考虑使用Apache的"),n("a",Vn,[s("commons-fileupload"),t(a)]),s("，当然我还是选择"),n("a",Gn,[s("HuTool的文件上传"),t(a)]),s(" 不为别的 就因为中文文档")]),Kn,n("p",null,[s("​ 例如苹果，在美国是："),n("a",Xn,[s("https://www.apple.com，而中国是https://www.apple.com/cn"),t(a)])]),Yn,n("p",null,[s("解决方案："),n("a",Qn,[s("这篇文章"),t(a)]),s("来不动IEDA设置的更该")]),Zn,ns,ss])}const cs=p(an,[["render",as],["__file","05-JSP.html.vue"]]);export{cs as default};
