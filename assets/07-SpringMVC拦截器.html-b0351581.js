const e=JSON.parse('{"key":"v-4ef6028d","path":"/JavaLang/SpringFrameWork/07-SpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8.html","title":"07-SpringMVC拦截器和异常的处理","lang":"zh-CN","frontmatter":{"title":"07-SpringMVC拦截器和异常的处理","date":"2021-12-13T16:25:30.000Z","category":"Spring-FrameWork","tag":["Java","Spring","SpringMvc","JavaWeb","拦截器","过滤器","异常","Execption"],"description":"拦截器基本介绍 ​ SPringMVC的拦截器类似于Servlet开发中的过滤器filter，用于对处理器进行预处理或后处理 ​ 将拦截器按照一定的顺序连接成一条链，这条链也被称为拦截器链，在访问被拦截方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用，拦截器也是AOP思想的具体实现 拦截器和过滤器的区别 区别 过滤器(Filter) 拦截器(Interceptor) 使用范围 是Servlet的一部分，任何JavaWeb工程都可以使用 是SpringMVC框架自己的只有使用了SpringMVC框架才可以使用 拦截范围 在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截 在&lt;mvc:mapping path=\\"\\"/&gt;中配置了/**之后也可以对多个资源进行拦截，但是可以通过&lt;mvc:exculede-mapping paht=\\"\\"/&gt;标签排除不需要拦截的功能","head":[["meta",{"property":"og:url","content":"http://www.amayakite.github.io/JavaLang/SpringFrameWork/07-SpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"Amayakite Blogs"}],["meta",{"property":"og:title","content":"07-SpringMVC拦截器和异常的处理"}],["meta",{"property":"og:description","content":"拦截器基本介绍 ​ SPringMVC的拦截器类似于Servlet开发中的过滤器filter，用于对处理器进行预处理或后处理 ​ 将拦截器按照一定的顺序连接成一条链，这条链也被称为拦截器链，在访问被拦截方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用，拦截器也是AOP思想的具体实现 拦截器和过滤器的区别 区别 过滤器(Filter) 拦截器(Interceptor) 使用范围 是Servlet的一部分，任何JavaWeb工程都可以使用 是SpringMVC框架自己的只有使用了SpringMVC框架才可以使用 拦截范围 在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截 在&lt;mvc:mapping path=\\"\\"/&gt;中配置了/**之后也可以对多个资源进行拦截，但是可以通过&lt;mvc:exculede-mapping paht=\\"\\"/&gt;标签排除不需要拦截的功能"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-17T12:51:48.000Z"}],["meta",{"property":"article:author","content":"Amayakite"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"SpringMvc"}],["meta",{"property":"article:tag","content":"JavaWeb"}],["meta",{"property":"article:tag","content":"拦截器"}],["meta",{"property":"article:tag","content":"过滤器"}],["meta",{"property":"article:tag","content":"异常"}],["meta",{"property":"article:tag","content":"Execption"}],["meta",{"property":"article:published_time","content":"2021-12-13T16:25:30.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-17T12:51:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"07-SpringMVC拦截器和异常的处理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-12-13T16:25:30.000Z\\",\\"dateModified\\":\\"2023-06-17T12:51:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amayakite\\",\\"url\\":\\"https://github.com/Amayakite\\"}]}"]]},"headers":[{"level":2,"title":"拦截器基本介绍","slug":"拦截器基本介绍","link":"#拦截器基本介绍","children":[{"level":3,"title":"拦截器和过滤器的区别","slug":"拦截器和过滤器的区别","link":"#拦截器和过滤器的区别","children":[]},{"level":3,"title":"拦截器的快速入门","slug":"拦截器的快速入门","link":"#拦截器的快速入门","children":[]},{"level":3,"title":"✨preHandle 对用户传入的信息进行处理","slug":"✨prehandle-对用户传入的信息进行处理","link":"#✨prehandle-对用户传入的信息进行处理","children":[]},{"level":3,"title":"postHandle 对ModelAndView的进一步处理","slug":"posthandle-对modelandview的进一步处理","link":"#posthandle-对modelandview的进一步处理","children":[]},{"level":3,"title":"afterCompletion 对异常的处理","slug":"aftercompletion-对异常的处理","link":"#aftercompletion-对异常的处理","children":[]}]},{"level":2,"title":"拦截器的总结以及不拦截某个地址","slug":"拦截器的总结以及不拦截某个地址","link":"#拦截器的总结以及不拦截某个地址","children":[]},{"level":2,"title":"SpringMVC中异常的处理","slug":"springmvc中异常的处理","link":"#springmvc中异常的处理","children":[{"level":3,"title":"异常处理的思路","slug":"异常处理的思路","link":"#异常处理的思路","children":[]}]},{"level":2,"title":"异常处理的两种方式","slug":"异常处理的两种方式","link":"#异常处理的两种方式","children":[{"level":3,"title":"✨SimpleMapExceptionResolver简单异常处理器","slug":"✨simplemapexceptionresolver简单异常处理器","link":"#✨simplemapexceptionresolver简单异常处理器","children":[]},{"level":3,"title":"✨HandlerExceptionResolver自定义异常处理器","slug":"✨handlerexceptionresolver自定义异常处理器","link":"#✨handlerexceptionresolver自定义异常处理器","children":[]}]},{"level":2,"title":"异常处理的总结","slug":"异常处理的总结","link":"#异常处理的总结","children":[]}],"git":{"createdTime":1687006308000,"updatedTime":1687006308000,"contributors":[{"name":"Amayakite","email":"amayakite@qq.com","commits":1}]},"readingTime":{"minutes":10.74,"words":3221},"filePathRelative":"JavaLang/SpringFrameWork/07-SpringMVC拦截器.md","localizedDate":"2021年12月13日","excerpt":"<h2> 拦截器基本介绍</h2>\\n<p>​  SPringMVC的拦截器类似于Servlet开发中的过滤器filter，用于对处理器进行<strong>预处理</strong>或<strong>后处理</strong></p>\\n<p>​  将拦截器按照一定的顺序连接成一条链，这条链也被称为拦截器链，在访问被拦截方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用，拦截器也是AOP思想的具体实现</p>\\n<h3> 拦截器和过滤器的区别</h3>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:center\\">区别</th>\\n<th>过滤器(Filter)</th>\\n<th>拦截器(Interceptor)</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:center\\">使用范围</td>\\n<td>是Servlet的一部分，任何JavaWeb工程都可以使用</td>\\n<td>是SpringMVC框架自己的<br>只有使用了SpringMVC框架才可以使用</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">拦截范围</td>\\n<td>在url-pattern中配置了<code>/*</code>之后，可以对所有要访问的资源进行拦截</td>\\n<td>在<code>&lt;mvc:mapping path=\\"\\"/&gt;</code>中配置了<code>/**</code>之后<br>也可以对多个资源进行拦截，但是可以通过<br><code>&lt;mvc:exculede-mapping paht=\\"\\"/&gt;</code>标签排除不需要拦截的功能</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{e as data};
