import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as p,e as a}from"./app-2d4b26c1.js";const i="/images/JavaSE/12-常用类/image-20211103210315078.png",u="/images/JavaSE/12-常用类/image-20211103221003388.png",r="/images/JavaSE/12-常用类/image-20211103230909848.png",k="/images/JavaSE/12-常用类/image-20211103231305877.png",d="/images/JavaSE/12-常用类/image-20211103232113634.png",m="/images/JavaSE/12-常用类/image-20211103235127338.png",v="/images/JavaSE/12-常用类/image-20211104000459973.png",b="/images/JavaSE/12-常用类/image-20211104001912357.png",g="/images/JavaSE/12-常用类/image-20211104002637352.png",f="/images/JavaSE/12-常用类/image-20211104002924021.png",y="/images/JavaSE/12-常用类/image-20211104004803611.png",h="/images/JavaSE/12-常用类/image-20211104144229377.png",w="/images/JavaSE/12-常用类/image-20211104171931252.png",S="/images/JavaSE/12-常用类/image-20211105005251767.png",q="/images/JavaSE/12-常用类/image-20211105010014540.png",j={},x=a('<h2 id="包装类" tabindex="-1"><a class="header-anchor" href="#包装类" aria-hidden="true">#</a> 包装类</h2><p>包装类(Wrapper)可以理解为，给八种基本的数据类型定义相应的引用类型</p><p><strong>让基本的数据类型有了类的特点，就可以调用类中的方法</strong></p><table><thead><tr><th style="text-align:center;">基本数据类型</th><th style="text-align:center;">包装类</th></tr></thead><tbody><tr><td style="text-align:center;">boolean</td><td style="text-align:center;">Boolean</td></tr><tr><td style="text-align:center;">char</td><td style="text-align:center;">Character</td></tr><tr><td style="text-align:center;">byte</td><td style="text-align:center;"><strong>Byte</strong></td></tr><tr><td style="text-align:center;">short</td><td style="text-align:center;"><strong>Short</strong></td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;"><strong>Integer</strong></td></tr><tr><td style="text-align:center;">long</td><td style="text-align:center;"><strong>Long</strong></td></tr><tr><td style="text-align:center;">float</td><td style="text-align:center;"><strong>Float</strong></td></tr><tr><td style="text-align:center;">double</td><td style="text-align:center;"><strong>Double</strong></td></tr></tbody></table><p>上方，粗体写的类的父类是<strong>Number</strong></p><h3 id="包装类关系图" tabindex="-1"><a class="header-anchor" href="#包装类关系图" aria-hidden="true">#</a> 包装类关系图</h3><figure><img src="'+i+`" alt="image-20211103210315078" tabindex="0" loading="lazy"><figcaption>image-20211103210315078</figcaption></figure><p>上方类中<strong>Boolean和Character直接继承于Comparable，实现了Serializable，Comparable</strong></p><p><strong>Long、Double、Short、Byte、Integer、Float继承于Number(Number实现了Serializable)，并实现了Comparable</strong></p><blockquote><p>Q：看起来这些类很麻烦的样子，为啥要用类来包装这些玩意，普普通通的不好吗？</p><p>A：因为这些类封装的方法实在是太多了，比直接用起来舒服一大截，为啥不用...</p></blockquote><h3 id="包装类和基本数据类型的转换" tabindex="-1"><a class="header-anchor" href="#包装类和基本数据类型的转换" aria-hidden="true">#</a> 包装类和基本数据类型的转换</h3><p>使用特点：</p><ol><li>在Jdk5以前，是需要手动装箱和手动拆箱，<strong>装箱</strong>：基本类型--&gt;包装类型，反之，<strong>拆箱</strong></li><li>在Jdk5以后（含Jdk5）是附带了自动装箱和自动拆箱</li><li>自动装箱底层调用的是ValueOf方法，比如Integer.ValueOf()</li><li>所有包装类的装箱和拆箱方法都一样，看下面演示</li></ol><blockquote><p>演示Integer的装箱和拆箱，其他的几个包装类装箱拆箱方法跟这个一模一样，不一一举例了</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wrapper</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Integer01</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        演示int&lt;---&gt;Integer的装箱和拆箱</span>
<span class="token comment">//        Jdk5以前是手动装箱和拆箱:</span>
        <span class="token keyword">int</span> n1 <span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment">//        如果想把这个普通的数据类型转换成包装类，就需要进行装箱:</span>
<span class="token comment">//        JDK5以前的手动装箱： int--&gt;Integer</span>
        <span class="token class-name">Integer</span> integer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> integer1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        上面这样就是手动装箱..</span>

<span class="token comment">//        JDK5以前的手动拆箱 Integer--&gt;int</span>
        <span class="token keyword">int</span> in2 <span class="token operator">=</span> integer<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        上面这个就是手动拆箱</span>

<span class="token comment">//        在JDK5后，就可以自动装箱和拆箱了</span>
        <span class="token keyword">int</span> n2 <span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span>
<span class="token comment">//         自动装箱 int--&gt;Integer2</span>
        <span class="token class-name">Integer</span> integer2 <span class="token operator">=</span>n2<span class="token punctuation">;</span>
<span class="token comment">//        按照正常的道理来说，这样写是不对的，把一个基本数据类型直接赋予给一个类，这放在其他类里是会报错的。。。。</span>
<span class="token comment">//        这里的底层实际上还是Integer.valueOf(2),Debug一下看看：</span>
        <span class="token comment">/*
        可以看到，在Debug时，运行到这一行，系统自动跳转到Integer的valueOf了
            public static Integer valueOf(int i) {
                if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)
                    return IntegerCache.cache[i + (-IntegerCache.low)];
                return new Integer(i);
            }
        * */</span>

<span class="token comment">//        自动拆箱 Integer ==&gt;int</span>
        <span class="token keyword">int</span> n3 <span class="token operator">=</span>integer2<span class="token punctuation">;</span>
<span class="token comment">//        这里按理说也讲不过去，直接将一个包装类赋给基本数据类型...看看源码吧</span>
        <span class="token comment">/*
        可以看到，Debug后，依旧是调的intValue()..
        public int intValue() {
            return value;
        }
        也就是说，自动拆箱和装箱，在JDK5以后，java开发者整了一套底层原理，自动调用拆箱和装箱
        所以就可以这样自用的赋值。。
        */</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="扩展-经典的面试题" tabindex="-1"><a class="header-anchor" href="#扩展-经典的面试题" aria-hidden="true">#</a> 扩展-经典的面试题</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj1 <span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">?</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//会输出什么？</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可能会下意识的就觉得是1，但并非如此，它实际输出的是1.0</p><p>为啥呢？因为<code>true?new Integer(1):new Double(2.0)</code>这个地方是一个整体，他这之中精度最高的是double，所以结果会提升优先级，最终结果就是1</p><blockquote><p>再来看另外一道题</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj2<span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    obj2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    obj2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里应该输出什么？</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里就很一目了然了，结果是1，因为他们根本不是同一个整体<code>obj2=new Integer(1);</code>跟<code>obj2=new Double(2.0);</code>完全是两码事</p><h3 id="包装类型和string类型的互相装换" tabindex="-1"><a class="header-anchor" href="#包装类型和string类型的互相装换" aria-hidden="true">#</a> 包装类型和String类型的互相装换</h3><blockquote><p>在实际工作中，包装类型往往跟String之间相互转换的工作比较多，所以来看看他们是怎么相互转换的</p><p>这里演示Integer和String的相互转换，其他包装类同理</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wrapper</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WrapperVString</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        包装类(Integer)--&gt;String</span>
        <span class="token class-name">Integer</span> i <span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//自动装箱</span>
<span class="token comment">//        方式1</span>
        <span class="token class-name">String</span> str1 <span class="token operator">=</span>i<span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">//精度原理，懂得都懂</span>
<span class="token comment">//        方式2</span>
        <span class="token class-name">String</span> str2 <span class="token operator">=</span>i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用包装类自带的ToString方法</span>
<span class="token comment">//        方式3</span>
        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        String--&gt;Integer</span>
        <span class="token class-name">String</span> str4<span class="token operator">=</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//        方式1 Integer.parseInt</span>
        <span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里返回的是int类型，然后再用自动装箱</span>
<span class="token comment">//        方式2 new Integer(String str)</span>
        <span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Integer这类的包装类中构造方法比较多，其中就可以直接接收字符串</span>
<span class="token comment">//        要注意的是，无论是通过哪种方式将字符串转换成integer，若字符串不是合发数字的话，会抛出NumberFormatException的异常</span>
<span class="token comment">//        其他包装类也同理</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="integer和character类的常用方法" tabindex="-1"><a class="header-anchor" href="#integer和character类的常用方法" aria-hidden="true">#</a> Integer和Character类的常用方法</h3><p>这些包装类的方法，构造函数，属性之类的可以直接在IEDA的树状图中查看</p><figure><img src="`+u+`" alt="image-20211103221003388" tabindex="0" loading="lazy"><figcaption>image-20211103221003388</figcaption></figure><p>可以看到，光拿Integer就有一大堆方法和属性及常量，接下来了解下Integer和Character中那些常用的方法，当然实际开发过程中要用到哪个方法就去JDK手册中查哪个方法即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wrapper</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WrapperMethods</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回最大值</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回最小值</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是不是数字</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isLetter</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是不是字母</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isUpperCase</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是不是大写</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isLowerCase</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是不是小写</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isWhitespace</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是不是空格</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换成大写</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换成小写</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="扩展-integer面试题" tabindex="-1"><a class="header-anchor" href="#扩展-integer面试题" aria-hidden="true">#</a> 扩展-Integer面试题</h4><blockquote><p>看看下面代码，输出的结果是啥，为什么？</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">Integer</span> m <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> n <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">Integer</span> x <span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> y <span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>首先要确定的一点是，无论是什么情况下，对象和对象的比较始终都是比较地址。</p></li><li><p>两个对象判定是否相等（都是new出来的），所以判断的是他们两是不是同一个对象，即地址是否相等，所以为false</p></li><li><p>这两个不是new出来的，底层用的是<code>Integer.valueOf()</code>，先看看底层源码：</p><ul><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可以看到，这个源码里有个判断，大意是判断i是否大于等于某个值，小于等于某个值，如果是的话就是直接返回一个现有的Integer，否则的话就是New一个出来，那接下来看一看这两个值分别是什么</p></li><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>  
<span class="token comment">//可以看到这里并没有赋值，根据常识可以得知</span>
<span class="token comment">//final定义的属性是必须要赋值的，既然没有直接high=xxx;</span>
<span class="token comment">//那就一定就要在静态代码块中进行赋值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>那么接下来看看他的静态代码块中是否有相应的定义</p></li><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token punctuation">{</span>
    <span class="token comment">// high value may be configured by property</span>
    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> integerCacheHighPropValue <span class="token operator">=</span>
        sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.Integer.IntegerCache.high&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
            i <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Maximum array size is Integer.MAX_VALUE</span>
            h <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">NumberFormatException</span> nfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// If the property cannot be parsed into an int, ignore it.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    high <span class="token operator">=</span> h<span class="token punctuation">;</span> <span class="token comment">//可以看到，这里将high的值设定为了h，h的值为127，所以high=127</span>

    cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
        cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span>
    <span class="token keyword">assert</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high <span class="token operator">&gt;=</span> <span class="token number">127</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>由上得出，当i的值为：-128&lt;=i&lt;=127时，返回的是一个现有的对象(在cache数组中的对象，看这个静态代码块可以知道，类加载的时候这个数组就已经创建好了)，并没有真的new了一个对象，所以他们两个的比较结果为true</p></li></ul></li><li><p>可以看出，这里底层用的依旧是<code>Integer.valueOf()</code>，根据上一点得出的结论进行分析：</p><ul><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public static Integer valueOf(int i) {
    if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)
        return IntegerCache.cache[i + (-IntegerCache.low)];
    return new Integer(i);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>当i的值为：-128&lt;=i&lt;=127时，返回的是一个现有的对象，否则new一个新的对象出来，这里的两个值都是&gt;128</p></li><li><p>所以这两个都是new出来的对象，比较地址返回false</p></li></ul></li></ol><p>运行结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token boolean">false</span>
<span class="token boolean">true</span>
<span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="string-重要" tabindex="-1"><a class="header-anchor" href="#string-重要" aria-hidden="true">#</a> String(重要)</h2><blockquote><p>截止至这里，我么貌似都用习惯了String，设置可能开始的时候，也将他认为是一个基本数据类型，但实际上他不是...</p></blockquote><h3 id="string的基本介绍" tabindex="-1"><a class="header-anchor" href="#string的基本介绍" aria-hidden="true">#</a> String的基本介绍</h3><ol><li><p>String对象用于保存字符串，也就是一组字符(char)序列</p><p>String的关系图：<img src="`+r+`" alt="image-20211103230909848" loading="lazy"></p></li><li><p><strong>字符串常量</strong>对象是用双引号括起来的字符序列，如：<code>&quot;Hello world&quot;,&quot;你好&quot;,&quot;How are you&quot; &quot;15.236&quot;</code>等</p><ul><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">//创建字符串常量</span>
    name<span class="token operator">=</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">;</span> <span class="token comment">//修改字符串常量</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li></li></ul></li><li><p>字符串的字符使用<code>Unicode</code>字符编码，一个字符（不区分字母还是汉字）占两个字节</p></li><li><p>String类常用的构造器(它有相当多的构造器，实现了构造器的多重重载):</p><ul><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s1 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建一个空的String</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">String</span> original<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//带上一些字符串常量</span>
<span class="token class-name">String</span> ss <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 接收一个byte数组</span>
<span class="token class-name">String</span> s3 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过char数组</span>
<span class="token class-name">String</span> s4 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span> startindex<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//指定一个char数组的从哪里开始的多少个字符来创建一个String</span>
<span class="token comment">//记住这最后一个，IO之类的时长用到它</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><figure><img src="`+k+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure></li></ul></li><li><p>String类是一个<code>final</code>类，他不能被继承</p></li><li><p>String中属性<code>private final char value[]</code>，用于存放字符串内容</p><ul><li><img src="'+d+`" alt="image-20211103232113634" tabindex="0" loading="lazy"><figcaption>image-20211103232113634</figcaption></li><li>这个value的说明是：用于存储字符串，并且他的类型是char[]数组</li><li>说明<strong>字符串在底层本质上还是char[]数组</strong></li></ul></li><li><p>一定要注意，这个<strong>value是一个final类型</strong>，不可修改：即<strong>地址不可修改</strong></p><ul><li><p>比如：原先的value指向了一块数据--&gt;&quot;TOM&quot;</p></li><li><p><strong>在指向完&quot;TOM&quot;之后，value就不能指向另外的空间了比如我想把Value的指向改成&quot;Jack&quot;，这是不被允许的</strong></p></li><li><p>但是，我把value值中的&quot;TOM&quot;换成“TOH”或者&quot;TAK&quot;是被允许的</p></li><li><p><strong>也就是说，value的不可修改指的是它里面的单个字符依然可以正常修改(单个字符的内容是可以变化的)，但是Value不能指向一个新的对象(新的地址)</strong></p></li><li><p>举个例子：</p><ul><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token class-name">String_</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">String01</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span><span class="token punctuation">{</span><span class="token char">&#39;H&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;o&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;f&#39;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//结果：fello 没报错，能正常修改，就跟Javascript中定义的const list有点类似，本身的指向不能被重定向，但是里面的内容可以自由修改</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token class-name">String_</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">String01</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span><span class="token punctuation">{</span><span class="token char">&#39;H&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;o&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;f&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value2 <span class="token operator">=</span><span class="token punctuation">{</span><span class="token char">&#39;v&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;o&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;t&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">//value=value2; 不可以修改value的地址</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//如果是这样的话，编译器就直接报错了，final约束是让其地址无法指向一个新的数据空间，但是单独的内容的改变它是允许的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ol><h3 id="创建string对象的两种方式" tabindex="-1"><a class="header-anchor" href="#创建string对象的两种方式" aria-hidden="true">#</a> 创建String对象的两种方式</h3><ul><li>方式1：直接赋值<code>String str =&quot;How are YOU&quot;</code></li><li>方式2：调用构造器<code>String str = new String(&quot;I&#39;m fina thank you,and you?&quot;)</code></li></ul><blockquote><p>这两种方式创建String对象它是不一样的(机制)...接下来说说它的区别</p></blockquote><ol><li>方式1：先从常量池查看是否有<code>How are YOU</code>数据空间，如果有，直接指向；如果没有则重新创建，然后指向，str最终指向的是常量池的空间地址</li><li>方式2：现在堆中创建空间，里面维护了value属性，指向了常量池的<code>I&#39;m fina thank you,and you?</code>空间。如果常量池没有<code>I&#39;m fina thank you,and you?</code>,重新创建，如果有，直接value指向，最终指向的是堆中的空间地址</li><li>内存布局图：<br><img src="`+m+`" alt="image-20211103235127338" loading="lazy"></li></ol><blockquote><p>卧槽瞬间就明朗了，原来是这么一回事...接下来做一道简单的题目:</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> a <span class="token operator">=</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> b <span class="token operator">=</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prinln</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>字符串重写了equals，所以这里的比较实际上是比较两个String对象的value值的所有内容是否相等，如果相等就返回true，否则就返回false</li><li>这里根据上面的内存布局图可以得出，a是直接创建的，b是直接创建的，所以他们连是直接指向同一个常量池中的地址，所以结果为true</li><li>String a 和b的创建流程： <ol><li>String A 创建时，程序在常量池里面看有没有&quot;abc&quot;。发现没有，于是就创建一个，然后让A的地址指向它</li><li>String B 创建时，程序在常量池里面看有没有&quot;abc&quot;，发现有，于是直接让B指向它</li><li>加入常量池中的&quot;abc&quot;地址是0x6151564;那么A和B指向的地址都是0x6151564，即：他们完全相同</li></ol></li></ol><blockquote><p>再来做一道题目</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;hsp&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> b<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>true</li><li>false</li><li>这里分别看下JavaDoc的文档和源码 <ol><li>查看源码，发现：<br><img src="`+v+'" alt="image-20211104000459973" loading="lazy"></li><li>这玩意没有代码，说明是系统底层（JVM）提供的。。然后看看文档，大意是，返回String的常量池中的地址（假设是0x111）</li><li>完整文档：当调用intern方法时：如果池(常量池)已经包含一个等于此String对象的字符串(用equals(Object))来匹配，则返回池中的字符串(地址)，否则，将这个String添加到常量池中，并返回这个String对象的引用</li><li>解读：intern()方法最终返回的是常量池的地址</li><li>然后a的地址也是指向常量池中的(0x111)</li><li>所以可以得出，结果为true</li></ol></li><li>根据3的结果，可以得知，这里比较的是b在堆中的地址和b的value的常量池地址 <ol><li>所以可以得出，他们两一定是不相等的，所以返回false</li></ol></li></ol><figure><img src="'+b+`" alt="image-20211104001912357" tabindex="0" loading="lazy"><figcaption>image-20211104001912357</figcaption></figure><h3 id="字符串的特性" tabindex="-1"><a class="header-anchor" href="#字符串的特性" aria-hidden="true">#</a> 字符串的特性</h3><ol><li>String是一个final类，代表不可变的字符序列</li><li>字符串是不可变的，一个字符串一旦被匹配，其内容是不可变的</li></ol><blockquote><p>小练 以下语句创建了几个对象？画出内存布局图</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s1 <span class="token operator">=</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
s1 <span class="token operator">=</span><span class="token string">&quot;haha&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>两个对象，在s1创建时，往常量池里面添加了hello，在s1重定向时，又往常量池添加了haha</p><figure><img src="`+g+`" alt="image-20211104002637352" tabindex="0" loading="lazy"><figcaption>image-20211104002637352</figcaption></figure><h4 id="扩展-面试题" tabindex="-1"><a class="header-anchor" href="#扩展-面试题" aria-hidden="true">#</a> 扩展-面试题</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> a <span class="token operator">=</span><span class="token string">&quot;hello&quot;</span><span class="token operator">+</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//创建了几个对象？</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一个，底层会自动优化，这里的&quot;hello&quot;+&quot;abc&quot;等价于&quot;helloabc&quot;，底层在运行到这里的时候会自动得到&quot;helloabc&quot;，并将其传入常量池生成(编译器不是傻子)</p><figure><img src="`+f+`" alt="image-20211104002924021" tabindex="0" loading="lazy"><figcaption>image-20211104002924021</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> a <span class="token operator">=</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> b<span class="token operator">=</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> c <span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span> <span class="token comment">//创建了几个对象？</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>创建了a对象</p></li><li><p>创建了b对象</p></li><li><p>这个时候就要用到强大的断点工具了：</p><ol><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>package com.String_;

public class String01 {
    public static void main(String[] args) {
        String a =&quot;hello&quot;;
        String b=&quot;abc&quot;;
//        1 先创建一个StringBuild sb = new StringBuild();
//        2 执行 sb.append(&quot;hello&quot;);
//        3 sb.append(&quot;abc&quot;);
//        4 String c = sb.toString();// tpString:new String(&quot;xxx&quot;);
//        最后其实是c指向堆中的对象(String)value[]--&gt;池中&quot;Helloabc&quot;
        String c =a+b; //在这里DEBUG

    }
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可以在Debug中看到，执行到这一步的时候，是先创建了一个StringBuild，然后再将常量池中的hello 和 abc添加到StringBuild的末尾</p></li><li><p>然后再调用String Build的Tostring方法，new了一个String()，并返回给C</p></li><li><p>同时，根据对new String()的理解，可以得出，newString()时，是在堆中创建一个对象，然后查看池中是否有value值对应的东西，这里发现没有，于是在池中创建&quot;helloabc&quot;,并赋值给value</p></li><li><p>所以说，这一步中创建了两个对象</p></li><li><p>加上new StringBuild 总共创建了三个对象</p></li></ol></li><li><p>因此，总共创建了5个对象，当然，实际上最终的结果是：</p><ol><li>A指向了常量</li><li>B指向了常量</li><li>C指向了堆</li><li>因此，也可以理解为创建了三个对象，但是得了解到这一步到底做了哪些事情</li></ol></li><li><p>如果说这个时候在判断c==&quot;helloabc&quot;</p><ol><li>因为c指向的堆中的对象</li><li>而&quot;helloabc&quot;在常量池</li><li>所以false</li></ol></li></ol><figure><img src="`+y+`" alt="image-20211104004803611" tabindex="0" loading="lazy"><figcaption>image-20211104004803611</figcaption></figure><p>总结：<strong>两个常量相加，结果在池，两个变量相加，结果在堆</strong></p><p>常量相加，直接看池的地址，变量相加，就需要看堆，再通过value映射的地址到池</p><p>所以说，学这玩意，一定要尽量看着源码学（再提一嘴，韩顺平老师真的厉害）</p><blockquote><p>下一题</p></blockquote><p>请根据代码说出打印的结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">String01</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;j&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;v&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;HSP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;h&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String01</span> ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ex<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str<span class="token punctuation">,</span>ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可能看到这道题下意识的就认为结果是：java + hava</p><p>接下来逐步分析下这个代码</p><ol><li>new了一个String01对象 创建了一个新的栈，指向了堆中的String实例对象 <ol><li>这个对象里面有个str，str是String类型的，他会指向堆中的一个String空间 <ol><li>这个String空间中有一个非常重要的属性value，value指向常量池中的&quot;hsp&quot;</li></ol></li><li>还有个char[]数组，数组指向堆中的 [<strong>j|a|v|a</strong>]大概是这样一个数组，并且这个char是final的，不能修改其指向</li></ol></li><li>调用了ex.change方法， 这个方法调用的时候，创建了一个新的栈（Change栈） <ol><li>传入了两个值，str和ch，</li><li>所以相当于是new了两个值，new String ,new char[] ，并把它们指向传进来的两个值</li><li>到这一步就很明确的，给str修改内容就相当于让其指向一个新的常量地址，这样做并不会影响到其他东西，只会将自己的（这个方法中的）string指向的地址更该</li><li>然后是char，char和String一样，指向的都是开始new String01()中的地址，但是这里并没有更该他的指向，而是更该其指定的一个值，这样做并不会更该ch所指向的地址</li></ol></li><li>所以结果就很显而易见了，结果是hsp hava</li></ol><blockquote><p>个人解读change</p></blockquote>`,74),B={start:"0"},I={href:"http://xn--ex-c62c71teke0cv81h.ch",target:"_blank",rel:"noopener noreferrer"},_=n("li",null,[n("p",null,"为了方便区分，这里把change的两个参数分别命名为c1和c2")],-1),A=n("li",null,[n("p",null,'然后程序更该了c1的指向：c1="java"，实际上是更改了c1指向的地址(在池中开辟了新的常量"java",并把c1的地址指向"java")')],-1),O=n("li",null,[n("p",null,"所以到一这一步的时候，c1实际上指向的就不是ex.str的地址了，而是一个新的地址")],-1),C=n("li",null,[n("p",null,"接着，程序更该了c2数组的内容,将原本的['j', 'a', 'v', 'a']，替换成了['h', 'a', 'v', 'a']")],-1),D={href:"http://xn--c2ex-194ftz8t944a96qbupy5b9vp2m9czd9dja890fjqu.ch",target:"_blank",rel:"noopener noreferrer"},M=n("li",null,[n("p",null,"综上所述，得出结论：输出的语句为:hsp and hava")],-1),J=a('<figure><img src="'+h+`" alt="image-20211104144229377" tabindex="0" loading="lazy"><figcaption>image-20211104144229377</figcaption></figure><h3 id="string类常用方法" tabindex="-1"><a class="header-anchor" href="#string类常用方法" aria-hidden="true">#</a> String类常用方法</h3><p>String类是保存字符串常量的，每次更新都需要重新开辟空间，效率低，因此Java设计者还提供了<code>StringBuffer</code>和<code>StringBuilder</code>来增强String的功能并提高效率，在此之前，先来看看下面的的代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">80000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    s<span class="token operator">+=</span><span class="token string">&quot;hello&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，这里循环了80000次，每次都是在创建新的“常量”空间，第一次hello,第二次hellhello....以此类推，总共创建了80001个常量空间(包括创建s的时候)，但是我们只需要用到最后一个空间，所以前80000的就相当于白费了，且创建空间是需要时间的，效率相当的低，这个的解决方法到后面<code>StringBuffer</code>和<code>StringBuilder</code>就知道了，在此之前，必须得知道的是，虽然String在类似于这种场合效率低下，但是他本身也附带了很多很有用的方法，接下来来了解下</p><ul><li><p><code>equals(String str)</code> 比较两个String是否相等，比较的是value数组的值(区分大小写的判断)</p></li><li><p><code>equalsIgnoreCase(String str)</code>比较两个String是否相等(不区分大小写进行判断)</p></li><li><p><code>length()</code>获取字符的个数，字符串的长度</p></li><li><p><code>indexOf(String str)</code> 获取<strong>字符(char)或字符串</strong>在字符串中第一次出现的索引，索引从0开始，如果找不到就返回-1</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s1 <span class="token operator">=</span><span class="token string">&quot;amayakite@qq.com&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-1</span>
<span class="token comment">//也可以放字符串</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prinln</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;kite&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>lastIndexOf(参数同上)</code>获取<strong>字符(char)或字符串</strong>在字符串最后一次出现的索引，索引从0开始，如果找不到就返回-1</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s1 <span class="token operator">=</span><span class="token string">&quot;amayakite@qq.com&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>substring()</code>截取指定范围的字符串</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span><span class="token string">&quot;Hello,张三&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从索引6开始(索引从0开始计算)截取后面所有的内容：张三</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//从索引0到索引(5-1=4)中的所有内容:Hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>trim()</code>去掉前后空格</p></li><li><p><code>charAt()</code>获取某索引处的字符，注意，String不能通过str[index]的方式获取指定索引处的字符</p></li><li><p><code>toUpperCase(String str)</code>将字符串转换为全<strong>大</strong>写</p></li><li><p><code>toLowerCase(String str)</code>将字符串转换为全<strong>小</strong>写</p></li><li><p><code>concat()</code>拼接字符串</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s1 <span class="token operator">=</span><span class="token string">&quot;林黛玉&quot;</span><span class="token punctuation">;</span>
s1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;宝玉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;fahter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;skr~~~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//s1=林黛玉宝玉fahterskr~~~</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>replace()</code>替换字符串中的字符</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>s1<span class="token operator">=</span><span class="token string">&quot;Hello 世界你好 你好 你好&quot;</span><span class="token punctuation">;</span>
s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;你不好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//replace执行后返回的结果才是替换过的，对原对象(s1)没有影响</span>
<span class="token comment">//s2=Hello 世界你不好 你不好 你不好</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>split()</code>分割字符串</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>s1 <span class="token operator">=</span><span class="token string">&quot;锄禾日当午，汗滴禾下土，谁知盘中餐，粒粒皆辛苦&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strArray <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将字符串根据指定的字符进行分割，指定的字符将不会被保留，返回一个数组。split可以传入正则表达式</span>
<span class="token comment">//strArray:[&quot;锄禾日当午&quot;,&quot;汗滴禾下土&quot;,&quot;谁知盘中餐&quot;,&quot;粒粒皆辛苦&quot;]</span>
s1<span class="token operator">=</span><span class="token string">&quot;E:\\\\aaa\\bbb\\\\ccc.txt&quot;</span><span class="token punctuation">;</span>
strArray<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\\\\\&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果要对这种本身含有转义符的东西，如：\\\\分割就要用到\\\\\\\\(转义再转义)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>toCharArray()</code>将字符串转换成char数组</p></li><li><p><code>compareTo()</code>比较两个字符串的大小</p><ul><li><p>如果两个字符串的长度相同，且每个字符也相同，返回0</p></li><li><p>如果长度相同或者不相同，但是在比较时，可以区分大小写，就返回</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>c1 <span class="token operator">!=</span>c2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> c1<span class="token operator">-</span>c2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果前面的部分都相同，就返回str1.len-str2.len</p></li></ul></li><li><p><code>format()</code>格式化字符串</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> age <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> score <span class="token operator">=</span> <span class="token number">98.3</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> gender <span class="token operator">=</span> <span class="token char">&#39;男&#39;</span><span class="token punctuation">;</span>
s1 <span class="token operator">=</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;我的姓名是%s，年龄是%d,成绩是%.2f性别是%c,希望大家喜欢我&quot;</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>score<span class="token punctuation">,</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//s1:我的姓名是John,年龄是10,成绩是32.77，性别是男，希望大家喜欢我</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="string-format-模板字符串-补充" tabindex="-1"><a class="header-anchor" href="#string-format-模板字符串-补充" aria-hidden="true">#</a> String Format(模板字符串)补充</h3><p>format方法使用占位符进行格式化</p><p>常规类型、字符类型和数值类型的占位符格式：</p><p><code>%[index$][标识][最小宽度][.精度]转换符</code></p><p>日期和时间类型的占位符格式：</p><p><code>%[index$][标识][最小宽度]转换符</code></p><p>与参数不对应的占位符格式：</p><p><code>%[标识][最小宽度]转换符</code></p><p>其中index表示参数列表中的位置上的值</p><table><thead><tr><th>转 换 符</th><th>说 明</th><th>示 例</th></tr></thead><tbody><tr><td>%s</td><td>字符串类型</td><td>&quot;mingrisoft&quot;</td></tr><tr><td>%c</td><td>字符类型</td><td>&#39;m&#39;</td></tr><tr><td>%b</td><td>布尔类型</td><td>true</td></tr><tr><td>%d</td><td>整数类型（十进制）</td><td>99</td></tr><tr><td>%x</td><td>整数类型（十六进制）</td><td>FF</td></tr><tr><td>%o</td><td>整数类型（八进制）</td><td>77</td></tr><tr><td>%f</td><td>浮点类型</td><td>99.99</td></tr><tr><td>%.[number]f</td><td>显示小数点后number位，会自动四舍五入</td><td>100.00</td></tr><tr><td>%a</td><td>十六进制浮点类型</td><td>FF.35AE</td></tr><tr><td>%e</td><td>指数类型</td><td>9.38e+5</td></tr><tr><td>%g</td><td>通用浮点类型（f和e类型中较短的）</td><td></td></tr><tr><td>%h</td><td>散列码</td><td></td></tr><tr><td>%%</td><td>百分比类型（自己给自己转义）</td><td>％</td></tr><tr><td>%n</td><td>换行符</td><td></td></tr><tr><td>%tx</td><td>日期与时间类型（x代表不同的日期与时间转换符</td><td></td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  <span class="token class-name">String</span> str<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span> 
  str<span class="token operator">=</span><span class="token class-name">Stringformat</span><span class="token punctuation">(</span><span class="token string">&quot;Hi,%s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;王力&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token class-name">Systemoutprintln</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  str<span class="token operator">=</span><span class="token class-name">Stringformat</span><span class="token punctuation">(</span><span class="token string">&quot;Hi,%s:%s%s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;王南&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;王力&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;王张&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      
  <span class="token class-name">Systemoutprintln</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>              
  <span class="token class-name">Systemoutprintf</span><span class="token punctuation">(</span><span class="token string">&quot;字母a的大写是：%c %n&quot;</span><span class="token punctuation">,</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token class-name">Systemoutprintf</span><span class="token punctuation">(</span><span class="token string">&quot;3&gt;7的结果是：%b %n&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token class-name">Systemoutprintf</span><span class="token punctuation">(</span><span class="token string">&quot;100的一半是：%d %n&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token class-name">Systemoutprintf</span><span class="token punctuation">(</span><span class="token string">&quot;100的16进制数是：%x %n&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token class-name">Systemoutprintf</span><span class="token punctuation">(</span><span class="token string">&quot;100的8进制数是：%o %n&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token class-name">Systemoutprintf</span><span class="token punctuation">(</span><span class="token string">&quot;50元的书打5折扣是：%f 元%n&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token operator">*</span><span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token class-name">Systemoutprintf</span><span class="token punctuation">(</span><span class="token string">&quot;上面价格的16进制数是：%a %n&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token operator">*</span><span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token class-name">Systemoutprintf</span><span class="token punctuation">(</span><span class="token string">&quot;上面价格的指数表示：%e %n&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token operator">*</span><span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token class-name">Systemoutprintf</span><span class="token punctuation">(</span><span class="token string">&quot;上面价格的指数和浮点数结果的长度较短的是：%g %n&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token operator">*</span><span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token class-name">Systemoutprintf</span><span class="token punctuation">(</span><span class="token string">&quot;上面的折扣是%d%% %n&quot;</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token class-name">Systemoutprintf</span><span class="token punctuation">(</span><span class="token string">&quot;字母A的散列码是：%h %n&quot;</span><span class="token punctuation">,</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Hi,王力 
Hi,王南:王力王张 
字母a的大写是：A  
3&gt;7的结果是：false  
100的一半是：50  
100的16进制数是：64  
100的8进制数是：144  
50元的书打5折扣是：500000 元 
上面价格的16进制数是：0x54p5  
上面价格的指数表示：250000e+01  
上面价格的指数和浮点数结果的长度较短的是：5000  
上面的折扣是85%  
字母A的散列码是：41 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以搭配转换符的标志</p>`,20),E=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"标 志"),n("th",null,"说 明"),n("th",null,"示例"),n("th",null,"结果")])]),n("tbody",null,[n("tr",null,[n("td",null,"+"),n("td",null,"为正数或者负数添加符号"),n("td",null,'("%+d",15)'),n("td",null,"+15")]),n("tr",null,[n("td",null,"-"),n("td",null,"左对齐"),n("td",null,'("%-5d",15)'),n("td",null,"|15 |")]),n("tr",null,[n("td",null,"0"),n("td",null,"数字前面补0"),n("td",null,'("%04d", 99)'),n("td",null,"0099")]),n("tr",null,[n("td",null,"空格"),n("td",null,"在整数之前添加指定数量的空格"),n("td",null,'("% 4d", 99)'),n("td",null,"| 99|")]),n("tr",null,[n("td",null,","),n("td",null,"以“,”对数字分组"),n("td",null,'("%,f", 9999.99)'),n("td",null,"9,999.990000")]),n("tr",null,[n("td",null,"("),n("td",null,"使用括号包含负数"),n("td",null,'("%(f", -99.99)'),n("td",null,"(99.990000)")]),n("tr",null,[n("td",null,"#"),n("td",null,"如果是浮点数则包含小数点，如果是16进制或8进制则添加0x或0"),n("td",null,'("%#x", 99)'),n("td",null,'("%#o", 99)')]),n("tr",null,[n("td",null,"<"),n("td",null,"格式化前一个转换符所描述的参数"),n("td",null,'("%f和%❤️.2f", 99.45)'),n("td",null,"99.450000和99.45")]),n("tr",null,[n("td",null,"$"),n("td",null,"被格式化的参数索引"),n("td",null,[s('("%1'),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"d"),n("mo",{separator:"true"},",")]),n("annotation",{encoding:"application/x-tex"},"d,%2")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mpunct"},",")])])]),s('s", 99,"abc")')]),n("td",null,"99,abc")])])],-1),T=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  <span class="token class-name">String</span> str<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span> 
  <span class="token comment">//$使用 </span>
  str<span class="token operator">=</span><span class="token class-name">Stringformat</span><span class="token punctuation">(</span><span class="token string">&quot;格式参数$的使用：%1$d,%2$s&quot;</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
  <span class="token class-name">Systemoutprintln</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            
  <span class="token comment">//+使用 </span>
  <span class="token class-name">Systemoutprintf</span><span class="token punctuation">(</span><span class="token string">&quot;显示正负数的符号：%+d与%d%n&quot;</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token comment">//补O使用 </span>
  <span class="token class-name">Systemoutprintf</span><span class="token punctuation">(</span><span class="token string">&quot;最牛的编号是：%03d%n&quot;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token comment">//空格使用 </span>
  <span class="token class-name">Systemoutprintf</span><span class="token punctuation">(</span><span class="token string">&quot;Tab键的效果是：% 8d%n&quot;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token comment">//使用 </span>
  <span class="token class-name">Systemoutprintf</span><span class="token punctuation">(</span><span class="token string">&quot;整数分组的效果是：%,d%n&quot;</span><span class="token punctuation">,</span> <span class="token number">9989997</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token comment">//空格和小数点后面个数 </span>
  <span class="token class-name">Systemoutprintf</span><span class="token punctuation">(</span><span class="token string">&quot;一本书的价格是：% 5f元%n&quot;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>格式参数$的使用：99,abc 
显示正负数的符号：+99与-99 
最牛的编号是：007 
Tab键的效果是：    7 
整数分组的效果是：9,989,997 
一本书的价格是：80000元 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stringbuffer-重要" tabindex="-1"><a class="header-anchor" href="#stringbuffer-重要" aria-hidden="true">#</a> StringBuffer(重要)</h2><blockquote><p><strong>StringBuffer是对String类的增强</strong></p></blockquote><h3 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍" aria-hidden="true">#</a> 基本介绍</h3><ul><li>java.lang.StringBuffer代表可变的字符序列，可以对字符串内容进行增删</li><li>很多方法都是和String相同的，<strong>但StringBuffer是可变长度的</strong></li><li>StringBuffer是一个容器</li><li>StringBuffer的直接父类是<code>AbstractStringBuilder</code></li><li>StringBuffer实现了Serializable，即StringBuffer的对象可以串行化</li><li>在StringBuffer的父类<code>AbstractStringBuilder</code>中，<strong>有属性char[] value，且这个属性不带有任何修饰符(不是final类型)</strong><ul><li><strong>该value数组存放字符串内容</strong></li><li>因此，<strong>数据存放在堆中</strong>，而不是常量池</li></ul></li><li>StringBuffer是一个final类，不可以被继承</li></ul><h4 id="string-vs-stringbuffer" tabindex="-1"><a class="header-anchor" href="#string-vs-stringbuffer" aria-hidden="true">#</a> String Vs StringBuffer</h4><ol><li><strong><code>String</code></strong>，<u>里面的值不能更改</u>，<strong>每次String类的更新实际上就是在更改地址，效率较低</strong><br><code>private final char value[]</code> 这个放在常量池</li><li>**<code>StringBuffer</code>**保存的是字符串变量，<u>里面的值可以更该</u>，<strong>每次StringBuffer的更新实际上可以更新内容，不用每次更新地址，效率较高</strong><br><code>char[] value</code>这个存放在堆中</li><li>String每次更新--&gt;在常量池更改地址（创建新的对象），无论更新的内容是1个字符还是10个字符</li><li>StringBuffer更新--&gt; 不用每次都更换地址 <ol><li>比方说，StringBuffer原先有16个空间，第一次用了五个空间，没有用完，那么往后添加数据，只是在他的空间中追加了一个字段，直到这16个空间被填充满了，才会创建新的对象（并添加地址）</li><li>所以他的效率高于String</li></ol></li></ol><figure><img src="`+w+`" alt="image-20211104171931252" tabindex="0" loading="lazy"><figcaption>image-20211104171931252</figcaption></figure><p>可以看到它的构造方法中默认容量为16个字符</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token class-name">StringBuffer_</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuffer01</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        构造器的解析</span>
<span class="token comment">//        1 默认无参构造器 创建一个大小为16的char[]数组，用于存放字符内容</span>
        <span class="token class-name">StringBuffer</span> stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        2 通过构造器指定char[]数组的大小 这里制定了100</span>
        <span class="token class-name">StringBuffer</span> stringBuffer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        3 通过给一个String创建一个StringBuffer</span>
<span class="token comment">//        这里char[]数组的长度为:str.len + 16=21</span>
        <span class="token class-name">StringBuffer</span> stringBuffer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string和stringbuffer的相互转换" tabindex="-1"><a class="header-anchor" href="#string和stringbuffer的相互转换" aria-hidden="true">#</a> String和StringBuffer的相互转换</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token class-name">StringBuffer_</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringAndStringBuffer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        String--&gt;StringBuffer</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span><span class="token string">&quot;hello tom&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//        方式1  使用构造器</span>
        <span class="token class-name">StringBuffer</span> stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        方式2 使用append方法</span>
        <span class="token class-name">StringBuffer</span> stringBuffer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringBuffer1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        StringBuffer--&gt;String</span>
        <span class="token class-name">StringBuffer</span> stringBuffer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;世界你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        方式1：StringBuffer提供的toString</span>
        <span class="token class-name">String</span> str1 <span class="token operator">=</span> stringBuffer2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        方式2 使用构造器来搞定 String构造器可以接受StringBuffer</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>stringBuffer2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stringbuffer类常见方法" tabindex="-1"><a class="header-anchor" href="#stringbuffer类常见方法" aria-hidden="true">#</a> StringBuffer类常见方法</h3><p>在开始前，我定义了一个StringBuffer:<code>StringBuffer hello = new StringBuffer(&quot;hello&quot;);</code></p><ul><li><p>增 append</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// hello=&quot;hello&quot;</span>
hello<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hello<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hello<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1.35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
         ToString方法：
         @Override
        public synchronized String toString() {
            if (toStringCache == null) {
                toStringCache = Arrays.copyOfRange(value, 0, count);
            }
            return new String(toStringCache, true);
}*/</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//hello,张三18true1.35</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除 delete<br> 删除索引为&gt;=start&amp;&amp;&lt;end的字符<br> 下面是删除第5~8位的字符（不包含第八位）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// hello=&quot;hello,张三18true1.35&quot;</span>
hello<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把&quot;,张三&quot; 这三个字符给删除掉了: hello18true1.35</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>替换replace<br> 使用World替换索引从5~7的字符（不包含7）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// hello=&quot;hello18true1.35&quot;</span>
hello<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把18替换成了HelloWorld：helloWorldtrue1.35</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查找 indexOf<br> 查找某个字符串在StringBuffer中第一次出现的字符的位置<br> 这里World是从第五位开始的，所以是5<br> 如果找不到则返回-1</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// hello=&quot;helloWorldtrue1.35&quot;</span>
<span class="token keyword">int</span> indexOf <span class="token operator">=</span> hello<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>indexOf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>插入 insert<br> 在索引为 5 的位置之前插入（4和5的中间）指定的字符串<br> 从索引为5开始的内容自动后移要插入的内容的长度</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//  hello=&quot;helloWorldtrue1.35&quot;</span>
hello<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&quot;空格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//hello空格Worldtrue1.35</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>获取长度 length</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// hello=&quot;hello空格Worldtrue1.35&quot;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>开发中还有可能用带其他的，用到了再去查</p></li></ul><h3 id="扩展-动态的给double数值添加" tabindex="-1"><a class="header-anchor" href="#扩展-动态的给double数值添加" aria-hidden="true">#</a> 扩展-动态的给double数值添加_</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token class-name">StringBuffer_</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 需求，根据用户输入的double，自动每隔三位数加个_(整数位，小数位不管)
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBufferExecise01</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        获取用户输入的数值</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">init</span><span class="token punctuation">(</span>scanner<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Scanner</span> scanner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//        创建字符串缓存流</span>
        <span class="token class-name">StringBuffer</span> stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//            删除历史遗留记录</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一段数值：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//            先获取到用户的输入</span>
            <span class="token class-name">String</span> userInput <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">double</span> number <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>userInput<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//                将number传入到流之中</span>
                stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//                解决用户输入的数值太大太长导致出现E的问题</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">&quot;数值太长&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//                解决用户输入了多个小数点的问题</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> stringBuffer<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">&quot;小数点过多&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//                获取小数点的indexOf，如果</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> stringBuffer<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    stringBuffer<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">&quot;_&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;String:&quot;</span> <span class="token operator">+</span> stringBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stringbuilder-重要" tabindex="-1"><a class="header-anchor" href="#stringbuilder-重要" aria-hidden="true">#</a> StringBuilder(重要)</h2><h3 id="基本介绍-1" tabindex="-1"><a class="header-anchor" href="#基本介绍-1" aria-hidden="true">#</a> 基本介绍</h3><ol><li><p>一个可变的字符序列，此类提供一个与StringBuffer兼容的API，但不保证同步，该类的涉及用作StringBuffer的一个简易替换，<strong>在字符串缓冲区被单个线程使用的时候，如果可能，建议优先使用<code>StringBuilder</code>，因为在大多数实现中，它都比StringBuffer更快</strong></p></li><li><p>在StringBuilder上主要是操作append和insert方法，可以重载这些方法，以接受任意类型的数据</p></li><li><p>StringBuilder和StringBuffer的区别：StringBuilder用在单线程，StringBuffer用在多线程</p></li><li><p>它有的方法和StringBuffer一样</p></li><li><p>StringBuilder的直接父类是<code>AbstractStringBuilder</code></p></li><li><p>StringBuilder实现了Serializable，即StringBuilder的对象可以串行化（对象可以传输到网络，也可以保存到文件）</p></li><li><p>是一个final类，不能被继承</p></li><li><p>数据也是存放在欺负类AbstractStringBuilder的char value[]，因此字符序列是存放在堆中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">synchronized</span> <span class="token class-name">StringBuffer</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">AbstractStringBuilder</span> asb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    toStringCache <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>asb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token comment">//绝大部分方法中都用了synchronized</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>StringBuilder的方法没有做任何互斥的处理，即没有<code>synchronized</code>关键字的包裹，所以是不安全的线程</strong>因此，只推荐在单线程的情况下使用StringBuilder</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">StringBuilder</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">StringBuffer</span> sb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//所有方法中都没有synchronized</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="string、stringbuilder、stringbuffer的比较" tabindex="-1"><a class="header-anchor" href="#string、stringbuilder、stringbuffer的比较" aria-hidden="true">#</a> String、StringBuilder、StringBuffer的比较</h3><ol><li>StringBuffer和StringBuilder非常类似，军代表可变的字符序列，且方法也一样</li><li>String：不可变字符序列，效率低，但是复用性高</li><li>StringBuffer：可变字符序列，效率较高（增删），线程安全(带有synchronized关键字，每次运行前都会进行线程判断)</li><li>StringBuilder：可变字符序列，效率最高，线程不安全(没有synchronized关键字)</li></ol><p>可以尝试一下比较他们：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token class-name">StringBuffer_</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilder01</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">StringBuffer</span> stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;stringBuffer的所用时间是：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;stringBuilder的所用时间是：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            text<span class="token operator">+=</span>i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;String的所用时间是：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只能说，运行的时候一看卧槽不得了..</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stringBuffer的所用时间是：<span class="token number">28</span>ms
stringBuilder的所用时间是：<span class="token number">10</span>ms
<span class="token class-name">String</span>的所用时间是：<span class="token number">30573</span>ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然我也尝试了一下拼接两千万次</p><figure><img src="`+S+'" alt="image-20211105005251767" tabindex="0" loading="lazy"><figcaption>image-20211105005251767</figcaption></figure><p>这里不敢尝试String，感觉没个半个小时它跑不完</p><h2 id="string的总结" tabindex="-1"><a class="header-anchor" href="#string的总结" aria-hidden="true">#</a> String的总结</h2><p>使用的原则：结论：</p><ol><li>如果字符串存在大量的修高操作，一般使用StringBuffer或者StringBuilder</li><li>如果字符串存在大量的修改操作，并在<strong>单线程</strong>的情况，使用<strong>StringBuilder</strong></li><li>如果字符串存在大量的修改操作，并在<strong>多线程</strong>的情况，使用<strong>StringBuffer</strong></li><li>如果字符串<strong>很少修改</strong>，被<strong>多个对象引用</strong>，使用<strong>String</strong>，比如配置信息等</li></ol><h2 id="math" tabindex="-1"><a class="header-anchor" href="#math" aria-hidden="true">#</a> Math</h2><blockquote><p>Math类包含用于执行基本数学运算的各种方法，比如初等指数，对数，平方根和三角函数等</p></blockquote><figure><img src="'+q+`" alt="image-20211105010014540" tabindex="0" loading="lazy"><figcaption>image-20211105010014540</figcaption></figure><p>可以通过它的类图发现没有继承除了Object以外的任何父类，方法有一大堆，变量有一大堆..</p><p><strong>它的方法均为静态方法</strong></p><p>常用的如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>math_</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathMethods</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token comment">//        Math的具体用法</span>

<span class="token comment">//        1 求绝对值 abs</span>
        <span class="token keyword">int</span> abs <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>abs<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        2 求幂 pow</span>
        <span class="token keyword">double</span> pow <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-3.5的四次方</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pow<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        3 ceil 向上取整，返回&gt;=该参数的最小整数</span>
        <span class="token keyword">double</span> ceil <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ceil<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//-3.0</span>

<span class="token comment">//        4 floor 向下取整，返回&lt;=该参数的最大整数(double)</span>
        <span class="token keyword">double</span> floor <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">4.0001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>floor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.0</span>

<span class="token comment">//        5 round 四舍五入</span>
        <span class="token keyword">long</span> round <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5.565645</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>round<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//6</span>

<span class="token comment">//        6 开方</span>
        <span class="token keyword">double</span> sqrt <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">9.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//负数的话会返回NaN</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sqrt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3.0</span>

<span class="token comment">//        7  random 返回0~1之间的随机小数</span>
<span class="token comment">//        0&lt;=x&lt;1</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----Random&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
<span class="token comment">//        思考：获取a~b之间的一个随机整数，a，b均为整数：2~7</span>
<span class="token comment">//         a&lt;=number&lt;(a+b-a)</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;获取到的值为：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        使用递归方法</span>
<span class="token comment">//        System.out.println(ranInt(2,7));</span>
<span class="token comment">//        使用直接获取的方法</span>
<span class="token comment">//        1. (int)a &lt;=number&lt;=(int)(a+Math.random()*(b-a)+1)</span>
<span class="token comment">//        Math.random()*(b-a):0&lt;=number&lt;b-a</span>
<span class="token comment">//        a=2 b=7</span>
<span class="token comment">//        System.out.println(&quot;获取到的值为：&quot;);</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        max min 返回最大最小值</span>
        <span class="token keyword">int</span> min <span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5</span>
        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//111</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ranInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> firstNumber<span class="token punctuation">,</span> <span class="token keyword">int</span> lastNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;=</span> lastNumber <span class="token operator">||</span> num <span class="token operator">&lt;=</span> firstNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">ranInt</span><span class="token punctuation">(</span>firstNumber<span class="token punctuation">,</span> lastNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="arrays" tabindex="-1"><a class="header-anchor" href="#arrays" aria-hidden="true">#</a> Arrays</h2><p>Arrays里面包含了一系列静态方法，用于管理或者操作数组（比如排序和搜索）</p><h3 id="arrays的常用方法" tabindex="-1"><a class="header-anchor" href="#arrays的常用方法" aria-hidden="true">#</a> Arrays的常用方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>arrays_</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArraysMethods</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        演示Arrays的常用方法</span>

        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> integers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//        以前遍历数组</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> integer <span class="token operator">:</span> integers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;使用Arrays&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        1. Arrays.toString() 格式化数组并打印</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>integers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 20, 30]</span>

<span class="token comment">//        2.1. sort排序</span>
        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">666</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//        进行排序</span>
<span class="token comment">//        虽然可以直接使用冒泡排序，但是sort是真滴方便</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;排序前：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数组是引用类型，所以这里是直接更该其值，而不是指向新的地址</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;默认排序后：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[-1, 0, 1, 7, 15, 48, 53, 89, 666]</span>
<span class="token comment">//        2.2 sort方法是重载的，可以通过传入一个接口Comparator实现定制排序</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;定制排序方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">666</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//        使用匿名内部类</span>
<span class="token comment">//        2.3 调用定制排序时，传入了两个参数</span>
<span class="token comment">//        (1)要排序的数组</span>
<span class="token comment">//        (2)实现了Comparator接口的匿名内部类，要求实现compare方法</span>
<span class="token comment">//        2.4 这里实现了接口编程的一种方式，先下个Debug看看</span>
<span class="token comment">//        源码分析：</span>
<span class="token comment">//        (1)  Arrays.sort(arr, new Comparator(){}</span>
<span class="token comment">//        (2)  这一步最终走到了一个方法binarySort(二叉树排序),所在类:TimSort</span>
<span class="token comment">//        (3)  执行到binarySort中的方法,</span>
<span class="token comment">//        到c.compare会根据动态绑定机制去执行我们传入的匿名内部类的compare方法</span>
<span class="token comment">//        (4)  public int compare(Integer o1, Integer o2)返回的值是&gt;0还是&lt;0</span>
<span class="token comment">//        会影响到整个排序结果</span>
<span class="token comment">//        这就充分体现了 接口编程+匿名内部类+动态绑定的综合使用</span>
<span class="token comment">//        将来的底层框架和源码的使用方法，类似于这样的会非常多</span>
        <span class="token comment">/*
         * while(left&lt;right){
         *   int mid=(left+right)&gt;&gt;&gt;1;
         *   if(c.compare(pivot,a[mid)&lt;0){
         *       rigth=mid;
         *   }else{
         *       left=mid+1;
         *   }
         * }
         * */</span>

        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//                这里实现了从大到小的排序</span>
                <span class="token keyword">return</span> o2 <span class="token operator">-</span> o1<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        3. binarySearch通过二分搜索法进行查找某个值的在数组中的位置，要求必须先排好序(正序排序)，</span>
<span class="token comment">//        找不到则返回：return -(low)+1; 可以就是说，这下面的663本来是在666之前，即：数组的第10位</span>
<span class="token comment">//        但是二叉查找并没有在对应的位置上找到他， 所以返回它的位置+1并取反-也就是说，他如果存在的话，应该在第11位上面</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;二分搜索排序：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">663</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        4. copyOf 数组的元素复制 见名知意，讲一个数组的所有元素复制到一个新的数组上，省去了自己fori</span>
<span class="token comment">//        这里相当于是：从arr数组中，拷贝从第0到第(arr.length-1)个元素，到arr2数组中</span>
<span class="token comment">//        如果下面的的第二个参数变为length +1 新数组则最后一个位置的参数为空(null)</span>
<span class="token comment">//        如果第二个参数为len-n，则新的数组的长度将会比旧数组少n位</span>
<span class="token comment">//        如果拷贝的长度小于0，则会抛出异常：负数异常</span>
<span class="token comment">//        该方法的底层使用的是System.arraycopy()</span>
        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;拷贝后的数组：&quot;</span><span class="token operator">+</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        5. fill 数组填充</span>
        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//        用指定的数值替换数组中的所有元素，</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数组的填充：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[99, 99, 99]</span>

<span class="token comment">//        6. equals 比较两个数组的内容是否完全一致 一致指的是长度，元素值，元素位置都完全一致</span>
        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr4  <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr3<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;判断两个数组是否完全一致&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr3<span class="token punctuation">,</span> arr4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>

<span class="token comment">//        7.  arList 将一组值，转换成list</span>
<span class="token comment">//        会将(2, 3, 4, 5, 6, 7, 8, 9)转换成一个list的集合，并返回</span>
<span class="token comment">//        集合在后面会降到</span>
<span class="token comment">//        返回的变异类型就是左边的List&lt;Integer&gt;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Arrays.asLis:&quot;</span><span class="token operator">+</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;list的运行类型:&quot;</span><span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//class java.util.Arrays$ArrayList  Arrays的内部类ArrayList</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩展-定制排序" tabindex="-1"><a class="header-anchor" href="#扩展-定制排序" aria-hidden="true">#</a> 扩展-定制排序</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>arrays_</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArraySortCustom</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">650</span><span class="token punctuation">,</span> <span class="token number">504</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;冒泡排序后的情况：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        使用自定义冒泡排序</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays_ <span class="token operator">=</span> <span class="token function">bubbleSort02</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> o2<span class="token operator">-</span>o1<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;使用定制排序后的情况：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arrays_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//    使用冒泡 进行排序</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//                从小到大排序</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//    需求：结合冒泡+定制</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bubbleSort02</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//                    大于0则表示是从小到大，第一个数大于第二个数，交换两个数的位置</span>
                    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="扩展-小练" tabindex="-1"><a class="header-anchor" href="#扩展-小练" aria-hidden="true">#</a> 扩展-小练</h4><blockquote><p>现在有一个类Book，属性有name和price，请使用Comparator来完成正序，倒序，和根据书本名字长短来排序</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>arrays_</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayExercise</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Book</span><span class="token punctuation">[</span><span class="token punctuation">]</span> books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        books<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">&quot;如何高效的吃宴席&quot;</span><span class="token punctuation">,</span> <span class="token number">22.33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        books<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">&quot;理论的下葬&quot;</span><span class="token punctuation">,</span> <span class="token number">453.13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        books<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">&quot;Java从入门到入土&quot;</span><span class="token punctuation">,</span> <span class="token number">99.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        books<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">&quot;JavaScript从入门到学Java&quot;</span><span class="token punctuation">,</span> <span class="token number">11.11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        books<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">&quot;一生&quot;</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        books<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">&quot;迷&quot;</span><span class="token punctuation">,</span> <span class="token number">9999.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//        排序方式1：使用Arrays自带的sort+Comparator 实现正序排序</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>books<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Book</span> b1<span class="token punctuation">,</span> <span class="token class-name">Book</span> b2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b1<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> b2<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;使用Arrays.Sort进行的正序排序&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getJsonString</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        方法2 使用自己写的冒泡排序来完成倒序排序：</span>
        <span class="token function">mysort</span><span class="token punctuation">(</span>books<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Book</span> o1<span class="token punctuation">,</span> <span class="token class-name">Book</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o1<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;使用MySort进行的倒序排序：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getJsonString</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        方法3 根据自己的方法，根据名字来完成从短到多的排序</span>
        <span class="token function">mysort</span><span class="token punctuation">(</span>books<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Book</span> o1<span class="token punctuation">,</span> <span class="token class-name">Book</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;使用MySort进行的按照名字顺序从短到长进行排序：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getJsonString</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 传入一个Book的正序，使用冒泡排序法进行排序
     *
     * <span class="token keyword">@param</span> <span class="token parameter">books</span>      BOOK的数组
     * <span class="token keyword">@param</span> <span class="token parameter">isSequence</span> 排序的规则，一个Comparator实例对象
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mysort</span><span class="token punctuation">(</span><span class="token class-name">Book</span><span class="token punctuation">[</span><span class="token punctuation">]</span> books<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> isSequence<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Book</span> book<span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> books<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> books<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>isSequence<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>books<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> books<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    book <span class="token operator">=</span> books<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    books<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> books<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    books<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> book<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 重写的列表展现方式，让其看起来更Json一点，直观易懂
     *
     * <span class="token keyword">@param</span> <span class="token parameter">objs</span> OBj数组
     * <span class="token keyword">@return</span> 一个String，长得很像Json
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getJsonString</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;[\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> objs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> objs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;,\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
<span class="token comment">//            最后一个对象不在末尾添加逗号</span>
            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;{name:\\&quot;%s\\&quot;,price:\\&quot;%.2f\\&quot;}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> price<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="system" tabindex="-1"><a class="header-anchor" href="#system" aria-hidden="true">#</a> System</h2><h3 id="system的常用方法" tabindex="-1"><a class="header-anchor" href="#system的常用方法" aria-hidden="true">#</a> System的常用方法</h3><ul><li><p><code>exit</code> 退出当前程序</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//0 表示一个状态，正常的状态，一般让程序退出都是这样写</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>arraycopy</code> 复制数组元素，比较适合底层调用，一般都是使用Arrays.copyOf来完成复制数组</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dest <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>dest<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
五个参数：
    <span class="token number">01</span> src 源数组<span class="token punctuation">;</span>
 <span class="token number">02</span> srcPos 从源数值的哪个索引位置开始拷贝<span class="token punctuation">;</span>
 <span class="token number">03</span> dest 目标数组<span class="token punctuation">;</span>
 <span class="token number">0</span> destPos 把源数值的数据拷贝到目标数组的哪个索引<span class="token punctuation">(</span>位置<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token number">05</span> length 要从源数组拷贝多少个数据到目标数组<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>cuurentTimeMillens</code>：返回当前时间距离1970年1月1日00:00的<strong>毫秒数</strong></p></li><li><p><s><code>gc</code>运行垃圾回收机制System.gc()</s> 这个平常建议不用</p></li></ul><h2 id="biginteger-bigdecimal" tabindex="-1"><a class="header-anchor" href="#biginteger-bigdecimal" aria-hidden="true">#</a> BigInteger BigDecimal</h2><p>这两个类能解决浮点数因为精度问题导致的(0.9999998)以及数值太大(99999999999999999)这类的问题</p><ul><li><code>BigInteger</code>适合<strong>保存比较大的整数</strong></li><li><code>BigDecimal</code>适合<strong>保存精度更高的浮点类型(小数)</strong></li></ul><h3 id="biginteger的使用" tabindex="-1"><a class="header-anchor" href="#biginteger的使用" aria-hidden="true">#</a> BigInteger的使用</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bignumber_</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigInteger</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigintegerMethod</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        当编程中需要处理很大的数的时，long不够用，就可以使用BigInteger这个类来解决问题</span>
<span class="token comment">//        999999999999156456431213246545645645646546</span>
<span class="token comment">//        创建 BigInteger 将数值用字符串包裹表示</span>
        <span class="token class-name">BigInteger</span> bigInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;999999999999999999999999999999999999999999999999&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigInteger<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出</span>

<span class="token comment">//        对齐进行加减乘除，需要使用方法来加减乘除，不能直接+-*/ 返回值是bigInteger</span>
<span class="token comment">//        传入的值只能是BigTeger类型的，非该类型需要用valueOf装箱</span>
<span class="token comment">//        即：不能穿入小数</span>
<span class="token comment">//        并且返回的值，例如除法中若有小数会被自动四舍五入划掉</span>

<span class="token comment">//        加法</span>
        <span class="token class-name">BigInteger</span> bigInteger1 <span class="token operator">=</span> bigInteger<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigInteger</span> bigInteger2 <span class="token operator">=</span> bigInteger<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;54564565165456465456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigInteger1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigInteger2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        减法 subtract</span>
        <span class="token class-name">BigInteger</span> bigInteger3 <span class="token operator">=</span> bigInteger<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">12312345645656L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigInteger3<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        乘法 multiply</span>
        <span class="token class-name">BigInteger</span> bigInteger4 <span class="token operator">=</span> bigInteger<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigInteger4<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        除法 divide</span>
        <span class="token class-name">BigInteger</span> bigInteger5 <span class="token operator">=</span> bigInteger<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigInteger5<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="bigdecimal的使用" tabindex="-1"><a class="header-anchor" href="#bigdecimal的使用" aria-hidden="true">#</a> BigDecimal的使用</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bignumber_</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigDecimalMethod</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        比如说有一个数：1.1354564561565646548977897654456;</span>
<span class="token comment">//        来看看普通double输出的值：</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;double:&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token number">1.1354564561565646548977897654456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        结果：1.1354564561565648 可以看到精度被缩减了</span>
<span class="token comment">//        截下来使用BigDecimal:</span>
        <span class="token class-name">BigDecimal</span> bigDecimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;1.1354564561565646548977897654456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;BigDecimal:&quot;</span><span class="token operator">+</span>bigDecimal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1.1354564561565646548977897654456 进度没有任何缩减</span>

<span class="token comment">//        进行加减乘除和BigInteger差不多一样，不过要传入的值限定为BigDecimal，可以穿入小数进行减加乘除</span>

<span class="token comment">//        加 add</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;add:&quot;</span> <span class="token operator">+</span> bigDecimal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1111.564687</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        减 subtract</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;subtract:&quot;</span> <span class="token operator">+</span> bigDecimal<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;165156166666.16534156564&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        乘法 multiply</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;multiply:&quot;</span> <span class="token operator">+</span> bigDecimal<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">5.5655</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        除法 divide 可能会抛出异常：在除出的数是无线循环小数时</span>
<span class="token comment">//        System.out.println(&quot;divide:&quot;+bigDecimal.divide(BigDecimal.valueOf(2.1)));</span>
<span class="token comment">// Exception in thread &quot;main&quot; java.lang.ArithmeticException:</span>
<span class="token comment">// Non-terminating decimal expansion; no exact representable decimal result.</span>
<span class="token comment">//        解决方法：在调用divide方法时，指定精度即可</span>
<span class="token comment">//        这里BigDecimal.ROUND_DOWN 相当于是定义值的精度：即bigDecimal的精度 1.1354564561565646548977897654456</span>
<span class="token comment">//</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;divide:&quot;</span> <span class="token operator">+</span> bigDecimal<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">2.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ROUND_DOWN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="date、calendar、localdate" tabindex="-1"><a class="header-anchor" href="#date、calendar、localdate" aria-hidden="true">#</a> Date、Calendar、LocalDate</h2><p>这个。。。时间类要用到了再去查即可，一般都是format now Date 或者format后的值转成Date</p>`,62);function N(z,L){const t=o("ExternalLinkIcon");return c(),l("div",null,[x,n("ol",B,[n("li",null,[n("p",null,[s("这里调用的change(string,ch)实际上：str为new了一个String，地址指向了ex.str的地址，然后ch是new了一个char[] "),n("a",I,[s("地址指向了ex.ch"),p(t)])])]),_,A,O,C,n("li",null,[n("p",null,[s("根据前面的知识，可以知道，数组在更该其内容时，并不会更该他本身的地址，"),n("a",D,[s("所以这里的c2实际上还是指向了ex.ch"),p(t)])])]),M]),J,E,T])}const W=e(j,[["render",N],["__file","12-常用类.html.vue"]]);export{W as default};
