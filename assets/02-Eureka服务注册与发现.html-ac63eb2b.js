const e=JSON.parse('{"key":"v-336eb216","path":"/JavaLang/SpringCloud/02-Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.html","title":"02-Eureka服务注册与发现","lang":"zh-CN","frontmatter":{"title":"02-Eureka服务注册与发现","date":"2022-01-03T19:37:20.000Z","category":"分布式-微服务","tag":["微服务","SpringCloud","Spring Cloud Eureka"],"description":"什么是服务治理 SpringCloud封装了Netfix公司开发的Eureka来实现服务治理 在传统的RPC远程调用框架内，管理每个服务与服务之间的依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务与服务之间的依赖关系，可以实现服务调用，负载均衡，容错等，实现服务发现与注册 说穿了就是，N多个消费者和N多个服务提供者，你找我我找你的非常麻烦，我们需要管理机制来实现服务治理 Eureka用了CS的设计架构，Eureka Server作为服务注册功能的服务器 它是服务注册中心，而系统中的其他微服务，使用Eureka的客户端连接到Eureka Server并维持心跳连接，这样的系统维护人员可以通过Eureka Server来监控系统中各个微服务是否正常运行","head":[["meta",{"property":"og:url","content":"http://www.amayakite.github.io/JavaLang/SpringCloud/02-Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"Amayakite Blogs"}],["meta",{"property":"og:title","content":"02-Eureka服务注册与发现"}],["meta",{"property":"og:description","content":"什么是服务治理 SpringCloud封装了Netfix公司开发的Eureka来实现服务治理 在传统的RPC远程调用框架内，管理每个服务与服务之间的依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务与服务之间的依赖关系，可以实现服务调用，负载均衡，容错等，实现服务发现与注册 说穿了就是，N多个消费者和N多个服务提供者，你找我我找你的非常麻烦，我们需要管理机制来实现服务治理 Eureka用了CS的设计架构，Eureka Server作为服务注册功能的服务器 它是服务注册中心，而系统中的其他微服务，使用Eureka的客户端连接到Eureka Server并维持心跳连接，这样的系统维护人员可以通过Eureka Server来监控系统中各个微服务是否正常运行"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-17T12:51:48.000Z"}],["meta",{"property":"article:author","content":"Amayakite"}],["meta",{"property":"article:tag","content":"微服务"}],["meta",{"property":"article:tag","content":"SpringCloud"}],["meta",{"property":"article:tag","content":"Spring Cloud Eureka"}],["meta",{"property":"article:published_time","content":"2022-01-03T19:37:20.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-17T12:51:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02-Eureka服务注册与发现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-03T19:37:20.000Z\\",\\"dateModified\\":\\"2023-06-17T12:51:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amayakite\\",\\"url\\":\\"https://github.com/Amayakite\\"}]}"]]},"headers":[{"level":2,"title":"什么是服务治理","slug":"什么是服务治理","link":"#什么是服务治理","children":[]},{"level":2,"title":"单机Eureka构建步骤","slug":"单机eureka构建步骤","link":"#单机eureka构建步骤","children":[{"level":3,"title":"创建工程并添加依赖","slug":"创建工程并添加依赖","link":"#创建工程并添加依赖","children":[]},{"level":3,"title":"配置spring boot","slug":"配置spring-boot","link":"#配置spring-boot","children":[]},{"level":3,"title":"启动并测试","slug":"启动并测试","link":"#启动并测试","children":[]}]},{"level":2,"title":"将8001注册到7001内","slug":"将8001注册到7001内","link":"#将8001注册到7001内","children":[{"level":3,"title":"添加依赖","slug":"添加依赖","link":"#添加依赖","children":[]},{"level":3,"title":"配置application","slug":"配置application","link":"#配置application","children":[]},{"level":3,"title":"启动并测试","slug":"启动并测试-1","link":"#启动并测试-1","children":[]}]},{"level":2,"title":"将80注册到7001","slug":"将80注册到7001","link":"#将80注册到7001","children":[]},{"level":2,"title":"Eureka集群","slug":"eureka集群","link":"#eureka集群","children":[{"level":3,"title":"创建7002","slug":"创建7002","link":"#创建7002","children":[]},{"level":3,"title":"修改配置并启动","slug":"修改配置并启动","link":"#修改配置并启动","children":[]},{"level":3,"title":"将80服务和8001服务分别注册进进群Eureka集群内","slug":"将80服务和8001服务分别注册进进群eureka集群内","link":"#将80服务和8001服务分别注册进进群eureka集群内","children":[]}]},{"level":2,"title":"支付微服务（8001）集群设置","slug":"支付微服务-8001-集群设置","link":"#支付微服务-8001-集群设置","children":[{"level":3,"title":"配置文件","slug":"配置文件","link":"#配置文件","children":[]},{"level":3,"title":"验证微服务集群","slug":"验证微服务集群","link":"#验证微服务集群","children":[]}]},{"level":2,"title":"一些额外的配置","slug":"一些额外的配置","link":"#一些额外的配置","children":[{"level":3,"title":"主机名称和服务名称的修改","slug":"主机名称和服务名称的修改","link":"#主机名称和服务名称的修改","children":[]}]},{"level":2,"title":"服务发现Discovery","slug":"服务发现discovery","link":"#服务发现discovery","children":[]},{"level":2,"title":"Eureka的保护模式","slug":"eureka的保护模式","link":"#eureka的保护模式","children":[{"level":3,"title":"禁止自我保护","slug":"禁止自我保护","link":"#禁止自我保护","children":[]}]}],"git":{"createdTime":1687006308000,"updatedTime":1687006308000,"contributors":[{"name":"Amayakite","email":"amayakite@qq.com","commits":1}]},"readingTime":{"minutes":18.84,"words":5651},"filePathRelative":"JavaLang/SpringCloud/02-Eureka服务注册与发现.md","localizedDate":"2022年1月3日","excerpt":"<h2> 什么是服务治理</h2>\\n<p>SpringCloud封装了Netfix公司开发的Eureka来实现服务治理</p>\\n<p>在传统的RPC远程调用框架内，管理每个服务与服务之间的依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务与服务之间的依赖关系，可以实现服务调用，负载均衡，容错等，实现服务发现与注册</p>\\n<p>说穿了就是，N多个消费者和N多个服务提供者，你找我我找你的非常麻烦，我们需要管理机制来实现服务治理</p>\\n<p>Eureka用了CS的设计架构，Eureka Server作为服务注册功能的服务器</p>\\n<p>它是服务注册中心，而系统中的其他微服务，使用Eureka的客户端连接到Eureka Server并维持心跳连接，这样的系统维护人员可以通过Eureka Server来监控系统中各个微服务是否正常运行</p>","autoDesc":true}');export{e as data};
