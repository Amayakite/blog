const e=JSON.parse(`{"key":"v-595e7a3e","path":"/JavaLang/SpringBoot/02-Spring_Boot%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD.html","title":"02-SpringBoot核心功能","lang":"zh-CN","frontmatter":{"title":"02-SpringBoot核心功能","date":"2021-12-18T14:03:05.000Z","category":"SpringBoot","tag":["Java","SpringBoot","SpringMvc","JavaWeb"],"description":"配置文件 properties配置文件 就和我们之前的properties一样 yaml ​YAML是YAML Ain't Markup Langurage (YAML 不是一种标记语言) 的递归缩写，在开发的这种语言时候，YAML的意思是Yet Another Markup Language（任然是一种标记语言） ​所以江湖人称：薛定谔的YAML ​非常适合用来做以数据为中心的配置文件 ​这玩意比properties和xml和json方便很多 直观很多 语法更容易懂","head":[["meta",{"property":"og:url","content":"http://www.amayakite.github.io/JavaLang/SpringBoot/02-Spring_Boot%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD.html"}],["meta",{"property":"og:site_name","content":"Amayakite Blogs"}],["meta",{"property":"og:title","content":"02-SpringBoot核心功能"}],["meta",{"property":"og:description","content":"配置文件 properties配置文件 就和我们之前的properties一样 yaml ​YAML是YAML Ain't Markup Langurage (YAML 不是一种标记语言) 的递归缩写，在开发的这种语言时候，YAML的意思是Yet Another Markup Language（任然是一种标记语言） ​所以江湖人称：薛定谔的YAML ​非常适合用来做以数据为中心的配置文件 ​这玩意比properties和xml和json方便很多 直观很多 语法更容易懂"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-17T15:14:40.000Z"}],["meta",{"property":"article:author","content":"Amayakite"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:tag","content":"SpringMvc"}],["meta",{"property":"article:tag","content":"JavaWeb"}],["meta",{"property":"article:published_time","content":"2021-12-18T14:03:05.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-17T15:14:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02-SpringBoot核心功能\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-12-18T14:03:05.000Z\\",\\"dateModified\\":\\"2023-06-17T15:14:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amayakite\\",\\"url\\":\\"https://github.com/Amayakite\\"}]}"]]},"headers":[{"level":2,"title":"properties配置文件","slug":"properties配置文件","link":"#properties配置文件","children":[]},{"level":2,"title":"yaml","slug":"yaml","link":"#yaml","children":[{"level":3,"title":"YML补充说明-换行和转义","slug":"yml补充说明-换行和转义","link":"#yml补充说明-换行和转义","children":[]},{"level":3,"title":"扩展-Spring的注释智能提示","slug":"扩展-spring的注释智能提示","link":"#扩展-spring的注释智能提示","children":[]}]},{"level":2,"title":"SpringMVC自动配置的内容概览","slug":"springmvc自动配置的内容概览","link":"#springmvc自动配置的内容概览","children":[{"level":3,"title":"简单功能分析","slug":"简单功能分析","link":"#简单功能分析","children":[]}]},{"level":2,"title":"静态资源规则和定制化","slug":"静态资源规则和定制化","link":"#静态资源规则和定制化","children":[{"level":3,"title":"指定静态资源前缀","slug":"指定静态资源前缀","link":"#指定静态资源前缀","children":[]},{"level":3,"title":"修改静态资源路径","slug":"修改静态资源路径","link":"#修改静态资源路径","children":[]},{"level":3,"title":"关于欢迎页面(index.html)","slug":"关于欢迎页面-index-html","link":"#关于欢迎页面-index-html","children":[]},{"level":3,"title":"静态资源配置原理","slug":"静态资源配置原理","link":"#静态资源配置原理","children":[]},{"level":3,"title":"禁用所有静态资源","slug":"禁用所有静态资源","link":"#禁用所有静态资源","children":[]},{"level":3,"title":"静态资源返回给浏览器的缓存时间控制","slug":"静态资源返回给浏览器的缓存时间控制","link":"#静态资源返回给浏览器的缓存时间控制","children":[]}]},{"level":2,"title":"请求参数处理","slug":"请求参数处理","link":"#请求参数处理","children":[{"level":3,"title":"请求映射","slug":"请求映射","link":"#请求映射","children":[]},{"level":3,"title":"@RequestMapping(val,met)的缩写--@GetMapping()","slug":"requestmapping-val-met-的缩写-getmapping","link":"#requestmapping-val-met-的缩写-getmapping","children":[]},{"level":3,"title":"扩展-如何在表单提交时将_method改变成我们喜欢的名字","slug":"扩展-如何在表单提交时将-method改变成我们喜欢的名字","link":"#扩展-如何在表单提交时将-method改变成我们喜欢的名字","children":[]},{"level":3,"title":"关于@Mapping注解的方法是如何被找到的(请求映射原理)","slug":"关于-mapping注解的方法是如何被找到的-请求映射原理","link":"#关于-mapping注解的方法是如何被找到的-请求映射原理","children":[]},{"level":3,"title":"获取请求参数的注解一览","slug":"获取请求参数的注解一览","link":"#获取请求参数的注解一览","children":[]},{"level":3,"title":"@PathVariable 获取Restful风格的请求参数","slug":"pathvariable-获取restful风格的请求参数","link":"#pathvariable-获取restful风格的请求参数","children":[]},{"level":3,"title":"@RequestHeader 获取请求头","slug":"requestheader-获取请求头","link":"#requestheader-获取请求头","children":[]},{"level":3,"title":"@RequestParam 获取请求参数","slug":"requestparam-获取请求参数","link":"#requestparam-获取请求参数","children":[]},{"level":3,"title":"@CookieValue 获取指定cookie的值","slug":"cookievalue-获取指定cookie的值","link":"#cookievalue-获取指定cookie的值","children":[]},{"level":3,"title":"@RequestBody 获取请求体的值","slug":"requestbody-获取请求体的值","link":"#requestbody-获取请求体的值","children":[]},{"level":3,"title":"@Valid 配合@RequestBody验证用户传入的内容","slug":"valid-配合-requestbody验证用户传入的内容","link":"#valid-配合-requestbody验证用户传入的内容","children":[]},{"level":3,"title":"@RequestAttribute 获取请求域中的信息","slug":"requestattribute-获取请求域中的信息","link":"#requestattribute-获取请求域中的信息","children":[]},{"level":3,"title":"@MatrixVariable 获取矩阵变量","slug":"matrixvariable-获取矩阵变量","link":"#matrixvariable-获取矩阵变量","children":[]},{"level":3,"title":"关于SpringMVC是如何获取到参数的","slug":"关于springmvc是如何获取到参数的","link":"#关于springmvc是如何获取到参数的","children":[]},{"level":3,"title":"向request域中放数据的几种方式","slug":"向request域中放数据的几种方式","link":"#向request域中放数据的几种方式","children":[]},{"level":3,"title":"✨自定义接收参数类型转换器","slug":"✨自定义接收参数类型转换器","link":"#✨自定义接收参数类型转换器","children":[]},{"level":3,"title":"关于内容协商和自动通过客户端类型返回json/xml","slug":"关于内容协商和自动通过客户端类型返回json-xml","link":"#关于内容协商和自动通过客户端类型返回json-xml","children":[]},{"level":3,"title":"开启请求参数进行内容协商","slug":"开启请求参数进行内容协商","link":"#开启请求参数进行内容协商","children":[]}]},{"level":2,"title":"✨自定义返回值处理器","slug":"✨自定义返回值处理器","link":"#✨自定义返回值处理器","children":[{"level":3,"title":"✨返回值处理器额外补充-配置内容协商","slug":"✨返回值处理器额外补充-配置内容协商","link":"#✨返回值处理器额外补充-配置内容协商","children":[]}]},{"level":2,"title":"视图解析与模板引擎（服务端渲染）","slug":"视图解析与模板引擎-服务端渲染","link":"#视图解析与模板引擎-服务端渲染","children":[{"level":3,"title":"thymeleaf语法一览","slug":"thymeleaf语法一览","link":"#thymeleaf语法一览","children":[]},{"level":3,"title":"tyhmeleaf使用","slug":"tyhmeleaf使用","link":"#tyhmeleaf使用","children":[]},{"level":3,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":3,"title":"设置全局访问前缀","slug":"设置全局访问前缀","link":"#设置全局访问前缀","children":[]},{"level":3,"title":"Web实验-实现admin后台管理系统","slug":"web实验-实现admin后台管理系统","link":"#web实验-实现admin后台管理系统","children":[]},{"level":3,"title":"关于thymeleaf的遍历","slug":"关于thymeleaf的遍历","link":"#关于thymeleaf的遍历","children":[]}]},{"level":2,"title":"✨拦截器","slug":"✨拦截器","link":"#✨拦截器","children":[]},{"level":2,"title":"✨过滤器","slug":"✨过滤器","link":"#✨过滤器","children":[]},{"level":2,"title":"接收文件@RequestPart","slug":"接收文件-requestpart","link":"#接收文件-requestpart","children":[{"level":3,"title":"文件上传原理","slug":"文件上传原理","link":"#文件上传原理","children":[]}]},{"level":2,"title":"SpringBoot默认错误处理","slug":"springboot默认错误处理","link":"#springboot默认错误处理","children":[{"level":3,"title":"✨自定义错误处理的流程-覆盖error页面","slug":"✨自定义错误处理的流程-覆盖error页面","link":"#✨自定义错误处理的流程-覆盖error页面","children":[]},{"level":3,"title":"异常自动处理原理","slug":"异常自动处理原理","link":"#异常自动处理原理","children":[]},{"level":3,"title":"✨自定义异常处理-@ControllerAdvice处理全局异常","slug":"✨自定义异常处理-controlleradvice处理全局异常","link":"#✨自定义异常处理-controlleradvice处理全局异常","children":[]},{"level":3,"title":"✨自定义异常处理-@ResponseStatus 处理自定义异常","slug":"✨自定义异常处理-responsestatus-处理自定义异常","link":"#✨自定义异常处理-responsestatus-处理自定义异常","children":[]},{"level":3,"title":"✨✨自定义全局异常处理器","slug":"✨✨自定义全局异常处理器","link":"#✨✨自定义全局异常处理器","children":[]},{"level":3,"title":"使用原生Servlet组件","slug":"使用原生servlet组件","link":"#使用原生servlet组件","children":[]},{"level":3,"title":"SpringBoot定制化开发","slug":"springboot定制化开发","link":"#springboot定制化开发","children":[]}]}],"git":{"createdTime":1687006308000,"updatedTime":1687014880000,"contributors":[{"name":"Amayakite","email":"amayakite@qq.com","commits":2}]},"readingTime":{"minutes":53.4,"words":16020},"filePathRelative":"JavaLang/SpringBoot/02-Spring_Boot核心功能.md","localizedDate":"2021年12月18日","excerpt":"<h1> 配置文件</h1>\\n<h2> properties配置文件</h2>\\n<p>就和我们之前的properties一样</p>\\n<h2> yaml</h2>\\n<p>​YAML是<code>YAML Ain't Markup Langurage</code> (YAML 不是一种标记语言) 的递归缩写，在开发的这种语言时候，YAML的意思是<code>Yet Another Markup Language</code>（任然是一种标记语言）</p>\\n<p>​所以江湖人称：薛定谔的YAML</p>\\n<p>​非常适合用来做以数据为中心的配置文件</p>\\n<p>​这玩意比properties和xml和json方便很多  直观很多 语法更容易懂</p>","autoDesc":true}`);export{e as data};
