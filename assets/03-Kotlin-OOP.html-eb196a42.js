import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as p,c as e,e as a,a as n,b as s}from"./app-3ab2953d.js";const o="/images/Java/Android/03-Kotlin-OOP/image-20220507161319454.png",i="/images/Java/Android/03-Kotlin-OOP/image-20220507175512202.png",c="/images/Java/Android/03-Kotlin-OOP/image-20220507215525442.png",l="/images/Java/Android/03-Kotlin-OOP/image-20220507224655047.png",u="/images/Java/Android/03-Kotlin-OOP/image-20220508152810691.png",r="/images/Java/Android/03-Kotlin-OOP/image-20220508152904862.png",k="/images/Java/Android/03-Kotlin-OOP/image-20220508152959747.png",d="/images/Java/Android/03-Kotlin-OOP/image-20220508153050954.png",v="/images/Java/Android/03-Kotlin-OOP/image-20220508153138509.png",m="/images/Java/Android/03-Kotlin-OOP/image-20220508160254108.png",b="/images/Java/Android/03-Kotlin-OOP/image-20220508160347079.png",g="/images/Java/Android/03-Kotlin-OOP/image-20220508164602517.png",f="/images/Java/Android/03-Kotlin-OOP/image-20220508172611028.png",y="/images/Java/Android/03-Kotlin-OOP/image-20220508172823607.png",h="/images/Java/Android/03-Kotlin-OOP/image-20220508173420097.png",w="/images/Java/Android/03-Kotlin-OOP/image-20220508173446595.png",q="/images/Java/Android/03-Kotlin-OOP/image-20220508173537833.png",x="/images/Java/Android/03-Kotlin-OOP/image-20220508174430506.png",S="/images/Java/Android/03-Kotlin-OOP/image-20220508174543654.png",P="/images/Java/Android/03-Kotlin-OOP/image-20220508174603069.png",_="/images/Java/Android/03-Kotlin-OOP/image-20220508174645345.png",O={},A=a('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>Kotlin的Object相对于Java来说多了更多特性，这里就不从Java开始学了，只看Kotlin独有的特性</p><h2 id="field" tabindex="-1"><a class="header-anchor" href="#field" aria-hidden="true">#</a> field</h2><p>实际上就是一个对象中的属性值，在Kotlin中有更舒服的用法（大概）</p><figure><img src="'+o+`" alt="image-20220507161319454" tabindex="0" loading="lazy"><figcaption>image-20220507161319454</figcaption></figure><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><p>先来定义一个类</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Player <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Jack&quot;</span></span>
    <span class="token keyword">var</span> age<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">10</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没错，就是这种写法，而不是public private之类的定义</p><p>来看看反编译文件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>
    <span class="token comment">// 自动private</span>
    <span class="token annotation punctuation">@NotNull</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;Jack&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token comment">// 自动getset</span>
    <span class="token annotation punctuation">@NotNull</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">String</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Intrinsics</span><span class="token punctuation">.</span><span class="token function">checkNotNullParameter</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> <span class="token string">&quot;&lt;set-?&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> var1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> var1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来试用下</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> player <span class="token operator">=</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    player<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;John&quot;</span></span>
    player<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">player<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, Age: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">player<span class="token punctuation">.</span>age</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后看看反编译文件</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> static <span class="token keyword">final</span> void <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Player player <span class="token operator">=</span> new <span class="token function">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 可以发现实际上就是调用了get/set方法</span>
    player<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;John&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    player<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    String var1 <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Name: &quot;</span></span> <span class="token operator">+</span> player<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">&quot;, Age: &quot;</span></span> <span class="token operator">+</span> player<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义get-set" tabindex="-1"><a class="header-anchor" href="#自定义get-set" aria-hidden="true">#</a> 自定义get/set</h3><p>其实非常简单</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Player <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Jack&quot;</span></span>
        <span class="token comment">//        这里的field实际上就是name</span>
<span class="token comment">//        uppercase:获取副本并且首字母大写</span>
        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//            set的时候自定义操作之类的 例如删除空格</span>
            field <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

    <span class="token keyword">var</span> age<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">10</span>

<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> player <span class="token operator">=</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    player<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;aaaaaom&quot;</span></span>
    <span class="token function">println</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时你还可以让其私有化</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Player <span class="token punctuation">{</span>
    <span class="token keyword">var</span> age<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">10</span>
    <span class="token comment">// 禁止set</span>
        <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            field <span class="token operator">=</span> value
        <span class="token punctuation">}</span>
        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> field <span class="token operator">+</span> <span class="token number">999</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h2><h3 id="主构造函数" tabindex="-1"><a class="header-anchor" href="#主构造函数" aria-hidden="true">#</a> 主构造函数</h3><p>和Java不一样的是，这个玩意支持这样写构造函数，<code>_</code>下划线开头的东西变量，将作为临时变量，外部无法访问</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Player</span><span class="token punctuation">(</span>_name<span class="token operator">:</span> String<span class="token punctuation">,</span> _age<span class="token operator">:</span> Int<span class="token punctuation">,</span> _position<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> _name
    <span class="token keyword">var</span> age<span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token operator">=</span> _age
    <span class="token keyword">var</span> position<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> _position
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;Player(name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">, age=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string">, position=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">position</span></span><span class="token string">)&quot;</span></span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">val</span> player <span class="token operator">=</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;John&quot;</span></span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Midfielder&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span>
    

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你不需要重写get/set方法的话，甚至可以直接在主构造函数内定义属性，例如</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">fun</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">, you are </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string"> years old&quot;</span></span>

<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">val</span> player <span class="token operator">=</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;John&quot;</span></span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="次构造函数" tabindex="-1"><a class="header-anchor" href="#次构造函数" aria-hidden="true">#</a> 次构造函数</h3><p>如果说想在主构造函数的基础上添加额外的构造，用<code>constructor</code>并调用<code>this</code>即可</p><p>例如</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">fun</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">, you are </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string"> years old&quot;</span></span>

   
    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	
    <span class="token comment">// 额外的无参</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">val</span> player <span class="token operator">=</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;John&quot;</span></span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="默认值" tabindex="-1"><a class="header-anchor" href="#默认值" aria-hidden="true">#</a> 默认值</h3><p>和函数中一样，顺带一提，如果这个类没有其他方法，则可以省略大括号</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> age<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> player <span class="token operator">=</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;John&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="私有变量" tabindex="-1"><a class="header-anchor" href="#私有变量" aria-hidden="true">#</a> 私有变量</h3><p>和Java一样</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> age<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">fun</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string"> and I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string"> years old and I have </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">score</span></span><span class="token string"> points&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> player <span class="token operator">=</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;John&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="init初始化函数" tabindex="-1"><a class="header-anchor" href="#init初始化函数" aria-hidden="true">#</a> Init初始化函数</h3><p>这个在构造后立刻执行，可以在里面加一些额外的内容，例如判断下值是否匹配</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> age<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">fun</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string"> and I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string"> years old &quot;</span></span>
    <span class="token punctuation">}</span>

    <span class="token keyword">init</span> <span class="token punctuation">{</span>
        <span class="token comment">// require 当里面第一个值返回值为false的时候，抛出第二个值（异常的形式）</span>
        <span class="token comment">// 第一个值是可以是一个boolean表达式</span>
        <span class="token function">require</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">&quot;Name cannot be empty&quot;</span></span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> player <span class="token operator">=</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后，可以看到是在构造函数内部增强了</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> Player <span class="token punctuation">{</span>
   <span class="token annotation builtin">@NotNull</span>
   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
   <span class="token keyword">private</span> int age<span class="token punctuation">;</span>
	
   <span class="token comment">//....</span>
    
   <span class="token keyword">public</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token annotation builtin">@NotNull</span> String name<span class="token punctuation">,</span> int age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Intrinsics<span class="token punctuation">.</span><span class="token function">checkNotNullParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
      CharSequence var3 <span class="token operator">=</span> <span class="token punctuation">(</span>CharSequence<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
      boolean var5 <span class="token operator">=</span> var3<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         int var4 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
         String var6 <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Name cannot be empty&quot;</span></span><span class="token punctuation">;</span>
         <span class="token keyword">throw</span> new <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span>var6<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// $FF: synthetic method</span>
   <span class="token keyword">public</span> <span class="token function">Player</span><span class="token punctuation">(</span>String var1<span class="token punctuation">,</span> int var2<span class="token punctuation">,</span> int var3<span class="token punctuation">,</span> DefaultConstructorMarker var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>var3 &amp; <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         var2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">this</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始化顺序" tabindex="-1"><a class="header-anchor" href="#初始化顺序" aria-hidden="true">#</a> 初始化顺序</h3><p>一张图带过</p><figure><img src="`+i+`" alt="image-20220507175512202" tabindex="0" loading="lazy"><figcaption>image-20220507175512202</figcaption></figure><h3 id="延迟初始化变量" tabindex="-1"><a class="header-anchor" href="#延迟初始化变量" aria-hidden="true">#</a> 延迟初始化变量</h3><p>例如有一个变量我不确定会不会用它，但是我想在要用到它的时候再进行初始化（手动初始化），以便降低内存损耗</p><p>那么就可以使用kotlin提供的延迟初始化关键字<code>lateinit</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">var</span> age<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">fun</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string"> and I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string"> years old &quot;</span></span>
    <span class="token punctuation">}</span>

    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> equipment<span class="token operator">:</span> String

    <span class="token keyword">fun</span> <span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        equipment <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;ready&quot;</span></span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">battle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;equipment is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">equipment</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> player <span class="token operator">=</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 变量还没初始化 直接调用这个 将会抛出异常UninitializedPropertyAccessException</span>
    player<span class="token punctuation">.</span><span class="token function">battle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，一般来说要用这个变量的方法都会加一个安全的判断操作</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">var</span> age<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">fun</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string"> and I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string"> years old &quot;</span></span>
    <span class="token punctuation">}</span>

    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> equipment<span class="token operator">:</span> String

    <span class="token keyword">fun</span> <span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        equipment <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;ready&quot;</span></span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">battle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ::equipment.isInitialized 如果equipment变量已经被初始化，则返回true，否则返回false</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">::</span>equipment<span class="token punctuation">.</span>isInitialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string"> is ready to battle：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">equipment</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string"> is not ready to battle&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> player <span class="token operator">=</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    player<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    player<span class="token punctuation">.</span><span class="token function">battle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="惰性初始化" tabindex="-1"><a class="header-anchor" href="#惰性初始化" aria-hidden="true">#</a> 惰性初始化</h3><p>延迟初始化并不是退后初始化的唯一方式，也可以暂时不初始化某个变量，直到首次使用它，这就是惰性初始化</p><p>语法：<code>val xxxx by lazy{lambda表达式}</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit

<span class="token keyword">class</span> Player <span class="token punctuation">{</span>

	<span class="token comment">// 这个可以传入任意值，如果传入的是方法，则方法的返回值是它的value</span>
    <span class="token keyword">val</span> config <span class="token keyword">by</span> lazy <span class="token punctuation">{</span> <span class="token function">loadConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">loadConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;loading...&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;xxx&quot;</span></span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> player <span class="token operator">=</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;延迟结束&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span>config<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 运行结果</span>
延迟结束
loading<span class="token operator">..</span><span class="token punctuation">.</span>
xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和延迟初始化比起来，这个就像是饿汉式，延迟初始化就像是懒汉式</p><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h2><p>所有类默认都是封闭的，要让某个类开放继承，必须使用<code>open</code>关键字来修饰它</p><h3 id="open-开放继承" tabindex="-1"><a class="header-anchor" href="#open-开放继承" aria-hidden="true">#</a> Open-开放继承</h3><p>相当于把继承整的多了一个步骤，然后语法如下</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/**
 * @author      Amayakite
 * @date    2022年05月07日20时45分05秒
 * @version     1.0
 * @description TODO
 */</span>
<span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">//    方法也是需要加open才能被重写</span>
    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Person(name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">)&quot;</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> User <span class="token operator">:</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Amayakite&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 重写直接override即可，不需要@注解了</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">name<span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!&quot;</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> user <span class="token operator">=</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判断是否属于某类和转换成某个类" tabindex="-1"><a class="header-anchor" href="#判断是否属于某类和转换成某个类" aria-hidden="true">#</a> 判断是否属于某类和转换成某个类</h3><ul><li>判断：<code>变量 is 类</code> 返回布尔</li><li>转换：<code>(变量 as 类).方法/值</code></li></ul><p>判断的话实际上就是把<code>instanceof</code>变得更短了</p>`,63),E=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{kotlin:"",class:"language-kotlin"},[n("code",null,[n("span",{class:"token keyword"},"open"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token function"},"Person"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"val"),s(" name"),n("span",{class:"token operator"},":"),s(" String"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"open"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"description"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"Person(name='),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"$"),n("span",{class:"token expression"},"name")]),n("span",{class:"token string"},')"')]),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"class"),s(" User "),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"Person"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"Amayakite"')]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"override"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"description"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"Hello '),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token expression"},[s("name"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"capitalize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},'!"')]),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"val"),s(" user "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"User"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),s("user "),n("span",{class:"token keyword"},"is"),s(" Person"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=a(`<p>看看底层：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> var1 <span class="token operator">=</span> user <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来是转换，语法稍微比java怪一些</p>`,3),$=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{kotlin:"",class:"language-kotlin"},[n("code",null,[n("span",{class:"token comment"},`/**
 * @author      Amayakite
 * @date    2022年05月07日20时45分05秒
 * @version     1.0
 * @description TODO
 */`),s(`
`),n("span",{class:"token keyword"},"open"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token function"},"Person"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"val"),s(" name"),n("span",{class:"token operator"},":"),s(" String"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token comment"},"//    方法也是需要加open才能被重写"),s(`
    `),n("span",{class:"token keyword"},"open"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"description"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"Person(name='),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"$"),n("span",{class:"token expression"},"name")]),n("span",{class:"token string"},')"')]),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"class"),s(" User "),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"Person"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"Amayakite"')]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"override"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"description"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"Hello '),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token expression"},[s("name"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"capitalize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},'!"')]),s(`

    `),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"sayHello"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"Hello '),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token expression"},[s("name"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"capitalize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},'!"')]),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"val"),s(" p"),n("span",{class:"token operator"},":"),s(" Person "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"User"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("p "),n("span",{class:"token keyword"},"is"),s(" User"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token punctuation"},"("),s("p "),n("span",{class:"token keyword"},"as"),s(" User"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sayHello"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=a(`<h3 id="智能类型转换" tabindex="-1"><a class="header-anchor" href="#智能类型转换" aria-hidden="true">#</a> 智能类型转换</h3><p>在Java中，我们转换一个类型后，需要声明一个变量来接收</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Person</span> p  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>p<span class="token punctuation">;</span>
        u<span class="token punctuation">.</span><span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        u<span class="token punctuation">.</span><span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在Kotlin中，我们只需要声明一次as，将会自动将对象转换至目标对象，例如</p>`,4),U=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{kotlin:"",class:"language-kotlin"},[n("code",null,[n("span",{class:"token comment"},`/**
 * @author      Amayakite
 * @date    2022年05月07日20时45分05秒
 * @version     1.0
 * @description TODO
 */`),s(`
`),n("span",{class:"token keyword"},"open"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token function"},"Person"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"val"),s(" name"),n("span",{class:"token operator"},":"),s(" String"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token comment"},"//    方法也是需要加open才能被重写"),s(`
    `),n("span",{class:"token keyword"},"open"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"description"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"Person(name='),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"$"),n("span",{class:"token expression"},"name")]),n("span",{class:"token string"},')"')]),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"class"),s(" User "),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"Person"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"Amayakite"')]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"override"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"description"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"Hello '),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token expression"},[s("name"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"capitalize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},'!"')]),s(`

    `),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"sayHello"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"Hello '),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token expression"},[s("name"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"capitalize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},'!"')]),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"val"),s(" p"),n("span",{class:"token operator"},":"),s(" Person "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"User"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("p "),n("span",{class:"token keyword"},"is"),s(" User"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token punctuation"},"("),s("p "),n("span",{class:"token keyword"},"as"),s(" User"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sayHello"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token comment"},"//        注意 下面没有加转换语句 内部自动智能转换为user了"),s(`
        p`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sayHello"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),J=a(`<h3 id="超类any" tabindex="-1"><a class="header-anchor" href="#超类any" aria-hidden="true">#</a> 超类Any</h3><p>和Java的object一样，没啥好多说的</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>person <span class="token keyword">is</span> Any<span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="直接创建一个单例对象-object" tabindex="-1"><a class="header-anchor" href="#直接创建一个单例对象-object" aria-hidden="true">#</a> 直接创建一个单例对象-Object</h3><p>在Java中，管理单例对象一直都比较痛苦，但是在Kotlin中可以直接在定义的时候同时给你创建一份出来</p><p>例子</p><p>例如</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpRequest
<span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>http<span class="token punctuation">.</span>Method


<span class="token comment">// 使用object声明 这个类将在定义的时候自动创建一个单例对象</span>
<span class="token keyword">object</span> RequestConfig <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">val</span> BASE_URL <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;https://jsonplaceholder.typicode.com&quot;</span></span>
    <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;/posts/1&quot;</span></span>
    <span class="token keyword">var</span> method<span class="token operator">:</span> Method <span class="token operator">=</span> Method<span class="token punctuation">.</span>GET
    <span class="token keyword">var</span> headers<span class="token operator">:</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Content-Type&quot;</span></span> <span class="token keyword">to</span> <span class="token string-literal singleline"><span class="token string">&quot;application/json&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> body <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">fun</span> <span class="token function">sendRequestAndPrintResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> response <span class="token operator">=</span> HttpRequest<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>BASE_URL <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>
            headers<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> hKey<span class="token punctuation">,</span> HValue <span class="token operator">-&gt;</span>
                it<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span>hKey<span class="token punctuation">,</span> HValue<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 直接使用这个单例对象的方法 不需要初始化</span>
    RequestConfig<span class="token punctuation">.</span><span class="token function">sendRequestAndPrintResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 直接修改值</span>
    RequestConfig<span class="token punctuation">.</span>path <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;/posts/2&quot;</span></span>
    RequestConfig<span class="token punctuation">.</span><span class="token function">sendRequestAndPrintResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匿名内部类" tabindex="-1"><a class="header-anchor" href="#匿名内部类" aria-hidden="true">#</a> 匿名内部类</h3><p>使用如下方式可以创建一个匿名内部类（object关键字）</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello, I&#39;m </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这样出来也是单例的</span>
    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Alice&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Very Good, I&#39;m </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token keyword">this</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    p<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="伴生对象-解决static问题" tabindex="-1"><a class="header-anchor" href="#伴生对象-解决static问题" aria-hidden="true">#</a> 伴生对象（解决Static问题）</h3><p>在Kotlin中，没有Static关键字，解决方案是伴生对象，可以在一个类内使用<code>companion</code>关键字来定义一个伴生对象，且只能定义一个，这个伴生对象在声明后是<strong>全局唯一</strong>的（无论直接调用还是new了之后调用，都是同一个）</p><p>这玩意就是解决static的，不要想的太复杂，它比static更高级的是，不调用它的话，是不会实例化这个伴生对象的</p><p>先看例子</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> ConfigMap <span class="token punctuation">{</span>
    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token keyword">val</span> KEY_NAME <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span>
        <span class="token keyword">const</span> <span class="token keyword">val</span> KEY_AGE <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;age&quot;</span></span>
        <span class="token keyword">fun</span> <span class="token function">printKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;KEY_NAME: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">KEY_NAME</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;KEY_AGE: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">KEY_AGE</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">init</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> configName <span class="token operator">=</span> KEY_NAME
        <span class="token function">println</span><span class="token punctuation">(</span>configName<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可以直接访问 说明是static</span>
    ConfigMap<span class="token punctuation">.</span><span class="token function">printKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">ConfigMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内部类" tabindex="-1"><a class="header-anchor" href="#内部类" aria-hidden="true">#</a> 内部类</h3><p>在Kotlin中定义内部类<strong>无需使用static关键字</strong>，默认就是静态的</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Person <span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">fun</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;User name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Person<span class="token punctuation">.</span><span class="token function">User</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据类-lombok替代品" tabindex="-1"><a class="header-anchor" href="#数据类-lombok替代品" aria-hidden="true">#</a> 数据类(lombok替代品)</h3><p>顾名思义，就是专门设计用来存储数据的类</p><p>数据类停了toString的个性化实现</p><p>在kotlin中,<code>==</code>符号默认情况下，比较对象就是比较他们的值（调用equals，没有重写的情况下就是比较内存地址），数据类提供了equals和hashcode的个性化实现</p><p>首先我们来一个简单的类</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Coordinate</span><span class="token punctuation">(</span><span class="token keyword">var</span> x<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">var</span> y<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> isInBounds
        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> x <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">9</span> <span class="token operator">&amp;&amp;</span> y <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">9</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">Coordinate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// 结果：Coordinate@4f3f5b24</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">Coordinate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">Coordinate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// 结果：false</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在该类声明的时候加上一个data</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Coordinate</span><span class="token punctuation">(</span><span class="token keyword">var</span> x<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">var</span> y<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> isInBounds
        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> x <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">9</span> <span class="token operator">&amp;&amp;</span> y <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">9</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">Coordinate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// Coordinate(x=10, y=20)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">Coordinate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">Coordinate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// 结果 true</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在反编译文件中，可以看到</p><figure><img src="`+c+`" alt="image-20220507215525442" tabindex="0" loading="lazy"><figcaption>image-20220507215525442</figcaption></figure><p>它重写了equals和hashcode还有tostring以及有一个额外的copy方法</p><h3 id="类的结构赋值" tabindex="-1"><a class="header-anchor" href="#类的结构赋值" aria-hidden="true">#</a> 类的结构赋值</h3><p>如果是普通类（不是数据类），则需要这样声明（固定写法）</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>
<span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">val</span> username<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> password<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//    如果是普通类，必须得operator fun componentNumber()=字段值或者计算的值</span>
<span class="token comment">//    这个component是必须以1开始，然后按照顺序来定义的，也就是不能出现0或者不连续的数字</span>
    <span class="token keyword">operator</span> <span class="token keyword">fun</span> <span class="token function">component1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> username
    <span class="token keyword">operator</span> <span class="token keyword">fun</span> <span class="token function">component2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> password
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> user <span class="token operator">=</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;admin&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;password&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span> <span class="token operator">=</span> user
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">username</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">password</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是数据类，则会默认使用主构造方法需要的参数作为结构赋值的内容</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Coordinate</span><span class="token punctuation">(</span><span class="token keyword">var</span> x<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">var</span> y<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> isInBounds
        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> x <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">9</span> <span class="token operator">&amp;&amp;</span> y <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">9</span>
<span class="token punctuation">}</span>


<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> coordinate <span class="token operator">=</span> <span class="token function">Coordinate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span> coordinate
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;x = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">x</span></span><span class="token string">, y = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">y</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运算符重载" tabindex="-1"><a class="header-anchor" href="#运算符重载" aria-hidden="true">#</a> 运算符重载</h3><p>例如在List中，可以通过list+=&quot;xxx&quot;来添加新的value</p><p>在对象中同理，我们只需要写入<code>operator fun plus</code>方法即可，例如</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Coordinate</span><span class="token punctuation">(</span><span class="token keyword">var</span> x<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">var</span> y<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">operator</span> <span class="token keyword">fun</span> <span class="token function">plus</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Coordinate<span class="token punctuation">)</span><span class="token operator">:</span> Coordinate <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">Coordinate</span><span class="token punctuation">(</span>x <span class="token operator">+</span> other<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> other<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> coordinate <span class="token operator">=</span> <span class="token function">Coordinate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
    coordinate <span class="token operator">+=</span> <span class="token function">Coordinate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>coordinate<span class="token punctuation">)</span>
<span class="token comment">//    Coordinate(x=4, y=6)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他的同理，常见的如下</p><figure><img src="`+l+`" alt="image-20220507224655047" tabindex="0" loading="lazy"><figcaption>image-20220507224655047</figcaption></figure><h3 id="枚举类" tabindex="-1"><a class="header-anchor" href="#枚举类" aria-hidden="true">#</a> 枚举类</h3><p>最简单的使用和Java差不多</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 用了枚举关键字也需要加上class关键字</span>
<span class="token keyword">enum</span> <span class="token keyword">class</span> ResponseEnum <span class="token punctuation">{</span>
    SUCCESS<span class="token punctuation">,</span>
    FAILURE<span class="token punctuation">,</span>
    ERROR<span class="token punctuation">,</span>
    UNKNOWN<span class="token punctuation">,</span>
    NOT_FOUND<span class="token punctuation">,</span>
    FORBIDDEN<span class="token punctuation">,</span>
    UNAUTHORIZED<span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span>ResponseEnum<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span> <span class="token comment">//SUCCESS</span>
    <span class="token function">println</span><span class="token punctuation">(</span>ResponseEnum<span class="token punctuation">.</span>SUCCESS <span class="token keyword">is</span> ResponseEnum<span class="token punctuation">)</span> <span class="token comment">//true</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，也可以加字段</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token function">ResponseEnum</span><span class="token punctuation">(</span><span class="token keyword">val</span> code<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> message<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;success&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">FAIL</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;fail&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">UNAUTHORIZED</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;unauthorized&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">FORBIDDEN</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;forbidden&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">NOT_FOUND</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;not found&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">INTERNAL_SERVER_ERROR</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;internal server error&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;ResponseEnum(code=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">code</span></span><span class="token string">, message=&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">message</span></span><span class="token string">&#39;)&quot;</span></span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span>ResponseEnum<span class="token punctuation">.</span>UNAUTHORIZED<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再或者，可以接收下其他obj，例如</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 注意 这里是private，外部是无法直接访问到person这个对象的</span>
<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token function">PersonEnum</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> person<span class="token operator">:</span> Person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">PERSON_1</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">PERSON_2</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;李四&quot;</span></span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">PERSON_3</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;王五&quot;</span></span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">PersonEnum<span class="token punctuation">.</span>PERSON_1<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">PersonEnum<span class="token punctuation">.</span>PERSON_1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">//    迭代器遍历</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>personEnum <span class="token keyword">in</span> PersonEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">personEnum<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">personEnum</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="密封类" tabindex="-1"><a class="header-anchor" href="#密封类" aria-hidden="true">#</a> 密封类</h3><p>我现在想要一个效果，首先是一个枚举类代表该用户有没有驾照</p><p>然后通过一个函数来判断传入的obj是枚举类中的哪一个</p><p>如果是没有考或者没过，则返回错误信息，如果考过了，则返回成功信息和驾照编号</p><p>按照往常来说，这比较复杂， 但是Kotlin中的密封类（sealed class）能很好的解决这个问题</p><p>直接看例子把，它相当于一个超级舒服的枚举</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">sealed</span> <span class="token keyword">class</span> LincesStatus <span class="token punctuation">{</span>
    <span class="token comment">// 下面两个object都是单例Class对象，类型是LincesStatus$UnQualified和类型是LincesStatus￥Learning</span>
    <span class="token keyword">object</span> UnQualified <span class="token operator">:</span> <span class="token function">LincesStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">object</span> Learning <span class="token operator">:</span> <span class="token function">LincesStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 这个是多例</span>
    <span class="token keyword">class</span> <span class="token function">Qualified</span><span class="token punctuation">(</span><span class="token keyword">val</span> license<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">LincesStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token function">Driver</span><span class="token punctuation">(</span><span class="token keyword">val</span> status<span class="token operator">:</span> LincesStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">checkLinces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">is</span> LincesStatus<span class="token punctuation">.</span>UnQualified <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;UnQualified&quot;</span></span>
            <span class="token keyword">is</span> LincesStatus<span class="token punctuation">.</span>Learning <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;Learning&quot;</span></span>
            <span class="token keyword">is</span> LincesStatus<span class="token punctuation">.</span>Qualified <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;有资格，您的驾照号码是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">status<span class="token punctuation">.</span>license</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">Driver</span><span class="token punctuation">(</span>LincesStatus<span class="token punctuation">.</span>Learning<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkLinces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">Driver</span><span class="token punctuation">(</span>LincesStatus<span class="token punctuation">.</span><span class="token function">Qualified</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;123456789&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkLinces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
<span class="token comment">// 结果：</span>
Learning
有资格，您的驾照号码是<span class="token number">123456789</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+'" alt="image-20220508152810691" tabindex="0" loading="lazy"><figcaption>image-20220508152810691</figcaption></figure><h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h2><figure><img src="'+r+'" alt="image-20220508152904862" tabindex="0" loading="lazy"><figcaption>image-20220508152904862</figcaption></figure><p>在Kotlin中，接口的属性是可以被继承的</p><p>并且可以提供默认的实现</p><figure><img src="'+k+'" alt="image-20220508152959747" tabindex="0" loading="lazy"><figcaption>image-20220508152959747</figcaption></figure><h2 id="抽象类" tabindex="-1"><a class="header-anchor" href="#抽象类" aria-hidden="true">#</a> 抽象类</h2><p>和Java基本一致，用的不多没啥好多说的</p><figure><img src="'+d+'" alt="image-20220508153050954" tabindex="0" loading="lazy"><figcaption>image-20220508153050954</figcaption></figure><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h2><p>和Java也差不多</p><figure><img src="'+v+`" alt="image-20220508153138509" tabindex="0" loading="lazy"><figcaption>image-20220508153138509</figcaption></figure><h3 id="泛型类型约束" tabindex="-1"><a class="header-anchor" href="#泛型类型约束" aria-hidden="true">#</a> 泛型类型约束</h3><p>例如想限制泛型必须是某个类或者其之类的话</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> User <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;User </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string"> logged in&quot;</span></span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;Welcome, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 注意 这里不是 extends 而是：</span>
<span class="token keyword">fun</span> <span class="token operator">&lt;</span>T <span class="token operator">:</span> Person<span class="token operator">&gt;</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>person<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> user <span class="token operator">=</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;John&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">sayHello</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="out和in" tabindex="-1"><a class="header-anchor" href="#out和in" aria-hidden="true">#</a> out和in</h3><p>这两个是限制interface中方法的对应内容的</p><p>通过out约束的泛型，使用其的方法只能将它作为返回值</p><p>通过in约束的泛型，使用其的方法只能将它作为参数</p><p>例如</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> Product<span class="token operator">&lt;</span><span class="token keyword">out</span> T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//    如果这里的T作为参数，则会报错</span>
    <span class="token keyword">fun</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> T
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> Cosumer<span class="token operator">&lt;</span><span class="token keyword">in</span> T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果这里的T作为返回值，则会报错</span>
    <span class="token keyword">fun</span> <span class="token function">accept</span><span class="token punctuation">(</span>price<span class="token operator">:</span> T<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> ProductAndComsumerImpl<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">val</span> userInfo<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token operator">:</span> Product<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span> Cosumer<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userInfo
    <span class="token punctuation">}</span>


    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">accept</span><span class="token punctuation">(</span>price<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> product <span class="token operator">=</span> ProductAndComsumerImpl<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;123&quot;</span></span><span class="token punctuation">)</span>
    product<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;123&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>额外说明</p><figure><img src="`+m+'" alt="image-20220508160254108" tabindex="0" loading="lazy"><figcaption>image-20220508160254108</figcaption></figure><h3 id="reified-让泛型可以加入判断" tabindex="-1"><a class="header-anchor" href="#reified-让泛型可以加入判断" aria-hidden="true">#</a> reified-让泛型可以加入判断</h3><figure><img src="'+b+`" alt="image-20220508160347079" tabindex="0" loading="lazy"><figcaption>image-20220508160347079</figcaption></figure><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">Human</span><span class="token punctuation">(</span><span class="token keyword">open</span> <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span>
<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Man</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">override</span> <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Human</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>
<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">WuMan</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">override</span> <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Human</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>

<span class="token keyword">class</span> MagicBox<span class="token operator">&lt;</span>T <span class="token operator">:</span> Human<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在Kotlin中，泛型也是无法直接参与判断的，要想添加判断 这是固定写法</span>
    <span class="token comment">// inline fun &lt;reified T : XXX&gt; xxx()</span>
    <span class="token comment">// 这样这个T就可以直接参加到is判断内</span>
    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> T<span class="token operator">&gt;</span> <span class="token function">randomOrBackUp</span><span class="token punctuation">(</span>backup<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> T<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>
        <span class="token keyword">val</span> randomHumanList <span class="token operator">=</span> listOf<span class="token operator">&lt;</span>Human<span class="token operator">&gt;</span><span class="token punctuation">(</span>
            <span class="token function">Man</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">WuMan</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;李四&quot;</span></span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
<span class="token comment">//        取随机的一个</span>
        <span class="token keyword">var</span> randomHuman <span class="token operator">=</span> randomHumanList<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// is判断</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>randomHuman <span class="token keyword">is</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> randomHuman
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">backup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> magicBox <span class="token operator">=</span> MagicBox<span class="token operator">&lt;</span>Man<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>magicBox<span class="token punctuation">.</span><span class="token function">randomOrBackUp</span> <span class="token punctuation">{</span> <span class="token function">Man</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;1111&quot;</span></span><span class="token punctuation">,</span> <span class="token number">333</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>magicBox<span class="token punctuation">.</span><span class="token function">randomOrBackUp</span> <span class="token punctuation">{</span> <span class="token function">Man</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;555&quot;</span></span><span class="token punctuation">,</span> <span class="token number">666</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vararg-一次性接收多个参数" tabindex="-1"><a class="header-anchor" href="#vararg-一次性接收多个参数" aria-hidden="true">#</a> vararg-一次性接收多个参数</h2><p>我们正常写的函数，一次性只能接收一个参数，如果想让其接受多个，就像是<code>main(String args[])</code>这样的话 则可以</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">logStringList</span><span class="token punctuation">(</span><span class="token keyword">vararg</span> strings<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 用for循环之类的</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>string <span class="token keyword">in</span> strings<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 增强for也可：strings.forEach { println(it) }</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">logStringList</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;World&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展函数" tabindex="-1"><a class="header-anchor" href="#扩展函数" aria-hidden="true">#</a> 扩展函数</h2><figure><img src="`+g+`" alt="image-20220508164602517" tabindex="0" loading="lazy"><figcaption>image-20220508164602517</figcaption></figure><p>在Java中，要给一个类定义扩展函数，无非就是匿名内部类（实例化）和额外的方法使用</p><p>但是我现在非匿名内部类的情况下调用一个自定义方法，则可以通过如下方法</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> String<span class="token punctuation">.</span><span class="token function">addExt</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">&quot;!&quot;</span></span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//或者给Any添加一个扩展函数</span>
<span class="token keyword">fun</span> Any<span class="token punctuation">.</span><span class="token function">easyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string-literal singleline"><span class="token string">&quot;Kotlin&quot;</span></span><span class="token punctuation">.</span><span class="token function">addExt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">easyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 结果：打印Kotlin!!</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，也可以换一种写法</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> T<span class="token punctuation">.</span><span class="token function">easyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string-literal singleline"><span class="token string">&quot;Hello, world&quot;</span></span><span class="token punctuation">.</span><span class="token function">easyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候再返回去看看let的源码</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span>  <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">&gt;</span> T<span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> R<span class="token punctuation">)</span><span class="token operator">:</span> R <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 是不是非常一目了然</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展属性" tabindex="-1"><a class="header-anchor" href="#扩展属性" aria-hidden="true">#</a> 扩展属性</h2><figure><img src="`+f+`" alt="image-20220508172611028" tabindex="0" loading="lazy"><figcaption>image-20220508172611028</figcaption></figure><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> String<span class="token punctuation">.</span>NumVowels
    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length

<span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> T<span class="token punctuation">.</span><span class="token function">easyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">.</span>NumVowels<span class="token punctuation">.</span><span class="token function">easyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可空类型扩展和infix" tabindex="-1"><a class="header-anchor" href="#可空类型扩展和infix" aria-hidden="true">#</a> 可空类型扩展和infix</h3><figure><img src="`+y+`" alt="image-20220508172823607" tabindex="0" loading="lazy"><figcaption>image-20220508172823607</figcaption></figure><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">infix</span> <span class="token keyword">fun</span> String<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">printWithDefault</span><span class="token punctuation">(</span>default<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">?:</span> default<span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> MyStr<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    MyStr<span class="token punctuation">.</span><span class="token function">printWithDefault</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么这个infix有什么用呢？</p><p>它可以用于有单个参数的扩展类和函数，可以让我们<strong>省略括号和点</strong>，例如上方的代码还能改成这样</p>`,101),H=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{kotlin:"",class:"language-kotlin"},[n("code",null,[n("span",{class:"token keyword"},"infix"),s(),n("span",{class:"token keyword"},"fun"),s(" String"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"printWithDefault"),n("span",{class:"token punctuation"},"("),s("default"),n("span",{class:"token operator"},":"),s(" String"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),s(),n("span",{class:"token operator"},"?:"),s(" default"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"val"),s(" MyStr"),n("span",{class:"token operator"},":"),s(" String"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),s(`
`),n("span",{class:"token comment"},"//    before"),s(`
    MyStr`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"printWithDefault"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"Hello"')]),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token comment"},"//    after"),s(`
    MyStr printWithDefault `),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"Hello"')]),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=a('<h2 id="在不同的文件之间调用扩展和重命名扩展" tabindex="-1"><a class="header-anchor" href="#在不同的文件之间调用扩展和重命名扩展" aria-hidden="true">#</a> 在不同的文件之间调用扩展和重命名扩展</h2><figure><img src="'+h+'" alt="image-20220508173420097" tabindex="0" loading="lazy"><figcaption>image-20220508173420097</figcaption></figure><p>重命名就加个as即可</p><figure><img src="'+w+'" alt="image-20220508173446595" tabindex="0" loading="lazy"><figcaption>image-20220508173446595</figcaption></figure><figure><img src="'+q+`" alt="image-20220508173537833" tabindex="0" loading="lazy"><figcaption>image-20220508173537833</figcaption></figure><h2 id="内置注解" tabindex="-1"><a class="header-anchor" href="#内置注解" aria-hidden="true">#</a> 内置注解</h2><h3 id="jvmname" tabindex="-1"><a class="header-anchor" href="#jvmname" aria-hidden="true">#</a> @JvmName</h3><p>这个就是指定编译成字节码后Java类的名字</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@file:JvmName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;MyApplication&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello, world!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@JvmName</span><span class="token punctuation">(</span>
   name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;MyApplication&quot;</span></span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> MyApplication <span class="token punctuation">{</span>
   <span class="token keyword">public</span> static <span class="token keyword">final</span> void <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      String var0 <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello, world!&quot;</span></span><span class="token punctuation">;</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var0<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// $FF: synthetic method</span>
   <span class="token keyword">public</span> static void <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> var0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jvmfield" tabindex="-1"><a class="header-anchor" href="#jvmfield" aria-hidden="true">#</a> @JvmField</h3><figure><img src="`+x+'" alt="image-20220508174430506" tabindex="0" loading="lazy"><figcaption>image-20220508174430506</figcaption></figure><p>没太大用途的注解，相当于是把某一个属性public了</p><h3 id="jvmoverload" tabindex="-1"><a class="header-anchor" href="#jvmoverload" aria-hidden="true">#</a> @JvmOverload</h3><figure><img src="'+S+'" alt="image-20220508174543654" tabindex="0" loading="lazy"><figcaption>image-20220508174543654</figcaption></figure><h3 id="jvmstatic" tabindex="-1"><a class="header-anchor" href="#jvmstatic" aria-hidden="true">#</a> @JvmStatic</h3><figure><img src="'+P+'" alt="image-20220508174603069" tabindex="0" loading="lazy"><figcaption>image-20220508174603069</figcaption></figure><h3 id="throws" tabindex="-1"><a class="header-anchor" href="#throws" aria-hidden="true">#</a> @Throws</h3><figure><img src="'+_+'" alt="image-20220508174645345" tabindex="0" loading="lazy"><figcaption>image-20220508174645345</figcaption></figure>',20),K=[A,E,N,$,I,U,J,H,C];function R(T,M){return p(),e("div",null,K)}const L=t(O,[["render",R],["__file","03-Kotlin-OOP.html.vue"]]);export{L as default};
