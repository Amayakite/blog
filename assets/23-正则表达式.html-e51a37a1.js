import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,a as n,b as a,d as l,e as s}from"./app-3ab2953d.js";const u="/images/Java/JavaSE/23-正则表达式/image-20211129222342967.png",i="/images/Java/JavaSE/23-正则表达式/image-20211129223145065.png",k="/images/Java/JavaSE/23-正则表达式/image-20211130122015863.png",r="/images/Java/JavaSE/23-正则表达式/image-20211130122524760.png",d="/images/Java/JavaSE/23-正则表达式/image-20211130195455434.png",m="/images/Java/JavaSE/23-正则表达式/image-20211130215948471.png",v="/images/Java/JavaSE/23-正则表达式/image-20211130220750736.png",g="/images/Java/JavaSE/23-正则表达式/image-20211130223553382.png",b="/images/Java/JavaSE/23-正则表达式/image-20211130234627965.png",q={},y=s(`<h2 id="初始正则表达式" tabindex="-1"><a class="header-anchor" href="#初始正则表达式" aria-hidden="true">#</a> 初始正则表达式</h2><p>假设你现在通过爬虫之类的东西，从百度中爬取到了以下文本</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>1994年6、7月间，在经历了一场历时三天的讨论之后，团队决定再一次改变了努力的目标，这次他们决定将该技术应用于万维网。他们认为随着Mosaic浏览器的到来，因特网正在向同样的高度互动的远景演变，而这一远景正是他们在有线电视网中看到的。作为原型，帕特里克·诺顿写了一个小型万维网浏览器WebRunner。 [8]
1995年，互联网的蓬勃发展给了Oak机会。业界为了使死板、单调的静态网页能够“灵活”起来，急需一种软件技术来开发一种程序，这种程序可以通过网络传播并且能够跨平台运行。于是，世界各大IT企业为此纷纷投入了大量的人力、物力和财力。这个时候，Sun公司想起了那个被搁置起来很久的Oak，并且重新审视了那个用软件编写的试验平台，由于它是按照嵌入式系统硬件平台体系结构进行编写的，所以非常小，特别适用于网络上的传输系统，而Oak也是一种精简的语言，程序非常小，适合在网络上传输。Sun公司首先推出了可以嵌入网页并且可以随同网页在网络上传输的Applet（Applet是一种将小程序嵌入到网页中进行执行的技术），并将Oak更名为Java（在申请注册商标时，发现Oak已经被人使用了，再想了一系列名字之后，最终，使用了提议者在喝一杯Java咖啡时无意提到的Java词语）。5月23日，Sun公司在Sun world会议上正式发布Java和HotJava浏览器。IBM、Apple、DEC、Adobe、HP、Oracle、Netscape和微软等各大公司都纷纷停止了自己的相关开发项目，竞相购买了Java使用许可证，并为自己的产品开发了相应的Java平台。 [9-10]
1996年1月，Sun公司发布了Java的第一个开发工具包（JDK 1.0），这是Java发展历程中的重要里程碑，标志着Java成为一种独立的开发工具。9月，约8.3万个网页应用了Java技术来制作。10月，Sun公司发布了Java平台的第一个即时（JIT）编译器。
1997年2月，JDK 1.1面世，在随后的3周时间里，达到了22万次的下载量。4月2日，Java One会议召开，参会者逾一万人，创当时全球同类会议规模之纪录。9月，Java Developer Connection社区成员超过10万。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在有一个需求，获取到文章中的所有英文单词</p><p>使用传统的方法将要:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//        使用传统方法提取单词</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token char">&#39;a&#39;</span><span class="token operator">:</span>
                <span class="token keyword">case</span> <span class="token char">&#39;b&#39;</span><span class="token operator">:</span>
                    。。。。。。
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二十六个字母大小写都要过一遍，并且要识别下一个是不字母，是的话拼接，不是的话return</p><p>接下来使用正则表达式来解决这个问题</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;1994年6、7月....&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;[a-zA-Z]+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        创建一个匹配其对象</span>
    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        就是matcher匹配器按照pattern的模式，到str文本中去匹配，找到就返回true，否则就返回false</span>
    <span class="token comment">//        开始循环匹配</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//            匹配内容，文本会放到matcher.group(0)</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;找到：&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，完美的打印出了我想要的内容：</p><figure><img src="`+u+`" alt="image-20211129222342967" tabindex="0" loading="lazy"><figcaption>image-20211129222342967</figcaption></figure><p>好，接下来尝试匹配数字 只需要替换一段话即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;[0-9]+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后再匹配所有的英文单词和数字</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;[a-zA-Z0-9]+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来尝试匹配下百度热搜中的标题，下方是直接拔下来的代码</p><figure><img src="`+i+`" alt="image-20211129223145065" tabindex="0" loading="lazy"><figcaption>image-20211129223145065</figcaption></figure><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-tr_4kE4D<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-td_3zMd4 opr-toplist1-link_2YUtD<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-hot_2RbQT c-index-single toplist1-hot-top_3xY_F undefined c-index-single-hot1 <span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">opacity</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_blank<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>从六中全会公报看世界第一大党<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/s?tn=88093251_10_hao_pg<span class="token entity named-entity" title="&amp;">&amp;amp;</span>wd=%E4%BB%8E%E5%85%AD%E4%B8%AD%E5%85%A8%E4%BC%9A%E5%85%AC%E6%8A%A5%E7%9C%8B%E4%B8%96%E7%95%8C%E7%AC%AC%E4%B8%80%E5%A4%A7%E5%85%9A<span class="token entity named-entity" title="&amp;">&amp;amp;</span>usm=5<span class="token entity named-entity" title="&amp;">&amp;amp;</span>ie=utf-8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_pq=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>oq=baidu<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_t=824aAXp8%2BpFIUhwad5x92Sj445OMOJQqG8Tnhz%2FQCCIZDNmVQHfk0URcz2YsYx1XpG19vSbegMI7<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rqid=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsf=633b61ff30c35de3a95a3c1d295d44ff_1_10_1<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_dl=0_right_fyb_pchot_20811<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c-font-medium c-color-t opr-toplist1-subtitle_3FULy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>从六中全会公报看世界第一大党<span class="token comment">&lt;!--8--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c-text c-text-hot opr-toplist1-label_3Mevn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>热<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--9--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-right-num_3FteC toplist1-td_3zMd4<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">line-height</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span>2px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>497万<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-tr_4kE4D<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-td_3zMd4 opr-toplist1-link_2YUtD<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-hot_2RbQT c-index-single toplist1-hot-top_3xY_F undefined c-index-single-hot2 <span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">opacity</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_blank<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>关于奥密克戎 卫健委权威解答来了<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/s?tn=88093251_10_hao_pg<span class="token entity named-entity" title="&amp;">&amp;amp;</span>wd=%E5%85%B3%E4%BA%8E%E5%A5%A5%E5%AF%86%E5%85%8B%E6%88%8E%20%E5%8D%AB%E5%81%A5%E5%A7%94%E6%9D%83%E5%A8%81%E8%A7%A3%E7%AD%94%E6%9D%A5%E4%BA%86<span class="token entity named-entity" title="&amp;">&amp;amp;</span>usm=5<span class="token entity named-entity" title="&amp;">&amp;amp;</span>ie=utf-8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_pq=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>oq=baidu<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_t=4f97eSWhSQ3ERobcS5hZd4hLh%2FCzUa4z7RPEtvlOMiZ2eoiS6UcSWDs5%2BWzN1xOkaiahoa4tXmk3<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rqid=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsf=633b61ff30c35de3a95a3c1d295d44ff_1_10_2<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_dl=0_right_fyb_pchot_20811<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c-font-medium c-color-t opr-toplist1-subtitle_3FULy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>关于奥密克戎 卫健委权威解答来了<span class="token comment">&lt;!--10--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--11--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-right-num_3FteC toplist1-td_3zMd4<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">line-height</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span>2px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>487万<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-tr_4kE4D<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-td_3zMd4 opr-toplist1-link_2YUtD<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-hot_2RbQT c-index-single toplist1-hot-top_3xY_F undefined c-index-single-hot3 <span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">opacity</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_blank<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>十九届六中全会决议中的10个明确<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/s?tn=88093251_10_hao_pg<span class="token entity named-entity" title="&amp;">&amp;amp;</span>wd=%E5%8D%81%E4%B9%9D%E5%B1%8A%E5%85%AD%E4%B8%AD%E5%85%A8%E4%BC%9A%E5%86%B3%E8%AE%AE%E4%B8%AD%E7%9A%8410%E4%B8%AA%E6%98%8E%E7%A1%AE<span class="token entity named-entity" title="&amp;">&amp;amp;</span>usm=5<span class="token entity named-entity" title="&amp;">&amp;amp;</span>ie=utf-8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_pq=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>oq=baidu<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_t=4f97eSWhSQ3ERobcS5hZd4hLh%2FCzUa4z7RPEtvlOMiZ2eoiS6UcSWDs5%2BWzN1xOkaiahoa4tXmk3<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rqid=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsf=633b61ff30c35de3a95a3c1d295d44ff_1_10_3<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_dl=0_right_fyb_pchot_20811<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c-font-medium c-color-t opr-toplist1-subtitle_3FULy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>十九届六中全会决议中的10个明确<span class="token comment">&lt;!--12--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--13--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-right-num_3FteC toplist1-td_3zMd4<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">line-height</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span>2px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>479万<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-tr_4kE4D<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-td_3zMd4 opr-toplist1-link_2YUtD<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-hot_2RbQT c-index-single toplist1-hot-normal_12THH <span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">opacity</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_blank<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>今冬第四轮大范围寒潮来了<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/s?tn=88093251_10_hao_pg<span class="token entity named-entity" title="&amp;">&amp;amp;</span>wd=%E4%BB%8A%E5%86%AC%E7%AC%AC%E5%9B%9B%E8%BD%AE%E5%A4%A7%E8%8C%83%E5%9B%B4%E5%AF%92%E6%BD%AE%E6%9D%A5%E4%BA%86<span class="token entity named-entity" title="&amp;">&amp;amp;</span>usm=5<span class="token entity named-entity" title="&amp;">&amp;amp;</span>ie=utf-8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_pq=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>oq=baidu<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_t=4f97eSWhSQ3ERobcS5hZd4hLh%2FCzUa4z7RPEtvlOMiZ2eoiS6UcSWDs5%2BWzN1xOkaiahoa4tXmk3<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rqid=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsf=633b61ff30c35de3a95a3c1d295d44ff_1_10_4<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_dl=0_right_fyb_pchot_20811<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c-font-medium c-color-t opr-toplist1-subtitle_3FULy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>今冬第四轮大范围寒潮来了<span class="token comment">&lt;!--14--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--15--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-right-num_3FteC toplist1-td_3zMd4<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">line-height</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span>2px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>464万<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-tr_4kE4D<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-td_3zMd4 opr-toplist1-link_2YUtD<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-hot_2RbQT c-index-single toplist1-hot-normal_12THH <span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">opacity</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_blank<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>中国从未邀请美国政客出席冬奥会<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/s?tn=88093251_10_hao_pg<span class="token entity named-entity" title="&amp;">&amp;amp;</span>wd=%E4%B8%AD%E5%9B%BD%E4%BB%8E%E6%9C%AA%E9%82%80%E8%AF%B7%E7%BE%8E%E5%9B%BD%E6%94%BF%E5%AE%A2%E5%87%BA%E5%B8%AD%E5%86%AC%E5%A5%A5%E4%BC%9A<span class="token entity named-entity" title="&amp;">&amp;amp;</span>usm=5<span class="token entity named-entity" title="&amp;">&amp;amp;</span>ie=utf-8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_pq=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>oq=baidu<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_t=4f97eSWhSQ3ERobcS5hZd4hLh%2FCzUa4z7RPEtvlOMiZ2eoiS6UcSWDs5%2BWzN1xOkaiahoa4tXmk3<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rqid=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsf=633b61ff30c35de3a95a3c1d295d44ff_1_10_5<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_dl=0_right_fyb_pchot_20811<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c-font-medium c-color-t opr-toplist1-subtitle_3FULy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>中国从未邀请美国政客出席冬奥会<span class="token comment">&lt;!--16--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--17--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-right-num_3FteC toplist1-td_3zMd4<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">line-height</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span>2px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>459万<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-tr_4kE4D<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-td_3zMd4 opr-toplist1-link_2YUtD<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-hot_2RbQT c-index-single toplist1-hot-normal_12THH <span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">opacity</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_blank<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>内蒙古满洲里检出阳性样本60份<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/s?tn=88093251_10_hao_pg<span class="token entity named-entity" title="&amp;">&amp;amp;</span>wd=%E5%86%85%E8%92%99%E5%8F%A4%E6%BB%A1%E6%B4%B2%E9%87%8C%E6%A3%80%E5%87%BA%E9%98%B3%E6%80%A7%E6%A0%B7%E6%9C%AC60%E4%BB%BD<span class="token entity named-entity" title="&amp;">&amp;amp;</span>usm=5<span class="token entity named-entity" title="&amp;">&amp;amp;</span>ie=utf-8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_pq=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>oq=baidu<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_t=4f97eSWhSQ3ERobcS5hZd4hLh%2FCzUa4z7RPEtvlOMiZ2eoiS6UcSWDs5%2BWzN1xOkaiahoa4tXmk3<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rqid=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsf=633b61ff30c35de3a95a3c1d295d44ff_1_10_6<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_dl=0_right_fyb_pchot_20811<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c-font-medium c-color-t opr-toplist1-subtitle_3FULy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>内蒙古满洲里检出阳性样本60份<span class="token comment">&lt;!--18--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--19--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-right-num_3FteC toplist1-td_3zMd4<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">line-height</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span>2px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>446万<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-tr_4kE4D<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-td_3zMd4 opr-toplist1-link_2YUtD<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-hot_2RbQT c-index-single toplist1-hot-normal_12THH <span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">opacity</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_blank<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>河南多地凌晨突然被不明物体照亮<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/s?tn=88093251_10_hao_pg<span class="token entity named-entity" title="&amp;">&amp;amp;</span>wd=%E6%B2%B3%E5%8D%97%E5%A4%9A%E5%9C%B0%E5%87%8C%E6%99%A8%E7%AA%81%E7%84%B6%E8%A2%AB%E4%B8%8D%E6%98%8E%E7%89%A9%E4%BD%93%E7%85%A7%E4%BA%AE<span class="token entity named-entity" title="&amp;">&amp;amp;</span>usm=5<span class="token entity named-entity" title="&amp;">&amp;amp;</span>ie=utf-8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_pq=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>oq=baidu<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_t=4f97eSWhSQ3ERobcS5hZd4hLh%2FCzUa4z7RPEtvlOMiZ2eoiS6UcSWDs5%2BWzN1xOkaiahoa4tXmk3<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rqid=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsf=633b61ff30c35de3a95a3c1d295d44ff_1_10_7<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_dl=0_right_fyb_pchot_20811<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c-font-medium c-color-t opr-toplist1-subtitle_3FULy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>河南多地凌晨突然被不明物体照亮<span class="token comment">&lt;!--20--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--21--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-right-num_3FteC toplist1-td_3zMd4<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">line-height</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span>2px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>436万<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-tr_4kE4D<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-td_3zMd4 opr-toplist1-link_2YUtD<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-hot_2RbQT c-index-single toplist1-hot-normal_12THH <span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">opacity</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_blank<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>深圳警方通报一男子路口劫持人质<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/s?tn=88093251_10_hao_pg<span class="token entity named-entity" title="&amp;">&amp;amp;</span>wd=%E6%B7%B1%E5%9C%B3%E8%AD%A6%E6%96%B9%E9%80%9A%E6%8A%A5%E4%B8%80%E7%94%B7%E5%AD%90%E8%B7%AF%E5%8F%A3%E5%8A%AB%E6%8C%81%E4%BA%BA%E8%B4%A8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>usm=5<span class="token entity named-entity" title="&amp;">&amp;amp;</span>ie=utf-8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_pq=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>oq=baidu<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_t=2f13%2FChA15s%2Bpcr%2BTHV6ICPZUtJTBqt%2Bg7qa%2Fe3MkDNJGNr7CYeRnPGiGu2P1c36vhJUGElbuGqn<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rqid=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsf=633b61ff30c35de3a95a3c1d295d44ff_1_10_8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_dl=0_right_fyb_pchot_20811<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c-font-medium c-color-t opr-toplist1-subtitle_3FULy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>深圳警方通报一男子路口劫持人质<span class="token comment">&lt;!--22--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--23--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-right-num_3FteC toplist1-td_3zMd4<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">line-height</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span>2px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>426万<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-tr_4kE4D<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-td_3zMd4 opr-toplist1-link_2YUtD<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-hot_2RbQT c-index-single toplist1-hot-normal_12THH <span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">opacity</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_blank<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>微信试行松绑外链<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/s?tn=88093251_10_hao_pg<span class="token entity named-entity" title="&amp;">&amp;amp;</span>wd=%E5%BE%AE%E4%BF%A1%E8%AF%95%E8%A1%8C%E6%9D%BE%E7%BB%91%E5%A4%96%E9%93%BE<span class="token entity named-entity" title="&amp;">&amp;amp;</span>usm=5<span class="token entity named-entity" title="&amp;">&amp;amp;</span>ie=utf-8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_pq=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>oq=baidu<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_t=2f13%2FChA15s%2Bpcr%2BTHV6ICPZUtJTBqt%2Bg7qa%2Fe3MkDNJGNr7CYeRnPGiGu2P1c36vhJUGElbuGqn<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rqid=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsf=633b61ff30c35de3a95a3c1d295d44ff_1_10_9<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_dl=0_right_fyb_pchot_20811<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c-font-medium c-color-t opr-toplist1-subtitle_3FULy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>微信试行松绑外链<span class="token comment">&lt;!--24--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--25--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-right-num_3FteC toplist1-td_3zMd4<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">line-height</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span>2px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>412万<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-tr_4kE4D<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-td_3zMd4 opr-toplist1-link_2YUtD<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-hot_2RbQT c-index-single toplist1-hot-normal_12THH opr-toplist1-one-font_3t8Qt<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">opacity</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_blank<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>外交部针对奥密克戎进行回应<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/s?tn=88093251_10_hao_pg<span class="token entity named-entity" title="&amp;">&amp;amp;</span>wd=%E5%A4%96%E4%BA%A4%E9%83%A8%E9%92%88%E5%AF%B9%E5%A5%A5%E5%AF%86%E5%85%8B%E6%88%8E%E8%BF%9B%E8%A1%8C%E5%9B%9E%E5%BA%94<span class="token entity named-entity" title="&amp;">&amp;amp;</span>usm=5<span class="token entity named-entity" title="&amp;">&amp;amp;</span>ie=utf-8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_pq=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>oq=baidu<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_t=2f13%2FChA15s%2Bpcr%2BTHV6ICPZUtJTBqt%2Bg7qa%2Fe3MkDNJGNr7CYeRnPGiGu2P1c36vhJUGElbuGqn<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rqid=e70b81680001c594<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsf=633b61ff30c35de3a95a3c1d295d44ff_1_10_10<span class="token entity named-entity" title="&amp;">&amp;amp;</span>rsv_dl=0_right_fyb_pchot_20811<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c-font-medium c-color-t opr-toplist1-subtitle_3FULy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>外交部针对奥密克戎进行回应<span class="token comment">&lt;!--26--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--27--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toplist1-right-num_3FteC toplist1-td_3zMd4<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">line-height</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span>2px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>401万<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--7--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>开始使用正则进行匹配：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//创建一个匹配器</span>
<span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;a target=\\&quot;_blank\\&quot; title=\\&quot;(\\\\S*)\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建一个匹配其对象</span>
<span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//开始循环匹配</span>
<span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//匹配内容，这里内容会被放到matcher.group(1) 原理之后说</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;找到热榜第&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;的是:&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，依旧完美的成功跑起来了</p><p>经过上面的案例，不难看出，正则表达式是处理文本的最佳选择，无论在什么情况下都是</p><p>接下来再提出一个需求：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>1998年12月8日，第二代Java平台的企业版J2EE发布。1999年6月，Sun公司发布了第二代Java平台（简称为Java2）的3个版本：J2ME（Java2 Micro Edition，Java2平台的微型版），应用于移动、无线及有限资源的环境；J2SE（Java 2 Standard Edition，Java 2平台的标准版），应用于桌面环境；J2EE（Java 2Enterprise Edition，Java 2平台的企业版），应用3443于基于Java的应用服务器。Java 2平台的发布，是Java发展过程中最重要的一个里程碑，标志着Java的应用开始普及9889。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>找出所有四个数字连在一起的字串</li><li>找出所有四个数字连接在一起的字串，并且这四个数字要满足：第一位与第四位相同，第二位与第三位相同，比如：1221,5775</li><li>写一个控制台程序，要求用户输入邮箱，并验证是否符合邮箱格式(xxxxx@xx.xx)</li><li>验证用户输入的手机号是否符合手机号格式(19919991999)</li></ol><p>​ 为了解决上述的问题，Java提供了正则表达式技术，专门用于处理类似文本问题（当然，所有语言中都有这个功能，不过就个人感知来说，Java的正则表达式算是比较难用的那一类--没有\`\`符，需要对转义符\\进行二次转义）</p><p>​ 简单来说，<strong>正则表达式是对字符串执行模式匹配的技术</strong></p><p>​ 正则表达式全称：regualr expression 简称 <strong>RegExp</strong></p><p>​ 所有语言中都含有正则表达式（特别垃圾的才没有），语法基本上都大同小异，学完一个其他的也就都会了，这玩意是所有程序员必备技能，面试不会问但是实际工作中（比如爬虫。全文搜索等功能）都要用到它</p><h2 id="正则表达式的底层实现" tabindex="-1"><a class="header-anchor" href="#正则表达式的底层实现" aria-hidden="true">#</a> 正则表达式的底层实现</h2><p>案例：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>1998年12月8日，第二代Java平台的企业版J2EE发布。1999年6月，Sun公司发布了第二代Java平台（简称为Java2）的3个版本：J2ME（Java2 Micro Edition，Java2平台的微型版），应用于移动、无线及有限资源的环境；J2SE（Java 2 Standard Edition，Java 2平台的标准版），应用于桌面环境；J2EE（Java 2Enterprise Edition，Java 2平台的企业版），应用3443于基于Java的应用服务器。Java 2平台的发布，是Java发展过程中最重要的一个里程碑，标志着Java的应用开始普及9889。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>找出所有四个数字连在一起的字串：应该找到1998 1999 3443 9889</p><p>上代码<code>RegTheory.java</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> conecnt <span class="token operator">=</span> <span class="token string">&quot;1998年12月8日，第二代Java平台的企业版J2EE发布。1999年6月，Sun公司发布了第二代Java平台（简称为Java2）的3个版本：J2ME（Java2 Micro Edition，Java2平台的微型版），应用于移动、无线及有限资源的环境；J2SE（Java 2 Standard Edition，Java 2平台的标准版），应用于桌面环境；J2EE（Java 2Enterprise Edition，Java 2平台的企业版），应用3443于基于Java的应用服务器。Java 2平台的发布，是Java发展过程中最重要的一个里程碑，标志着Java的应用开始普及9889。&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//        目标：匹配所有四个数字</span>
    <span class="token comment">//        \\\\d表示一个任意的数字</span>
    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;\\\\d{4}&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//        全写，上方是简写</span>
    <span class="token class-name">String</span> regStr <span class="token operator">=</span> <span class="token string">&quot;\\\\d\\\\d\\\\d\\\\d&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//        创建一个正则表达式对象</span>
    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        创建一个匹配器，按照上方正则表达式的规则， 去匹配content字符串</span>
    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>conecnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        开始匹配 循环的匹配</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;result：&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="find方法和group-0-的源码分析" tabindex="-1"><a class="header-anchor" href="#find方法和group-0-的源码分析" aria-hidden="true">#</a> find方法和group(0)的源码分析</h3><p><code>matcher.find()</code>完成的任务</p><ol><li><p>根据指定的规则，定位满足规则的子字符串</p><ul><li>比如<code>世界你好1999阿啊啊</code>中，匹配四个数字，则找1和最后一个9的位置，分别为,4和7(从0开始索引)</li></ul></li><li><p>找到后，将<strong>子字符串</strong>开始的索引(4)记录到<code>mathcer</code>对象的属性 <code>int groups[]</code>当中</p><ol><li><code>groups[0]=4</code></li><li>并把该子字符串的结束的<strong>索引(7)+1</strong>的值记录到<code>groups[1]=7+1</code></li></ol></li><li><p>同时记录：</p><ol><li>初始值4到<code>int first</code>中：<code>first=4</code></li></ol></li><li><p>结束的索引+1记录到<code>int last</code>和<code>int oldLast</code>中7+1，即：下次开始找的时候，从7+1这个位置开始进行匹配(下次执行<code>find()</code>方法中从8开始匹配)</p><ul><li></li></ul></li></ol><p><code>matcher.group(0)</code>完成的任务</p><p>先看源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">int</span> group<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;No match found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>group <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> group <span class="token operator">&gt;</span> <span class="token function">groupCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">&quot;No group &quot;</span> <span class="token operator">+</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>groups<span class="token punctuation">[</span>group<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>groups<span class="token punctuation">[</span>group<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// 当我们执行group(0)的时候，可以看到不满足前面的条件，因此执行下面的这些代码</span>
    <span class="token comment">// 他这里传入了两个值，一个是group*2=0 也就是groups[0]</span>
    <span class="token comment">//第二个是group*2+1=1 也就是groups[1]</span>
    <span class="token comment">// groups中这两个位置的值可以通过之前的代码了解到，分别是4和8</span>
    <span class="token comment">// 根据字符串的截取原则(截前不截后,subString()的规则)</span>
    <span class="token comment">// 可以得知，最终截取的结果为索引4~7之间的字符串</span>
    <span class="token comment">// 所以返回的就是4,5,6,7这四个索引位置的字符</span>
    <span class="token keyword">return</span> <span class="token function">getSubSequence</span><span class="token punctuation">(</span>groups<span class="token punctuation">[</span>group <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> groups<span class="token punctuation">[</span>group <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在分组情况下的源码分析" tabindex="-1"><a class="header-anchor" href="#在分组情况下的源码分析" aria-hidden="true">#</a> 在分组情况下的源码分析</h3><p>分组就是当我查找4个连在一起的数字，但是又想把它们的前两个和后两个分开来：</p><p><code>(\\\\d\\\\d)(\\\\d\\\\d)</code></p><p>就需要这样，比如1998，最终得出的结果为:[1998],[19],[98] 也就是有三个结果，三组内容</p><p>理论来说，分组的数量为括号数量+1</p><p>第一个小括号是第一组 19，第二个小括号是第二组 98，第0组为匹配这些内容的值：1998</p><p>接下来开始分析，测试内容为<code>1998年12月8日，第二代Java平台的企业版J2EE发布。......</code></p><p>首先进行<code>matcher.find()</code></p><ol><li>根据规则匹配<code>(\\\\d\\\\d)(\\\\d\\\\d)</code><ol><li>首先找到的子字符串是1998</li><li>然后记录索引位置，分别是<code>groups[0]=0,groups[1]=4</code></li><li>记录第一组<code>()</code>匹配到的字符串的开始索引位置记录到<code>groups[2]=?</code>，结束的索引位置记录到<code>groups[3]=?+1</code><ul><li><code>groups[2]=0</code></li><li><code>groups[3]=2</code></li></ul></li><li>第二组<code>()</code>原理同上，分别记录到<code>groups[4]=2</code>，<code>groups[5]=4</code></li><li>如果还有更多括号的以此类推</li></ol></li><li>并同时记录<code>oldLast</code>的值为该子字符串传的结束位置+1<code>oldLast=4</code></li></ol><figure><img src="`+k+'" alt="image-20211130122015863" tabindex="0" loading="lazy"><figcaption>image-20211130122015863</figcaption></figure><p>接下来看看他们是怎么截取的</p><p>在<code>matcher.group(int group )</code>中，可以看到最后return的值为：</p><p><code>getSubSequence(groups[group * 2], groups[group * 2 + 1])</code></p><p>也就是说，如果是第0组，结果为：0,1</p><p>第一组的话，结果为：2,3</p><p>第二组的话，结果为：4,5</p><p>完美对应了上一步存放的位置</p><p>啊，真是精妙的设计..接下来看看结果：</p><figure><img src="'+r+`" alt="image-20211130122524760" tabindex="0" loading="lazy"><figcaption>image-20211130122524760</figcaption></figure><p>代码片段</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> regStr <span class="token operator">=</span> <span class="token string">&quot;(\\\\d\\\\d)(\\\\d\\\\d)&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//        创建一个正则表达式对象</span>
<span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        创建一个匹配器，按照上方正则表达式的规则， 去匹配content字符串</span>
<span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>conecnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        开始匹配 循环的匹配</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;result：&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;匹配到的第一组：&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;匹配到的第二组：&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p><ul><li>group(0)表示匹配到的整体的子字符串</li><li>group(n)表示匹配到的子字符串的第n组字串</li></ul><p>​ 如果说n的数量大于括号的数量，如，只有两个括号，但是group(3)，就可以根据前面的规则发现，group(3)中对应的初始索引位置<code>groups[5]</code>和<code>groups[6]</code>分别都是-1，字符串中截取-1的值，直接抛出<strong>下标越界异常</strong></p><p>​ 所以分组不能越界</p><h2 id="正则表达式语法" tabindex="-1"><a class="header-anchor" href="#正则表达式语法" aria-hidden="true">#</a> 正则表达式语法</h2><p>​ 如果想要灵活的运用正则表达式，必须了解其中的各种语法，元字符从功能上大概分为：</p><ol><li>限定符</li><li>选择匹配符</li><li>分组组合和反向引用符</li><li>特殊字符</li><li>字符匹配符</li><li>定位符</li></ol><h3 id="元字符-转义号及常用匹配符" tabindex="-1"><a class="header-anchor" href="#元字符-转义号及常用匹配符" aria-hidden="true">#</a> 元字符-转义号及常用匹配符</h3><p><code>\\\\</code>符号 说明：当我们使用正则表达式去检索某些<strong>特殊字符</strong>的时候，需要用到转义符，否则检索不到结果，甚至会报错，比如说我们现在有一个字符串：<code>abc$(</code>，相匹配其中的<code>abc$</code>现在试图直接匹配下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;abc$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到，什么都没有匹配到</p><p>现在尝试加上转义符<code>\\\\</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;abc\\\\$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>成功的匹配出了结果：<code>result：abc$</code></p><p>额外提醒：<strong>Java的正则表达式中，两个<code>\\\\</code>代表其他语言中的一个<code>\\</code>(正则匹配这方面做的不是很好)</strong></p><p>需要用到转移符号的字符有以下：</p><p><code>. * + ( ) $ / \\ ?[ ] ^ { } -</code></p><ul><li><p><code>.</code> 表示匹配所有字符</p></li><li><p><code>[]</code> 表示可接收的字符串：<br> 例如：我想要匹配efgh中的任意一个字符，则需要：<br><code>[efgh]</code> 匹配e、f、g、h中的任意一个字符</p></li><li><p>[^]表示不接受的字符串<br> 例如：<code>[^abc]</code>表示除了a、b、c以外的任意一个字符，包括数字和特殊符号</p></li><li></li></ul><h2 id="正则表达式-元字符-字符匹配符" tabindex="-1"><a class="header-anchor" href="#正则表达式-元字符-字符匹配符" aria-hidden="true">#</a> 正则表达式-元字符-字符匹配符</h2>`,81),h=n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"符号"),n("th",{style:{"text-align":"left"}},"作用"),n("th",{style:{"text-align":"center"}},"实例"),n("th",null,"解释"),n("th",null,"匹配输入")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"center"}},"[]"),n("td",{style:{"text-align":"left"}},"表示可接收的字符列表"),n("td",{style:{"text-align":"center"}},"[efgh]"),n("td",null,[a("匹配e、f、g、h"),n("br"),a("中的任意一个字符")]),n("td",null,"e、f")]),n("tr",null,[n("td",{style:{"text-align":"center"}},"[^]"),n("td",{style:{"text-align":"left"}},"表示不接受的字符列表"),n("td",{style:{"text-align":"center"}},"[^abc]"),n("td",null,[a("表示"),n("strong",null,"除了"),a("a、b、c以外的"),n("br"),a("任意一个字符"),n("br"),a("包括数字和特殊符号")]),n("td",null,"a、b")]),n("tr",null,[n("td",{style:{"text-align":"center"}},"-"),n("td",{style:{"text-align":"left"}},"连字符，一般在[]内使用"),n("td",{style:{"text-align":"center"}},"A-Z"),n("td",null,"任意单个大写字母"),n("td",null,"A、Y")]),n("tr",null,[n("td",{style:{"text-align":"center"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"center"}},"0-9"),n("td",null,"任意单个数字"),n("td",null,"0、8")]),n("tr",null,[n("td",{style:{"text-align":"center"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"center"}},"a-z"),n("td",null,"任意单个小写字母"),n("td",null,"a、y")]),n("tr",null,[n("td",{style:{"text-align":"center"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"center"},2:""},"[^a-z]"),n("td",null,[a("匹配两个不是小写a~z之间的"),n("br"),a("任意字符")]),n("td",null,"BD、AZ")]),n("tr",null,[n("td",{style:{"text-align":"center"}},"."),n("td",{style:{"text-align":"left"}},[a("匹配除"),n("code",null,"\\n"),a("以外的任何字符")]),n("td",{style:{"text-align":"center"}},"a..b"),n("td",null,[a("以a开头，b结尾"),n("br"),a("中间包括2个任意字符的"),n("br"),a("长度为4的字符串")]),n("td",null,[a("aaab 、"),n("br"),a("aefb")])]),n("tr",null,[n("td",{style:{"text-align":"center"}},[n("code",null,"\\\\d")]),n("td",{style:{"text-align":"left"}},[a("匹配单个数字字符"),n("br"),a("相当于"),n("code",null,"[0-9]")]),n("td",{style:{"text-align":"center"}},[n("code",null,"\\\\d{3}(\\\\d)?")]),n("td",null,"包含三个或四个数字的字符串"),n("td",null,"123、9876")]),n("tr",null,[n("td",{style:{"text-align":"center"}},[n("code",null,"\\\\D")]),n("td",{style:{"text-align":"left"}},[a("匹配"),n("strong",null,"非"),a("单个数字字符"),n("br"),a("相当于"),n("code",null,"[^0-9]")]),n("td",{style:{"text-align":"center"}},[n("code",null,"\\\\D(\\\\d)*")]),n("td",null,[a("以单个非数字字符开头，后"),n("br"),a("后面接任意个数字字符串")]),n("td",null,"a、A315")]),n("tr",null,[n("td",{style:{"text-align":"center"}},[n("code",null,"\\\\w")]),n("td",{style:{"text-align":"left"}},[a("匹配单个数字，大小写字母"),n("br"),a("相当于"),n("code",null,"[0-9A-Za-z]")]),n("td",{style:{"text-align":"center"}},[n("code",null,"\\\\d{3}\\\\w{4}")]),n("td",null,[a("以三个数字字符开头"),n("br"),a("长度为7的数字字母字符串")]),n("td",null,[a("234abcd、"),n("br"),a("12345Pe")])]),n("tr",null,[n("td",{style:{"text-align":"center"}},[n("code",null,"\\\\W")]),n("td",{style:{"text-align":"left"}},[a("匹配"),n("strong",null,"非"),a("单个数字，大小写字母"),n("br"),a("相当于"),n("code",null,"[^0-9A-Za-z]")]),n("td",{style:{"text-align":"center"}},[n("code",null,"\\\\W+\\\\d{2}")]),n("td",null,[a("至少以一个非数字字母字符开头"),n("br"),a("2个数字字符结尾的字符串")]),n("td",null,"#29、#?@10")]),n("tr",null,[n("td",{style:{"text-align":"center"}},"(?i)"),n("td",{style:{"text-align":"left"}},"让大小写不敏感"),n("td",{style:{"text-align":"center"}},[n("code",null,"(?i)abc")]),n("td",null,"让abc都不区分大小写"),n("td",null,"Abc、ABc、aBC")]),n("tr",null,[n("td",{style:{"text-align":"center"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"center"}},[n("code",null,"a(?i)bc")]),n("td",null,"表示bc不区分大小写"),n("td",null,"aBC、acC")]),n("tr",null,[n("td",{style:{"text-align":"center"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"center"}},[n("code",null,"a((?i)b)c")]),n("td",null,"表示只有b不区分大小写"),n("td",null,"aBc、abc")]),n("tr",null,[n("td",{style:{"text-align":"center"}}),n("td",{style:{"text-align":"left"}},[a("Parrtern.compile(RegExP,"),n("br"),a("Pattern.CASE_INSENSITIVE)"),n("br"),a("等同于"),n("code",null,"(?i)abc")]),n("td",{style:{"text-align":"center"}}),n("td",null,[a("仅在Java中有效"),n("br"),a("让其不区分大小写"),n("br"),a("在其他语言中基本是"),n("br"),n("code",null,"/abc/i"),a("类似于这样")]),n("td")])])],-1),f=s('<h2 id="元字符-选择匹配符" tabindex="-1"><a class="header-anchor" href="#元字符-选择匹配符" aria-hidden="true">#</a> 元字符-选择匹配符</h2><p>在匹配某个字符串的时候是选择性的，即：既可以匹配这个，又可以匹配那个，这时候需要用到选择匹配符</p><table><thead><tr><th style="text-align:center;">符号</th><th>作用</th><th style="text-align:center;">实例</th><th>解释</th><th>匹配输入</th></tr></thead><tbody><tr><td style="text-align:center;">|</td><td>匹配&quot;|&quot;之前或之后的表达式</td><td style="text-align:center;">`ab</td><td>cd`</td><td>ab或者cd</td></tr><tr><td style="text-align:center;"></td><td></td><td style="text-align:center;">`[a-z]</td><td>[A-Z]`</td><td>A-z中的任意单个字符</td></tr><tr><td style="text-align:center;"></td><td></td><td style="text-align:center;">`川流</td><td>不</td><td>息`</td></tr></tbody></table><h2 id="元字符-限定符" tabindex="-1"><a class="header-anchor" href="#元字符-限定符" aria-hidden="true">#</a> 元字符-限定符</h2>',4),x=n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"符号"),n("th",null,"作用"),n("th",{style:{"text-align":"center"}},"实例"),n("th",null,"解释"),n("th",null,"匹配输入")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"center"}},"*"),n("td",null,[a("指定字符重复0次或者n次（无要求）"),n("br"),a("零到多次")]),n("td",{style:{"text-align":"center"}},[n("code",null,"(abc)*")]),n("td",null,[a("仅包含任意个abc的字符串"),n("br"),a("等效于"),n("code",null,"\\w*")]),n("td",null,[a("abc"),n("br"),a("abcabcabc")])]),n("tr",null,[n("td",{style:{"text-align":"center"}},"+"),n("td",null,[a("指定字符串重复一次或n次（字少一次）"),n("br"),a("1到多")]),n("td",{style:{"text-align":"center"}},[n("code",null,"m+(abc)*")]),n("td",null,"至少以1个m开头，后面接任意个abc的字符串"),n("td",null,[a("m"),n("br"),a("mabc"),n("br"),a("mabcabc")])]),n("tr",null,[n("td",{style:{"text-align":"center"}},"?"),n("td",null,[a("指定字符重复0次或者1一次"),n("br"),a("最多一次")]),n("td",{style:{"text-align":"center"}},[n("code",null,"m+abc?")]),n("td",null,[a("至少以一个m开头，后接ab或者abc的字符串"),n("br"),a("(c可以没有)，但是ab一定要有"),n("br"),a("如果abc加了括号包裹，abc也可以没有")]),n("td",null,[a("mab"),n("br"),a("mabc")])]),n("tr",null,[n("td",{style:{"text-align":"center"},n:""}),n("td",null,"指定至少n个匹配"),n("td",{style:{"text-align":"center"}},[n("code",null,"[abcd]{3}")]),n("td",null,"由abcd中字母组成的任意长度为3的字符串"),n("td",null,[a("abc"),n("br"),a("abd"),n("br"),a("bdc")])]),n("tr",null,[n("td",{style:{"text-align":"center"},"n,m":""}),n("td",null,"指定至少n个但不多于m个匹配"),n("td",{style:{"text-align":"center"}},[n("code",null,"[abcd]{3,5}")]),n("td",null,[a("abcd中字母组成的任意长度"),n("br"),a("不小于3且不大于5的字符")]),n("td",null,[a("abc"),n("br"),a("abcd"),n("br"),a("abcda")])])])],-1),E=s(`<h2 id="元字符-定位符" tabindex="-1"><a class="header-anchor" href="#元字符-定位符" aria-hidden="true">#</a> 元字符-定位符</h2><table><thead><tr><th style="text-align:center;">符号</th><th>作用</th><th style="text-align:center;">实例</th><th>解释</th><th>匹配输入</th></tr></thead><tbody><tr><td style="text-align:center;">^</td><td>指定起始字符</td><td style="text-align:center;"><code>^[0-9]+[a-z]*</code></td><td>至少以一个数字开头<br>后接任意个小写字符串</td><td>1aaaa<br>6vnf</td></tr><tr><td style="text-align:center;">$</td><td>指定结束字符</td><td style="text-align:center;"><code>^[0-9]+\\\\-[a-z]+$</code></td><td>至少以一个数字开头<br>后连接<code>-</code>符，并以至少一个小写<br>字母结束字符</td><td>1-a<br>6-z<br>61111-zqqqqq</td></tr><tr><td style="text-align:center;"><code>\\\\b</code></td><td>匹配目标字符串<br>的边界</td><td style="text-align:center;"><code>run\\\\b</code></td><td>这里说的字符串边界指的是<br>字符串间有空格<br>或者是目标字符串的结束位置</td><td>runI want <strong>run</strong> <strong>run</strong> <strong>run</strong></td></tr><tr><td style="text-align:center;"><code>\\\\B</code></td><td>匹配目标字符串<br>的<strong>非边界</strong></td><td style="text-align:center;"><code>run\\\\b</code></td><td>和<code>\\\\b</code>的含义相反</td><td><strong>run</strong>I want run run run</td></tr></tbody></table><h2 id="分组和捕获" tabindex="-1"><a class="header-anchor" href="#分组和捕获" aria-hidden="true">#</a> 分组和捕获</h2><table><thead><tr><th>常用分组构造形式</th><th>说明</th></tr></thead><tbody><tr><td><code>(pattern)</code></td><td>非命名捕获。<br>捕获匹配的子字符串，编号为0的第一个捕获是由整个正则表达式模式匹配的文本<br>其他捕获的结果则<strong>根据左括号的顺序从1开始自动编号</strong></td></tr><tr><td><code>(?&lt;name&gt;pattern)</code></td><td>命名捕获。<br>将匹配到的子字符串捕获到一个组名或编号中。<br>用于name的字符串不能包含任何标点符号，并且不能以数字开头<br>可以使用单引号代替尖括号，如：<code>?&#39;name&#39;</code></td></tr></tbody></table><p>非命名捕获<code>(\\\\d)(\\\\d)(\\\\d\\\\d)</code>就是这样的格式，这里不多写了，之前已经写了一大截</p><p>命名捕获：使用起来就是这样，也就是说可以在使用的时候通过分组名更方便的获取想要的分组</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRunByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> connect <span class="token operator">=</span> <span class="token string">&quot;1234 5678&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> regExp <span class="token operator">=</span> <span class="token string">&quot;(?&lt;g1&gt;\\\\d\\\\d)(?&lt;g2&gt;\\\\d\\\\d)&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regExp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>connect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;找到的内容：&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;分组1：&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;分组1【通过组名】：&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">&quot;g1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;分组2：&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;分组2【通过组名】：&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">&quot;g2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
结果：
    
找到的内容：<span class="token number">1234</span>
分组<span class="token number">1</span>：<span class="token number">12</span>
分组<span class="token number">1</span>【通过组名】：<span class="token number">12</span>
分组<span class="token number">2</span>：<span class="token number">34</span>
分组<span class="token number">2</span>【通过组名】：<span class="token number">34</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="几个常用的分组形式-非捕获匹配" tabindex="-1"><a class="header-anchor" href="#几个常用的分组形式-非捕获匹配" aria-hidden="true">#</a> 几个常用的分组形式-非捕获匹配</h2><table><thead><tr><th style="text-align:center;">常用分组构造形式</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">(?:pattern)</td><td style="text-align:left;">匹配pattern但不捕获该匹配的子表达式，即：它是一个非捕获匹配，不存储以后使用的匹配。<br>这对于用<code>or</code>字符(\`</td></tr><tr><td style="text-align:center;">(?=pattern)</td><td style="text-align:left;">它是一个非捕获匹配。<br>例如：\`Windows(?=95</td></tr><tr><td style="text-align:center;">(?!pattern)</td><td style="text-align:left;">该表达式匹配不处于匹配<code>pattern</code>字符串的起始点的搜索字符串。<br>他是一个非捕获匹配。<br>例如：\`Windows(?!95</td></tr></tbody></table><p>演示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRegF</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;吃葡萄不吐葡萄皮 不吃葡萄不洗葡萄汁&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//      1.  要求：找到葡萄、葡萄皮、葡萄汁的子字符串</span>
    <span class="token class-name">String</span> regExp <span class="token operator">=</span> <span class="token string">&quot;葡萄(?:皮|汁)&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regExp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;找到的内容1：&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//      2.  要求：找到葡萄皮 葡萄汁但是不包含汁和皮</span>
    <span class="token class-name">String</span> regExp2 <span class="token operator">=</span> <span class="token string">&quot;葡萄(?=汁|皮)&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">Pattern</span> pattern2 <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regExp2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Matcher</span> matcher2 <span class="token operator">=</span> pattern2<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher2<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;找到的内容2：&quot;</span> <span class="token operator">+</span> matcher2<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//       3. 要求：找到葡萄 但是不能是葡萄皮 葡萄汁中有的葡萄</span>
    <span class="token class-name">String</span> regExp3 <span class="token operator">=</span> <span class="token string">&quot;葡萄(?!皮|汁)&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">Pattern</span> pattern3 <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regExp3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Matcher</span> matcher3 <span class="token operator">=</span> pattern3<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher3<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;找到的内容3：&quot;</span> <span class="token operator">+</span> matcher3<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="正则表达式一览表-全" tabindex="-1"><a class="header-anchor" href="#正则表达式一览表-全" aria-hidden="true">#</a> 正则表达式一览表（全）</h2><table><thead><tr><th style="text-align:left;">字符</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">\\</td><td style="text-align:left;">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如， <strong>n</strong>匹配字符 <strong>n</strong>。<strong>\\n</strong> 匹配换行符。序列 <strong>\\\\</strong> 匹配 <strong>\\</strong> ，<strong>\\(</strong> 匹配 <strong>(</strong>。</td></tr><tr><td style="text-align:left;">^</td><td style="text-align:left;">匹配输入字符串开始的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，^ 还会与&quot;\\n&quot;或&quot;\\r&quot;之后的位置匹配。</td></tr><tr><td style="text-align:left;">$</td><td style="text-align:left;">匹配输入字符串结尾的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，$ 还会与&quot;\\n&quot;或&quot;\\r&quot;之前的位置匹配。</td></tr><tr><td style="text-align:left;">*</td><td style="text-align:left;">零次或多次匹配前面的字符或子表达式。例如，zo* 匹配&quot;z&quot;和&quot;zoo&quot;。* 等效于 {0,}。</td></tr><tr><td style="text-align:left;">+</td><td style="text-align:left;">一次或多次匹配前面的字符或子表达式。例如，&quot;zo+&quot;与&quot;zo&quot;和&quot;zoo&quot;匹配，但与&quot;z&quot;不匹配。+ 等效于 {1,}。</td></tr><tr><td style="text-align:left;">?</td><td style="text-align:left;">零次或一次匹配前面的字符或子表达式。例如，&quot;do(es)?&quot;匹配&quot;do&quot;或&quot;does&quot;中的&quot;do&quot;。? 等效于 {0,1}。</td></tr><tr><td style="text-align:left;">{<em>n</em>}</td><td style="text-align:left;"><em>n</em> 是非负整数。正好匹配 <em>n</em> 次。例如，&quot;o{2}&quot;与&quot;Bob&quot;中的&quot;o&quot;不匹配，但与&quot;food&quot;中的两个&quot;o&quot;匹配。</td></tr><tr><td style="text-align:left;">{<em>n</em>,}</td><td style="text-align:left;"><em>n</em> 是非负整数。至少匹配 <em>n</em> 次。例如，&quot;o{2,}&quot;不匹配&quot;Bob&quot;中的&quot;o&quot;，而匹配&quot;foooood&quot;中的所有 o。&quot;o{1,}&quot;等效于&quot;o+&quot;。&quot;o{0,}&quot;等效于&quot;o*&quot;。</td></tr><tr><td style="text-align:left;">{<em>n</em>,<em>m</em>}</td><td style="text-align:left;"><em>m</em> 和 <em>n</em> 是非负整数，其中 <em>n</em> &lt;= <em>m</em>。匹配至少 <em>n</em> 次，至多 <em>m</em> 次。例如，&quot;o{1,3}&quot;匹配&quot;fooooood&quot;中的头三个 o。&#39;o{0,1}&#39; 等效于 &#39;o?&#39;。注意：您不能将空格插入逗号和数字之间。</td></tr><tr><td style="text-align:left;">?</td><td style="text-align:left;">当此字符紧随任何其他限定符（*、+、?、{<em>n</em>}、{<em>n</em>,}、{<em>n</em>,<em>m</em>}）之后时，匹配模式是&quot;非贪心的&quot;。<br><strong>&quot;非贪心的&quot;模式匹配搜索到的、尽可能短的字符串</strong>，而默认的&quot;贪心的&quot;模式匹配搜索到的、尽可能长的字符串。例如，在字符串&quot;oooo&quot;中，&quot;o+?&quot;只匹配单个&quot;o&quot;，而&quot;o+&quot;匹配所有&quot;o&quot;。</td></tr><tr><td style="text-align:left;">.</td><td style="text-align:left;">匹配除&quot;\\r\\n&quot;之外的任何单个字符。若要匹配包括&quot;\\r\\n&quot;在内的任意字符，请使用诸如&quot;[\\s\\S]&quot;之类的模式。</td></tr><tr><td style="text-align:left;">(<em>pattern</em>)</td><td style="text-align:left;">匹配 <em>pattern</em> 并捕获该匹配的子表达式。可以使用 <strong>$0…$9</strong> 属性从结果&quot;匹配&quot;集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用&quot;(&quot;或者&quot;)&quot;。</td></tr><tr><td style="text-align:left;">(?:<em>pattern</em>)</td><td style="text-align:left;">匹配 <em>pattern</em> 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用&quot;or&quot;字符 (|) 组合模式部件的情况很有用。例如，&#39;industr(?:y|ies) 是比 &#39;industry|industries&#39; 更经济的表达式。</td></tr><tr><td style="text-align:left;">(?=<em>pattern</em>)</td><td style="text-align:left;">执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 <em>pattern</em> 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，&#39;Windows (?=95|98|NT|2000)&#39; 匹配&quot;Windows 2000&quot;中的&quot;Windows&quot;，但不匹配&quot;Windows 3.1&quot;中的&quot;Windows&quot;。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td></tr><tr><td style="text-align:left;">(?!<em>pattern</em>)</td><td style="text-align:left;">执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 <em>pattern</em> 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，&#39;Windows (?!95|98|NT|2000)&#39; 匹配&quot;Windows 3.1&quot;中的 &quot;Windows&quot;，但不匹配&quot;Windows 2000&quot;中的&quot;Windows&quot;。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td></tr><tr><td style="text-align:left;"><em>x</em>|<em>y</em></td><td style="text-align:left;">匹配 <em>x</em> 或 <em>y</em>。例如，&#39;z|food&#39; 匹配&quot;z&quot;或&quot;food&quot;。&#39;(z|f)ood&#39; 匹配&quot;zood&quot;或&quot;food&quot;。</td></tr><tr><td style="text-align:left;">[<em>xyz</em>]</td><td style="text-align:left;">字符集。匹配包含的任一字符。例如，&quot;[abc]&quot;匹配&quot;plain&quot;中的&quot;a&quot;。</td></tr><tr><td style="text-align:left;">[^<em>xyz</em>]</td><td style="text-align:left;">反向字符集。匹配未包含的任何字符。例如，<code>[^abc]</code>匹配&quot;plain&quot;中&quot;p&quot;，&quot;l&quot;，&quot;i&quot;，&quot;n&quot;。</td></tr><tr><td style="text-align:left;">[<em>a-z</em>]</td><td style="text-align:left;">字符范围。匹配指定范围内的任何字符。例如，&quot;[a-z]&quot;匹配&quot;a&quot;到&quot;z&quot;范围内的任何小写字母。</td></tr><tr><td style="text-align:left;">[^<em>a-z</em>]</td><td style="text-align:left;">反向范围字符。匹配不在指定的范围内的任何字符。例如，<code>[^a-z]</code>匹配任何不在&quot;a&quot;到&quot;z&quot;范围内的任何字符。</td></tr><tr><td style="text-align:left;">[?=&amp;/%#.]</td><td style="text-align:left;">可以通过中括号来匹配任意的符号：比如 - ? = % . 这些字符有的在其他情况下是作为一个特殊的符号来使用的，比如 . 在其他情况下是通配符<br>常见的如下：<code>@\`\`#$%^&amp;*()_\\-+=&lt;&gt;?:&quot;{}</code></td></tr><tr><td style="text-align:left;">\\b</td><td style="text-align:left;">匹配一个字边界，即字与空格间的位置。例如，&quot;er\\b&quot;匹配&quot;never&quot;中的&quot;er&quot;，但不匹配&quot;verb&quot;中的&quot;er&quot;。</td></tr><tr><td style="text-align:left;">\\B</td><td style="text-align:left;">非字边界匹配。&quot;er\\B&quot;匹配&quot;verb&quot;中的&quot;er&quot;，但不匹配&quot;never&quot;中的&quot;er&quot;。</td></tr><tr><td style="text-align:left;">\\c<em>x</em></td><td style="text-align:left;">匹配 <em>x</em> 指示的控制字符。例如，\\cM 匹配 Control-M 或回车符。<em>x</em> 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是&quot;c&quot;字符本身。</td></tr><tr><td style="text-align:left;">\\d</td><td style="text-align:left;">数字字符匹配。等效于 [0-9]。</td></tr><tr><td style="text-align:left;">\\D</td><td style="text-align:left;">非数字字符匹配。等效于 [^0-9]。</td></tr><tr><td style="text-align:left;">\\f</td><td style="text-align:left;">换页符匹配。等效于 \\x0c 和 \\cL。</td></tr><tr><td style="text-align:left;">\\n</td><td style="text-align:left;">换行符匹配。等效于 \\x0a 和 \\cJ。</td></tr><tr><td style="text-align:left;">\\r</td><td style="text-align:left;">匹配一个回车符。等效于 \\x0d 和 \\cM。</td></tr><tr><td style="text-align:left;">\\s</td><td style="text-align:left;">匹配任何空白字符，包括空格、制表符、换页符等。与 [ \\f\\n\\r\\t\\v] 等效。</td></tr><tr><td style="text-align:left;">\\S</td><td style="text-align:left;">匹配任何非空白字符。与 [^ \\f\\n\\r\\t\\v] 等效。</td></tr><tr><td style="text-align:left;">\\t</td><td style="text-align:left;">制表符匹配。与 \\x09 和 \\cI 等效。</td></tr><tr><td style="text-align:left;">\\v</td><td style="text-align:left;">垂直制表符匹配。与 \\x0b 和 \\cK 等效。</td></tr><tr><td style="text-align:left;">\\w</td><td style="text-align:left;">匹配任何字类字符，包括下划线。与&quot;[A-Za-z0-9_]&quot;等效。</td></tr><tr><td style="text-align:left;">\\W</td><td style="text-align:left;">与任何非单词字符匹配。与<code>[^A-Za-z0-9_]</code>等效。</td></tr><tr><td style="text-align:left;">\\x<em>n</em></td><td style="text-align:left;">匹配 <em>n</em>，此处的 <em>n</em> 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，&quot;\\x41&quot;匹配&quot;A&quot;。&quot;\\x041&quot;与&quot;\\x04&quot;&amp;&quot;1&quot;等效。允许在正则表达式中使用 ASCII 代码。</td></tr><tr><td style="text-align:left;">\\*num*</td><td style="text-align:left;">匹配 \\*num*，此处的 \\*num* 是一个正整数。到捕获匹配的反向引用。例如，&quot;(.)\\1&quot;匹配两个连续的相同字符。</td></tr><tr><td style="text-align:left;">\\*n*</td><td style="text-align:left;">标识一个八进制转义码或反向引用。如果 \\*n* 前面至少有 <em>n</em> 个捕获子表达式，那么 <em>n</em> 是反向引用。否则，如果 <em>n</em> 是八进制数 (0-7)，那么 <em>n</em> 是八进制转义码。</td></tr><tr><td style="text-align:left;">\\*nm*</td><td style="text-align:left;">标识一个八进制转义码或反向引用。如果 \\*nm* 前面至少有 <em>nm</em> 个捕获子表达式，那么 <em>nm</em> 是反向引用。如果 *nm<em>前面至少有</em>n<em>个捕获，则</em>n<em>是反向引用，后面跟有字符</em>m*。如果两种前面的情况都不存在，则 \\*nm* 匹配八进制值 <em>nm</em>，其中 <em>n</em> 和 <em>m</em> 是八进制数字 (0-7)。</td></tr><tr><td style="text-align:left;">\\nml</td><td style="text-align:left;">当 <em>n</em> 是八进制数 (0-3)，<em>m</em> 和 <em>l</em> 是八进制数 (0-7) 时，匹配八进制转义码 <em>nml</em>。</td></tr><tr><td style="text-align:left;">\\u<em>n</em></td><td style="text-align:left;">匹配 <em>n</em>，其中 <em>n</em> 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 (©)。</td></tr></tbody></table><h3 id="补充-贪婪匹配和非贪婪匹配" tabindex="-1"><a class="header-anchor" href="#补充-贪婪匹配和非贪婪匹配" aria-hidden="true">#</a> 补充-贪婪匹配和非贪婪匹配</h3><p>一段代码说明白：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">regExpNoS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;hello111111 ok&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//默认是贪婪匹配</span>
    <span class="token class-name">String</span> regStr <span class="token operator">=</span> <span class="token string">&quot;\\\\d+&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//非贪婪匹配</span>
    regStr <span class="token operator">=</span> <span class="token string">&quot;\\\\d+?&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;找到：&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>贪婪匹配结果：111111</p><p>非贪婪匹配结果：</p><figure><img src="`+d+`" alt="image-20211130195455434" tabindex="0" loading="lazy"><figcaption>image-20211130195455434</figcaption></figure><h2 id="正则匹配实例" tabindex="-1"><a class="header-anchor" href="#正则匹配实例" aria-hidden="true">#</a> 正则匹配实例</h2><h3 id="匹配汉字" tabindex="-1"><a class="header-anchor" href="#匹配汉字" aria-hidden="true">#</a> 匹配汉字</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
    <span class="token doc-comment comment">/**
     * 验证是否是一个或者一段汉字
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">&quot;鱼跃此时海，花开彼岸天&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//        汉字的范围，\\u4E00-\\u9FA5  或者\\u0931-uffe5 可以匹配中间的符号之类的</span>
<span class="token comment">//        [\\\\u0391-\\\\uFFE5]匹配双字节字符（汉字+符号）</span>
        <span class="token class-name">String</span> regExp <span class="token operator">=</span> <span class="token string">&quot;^[\\\\u0391-\\\\uffe5]+$&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//        至少要有一个汉字，必须为汉字开头，汉字结尾</span>
        <span class="token class-name">Pattern</span> compile <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regExp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>compile<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;满足格式&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;不满足格式&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="邮政编码" tabindex="-1"><a class="header-anchor" href="#邮政编码" aria-hidden="true">#</a> 邮政编码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 邮政编码：1~9开头的一个六位数
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> regExp <span class="token operator">=</span> <span class="token string">&quot;^[1-9]\\\\d{5}$&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Pattern</span> compile <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regExp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>compile<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;满足格式&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;不满足格式&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="qq号码" tabindex="-1"><a class="header-anchor" href="#qq号码" aria-hidden="true">#</a> QQ号码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 验证是否是一个QQ号：1~9 开头，5~10位数
     */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">&quot;10001&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> regExp <span class="token operator">=</span> <span class="token string">&quot;^[1-9]\\\\d{4,9}$&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">Pattern</span> compile <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regExp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>compile<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;满足格式&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;不满足格式&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="手机号码" tabindex="-1"><a class="header-anchor" href="#手机号码" aria-hidden="true">#</a> 手机号码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 验证是否为一个手机号：
     * 必须是13 14 15 18 开头的11位数，比如1358889999
     */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">&quot;13919991999&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> regExp <span class="token operator">=</span> <span class="token string">&quot;^1(?:3|4|5|8)\\\\d{9}$&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">Pattern</span> compile <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regExp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>compile<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;满足格式&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;不满足格式&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="url链接" tabindex="-1"><a class="header-anchor" href="#url链接" aria-hidden="true">#</a> URL链接</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">&quot;https://www.bilibili.com/bangumi/play/ss1600/?from=search&amp;seid=8463112694218139397&amp;spm_id_from=333.337.0.0&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">/*
         * 1. 先确定开始的部分(http|https)://
         * 2. 主题的构成，可以是域名，也可以是IP地址 有. 可能有-_
         * 2.1 \\\\w匹配它 - 匹配 - \\\\. 匹配 . + 匹配一个到多个
         * 2.2 [\\w-]+ 表示匹配域名的结尾（结尾没有.）
         * 2.2.1  ((http|https)://)? 最后一个问号表示这个协议头可有可无 例如 www.google.com 或者 https://www.google.com 都是可以的
         * 2.3 至此 一个完整的域名验证完毕
         * 3.1  [.] 表示就是匹配一个.  ？同理
         * 3.2  (/[\\w-?=&amp;/%#.]*)?  这里匹配后段内容  -?=&amp;/%#. 是可能会出现的符号
         * */</span>
    <span class="token class-name">String</span> regExp <span class="token operator">=</span> <span class="token string">&quot;^((http|https)://)?([\\\\w-]+\\\\.)+[\\\\w-]+(/[\\\\w-?=&amp;/%#.]*)?$&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">Pattern</span> compile <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regExp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> compile<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;满足格式&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;不满足格式&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="邮箱" tabindex="-1"><a class="header-anchor" href="#邮箱" aria-hidden="true">#</a> 邮箱</h3><p>这个是瞎写的，真要用还是去网上抄即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 验证是否为一个邮箱
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">&quot;amayakite.x@gmail.com&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> regExp <span class="token operator">=</span> <span class="token string">&quot;^([\\\\w-.]+)@([\\\\w-.]+)\\\\.[\\\\w]+$&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Pattern</span> compile <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regExp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> compile<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;满足格式&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;不满足格式&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="正则表达式三个常用类" tabindex="-1"><a class="header-anchor" href="#正则表达式三个常用类" aria-hidden="true">#</a> 正则表达式三个常用类</h2><p><code>java.util.regex</code> 包主要包括如下三个类</p><ul><li><code>Pattern</code>类</li><li><code>Mathcer</code>类</li><li><code>PatternSyntaxExeception</code> 异常类</li></ul><h3 id="pattern类" tabindex="-1"><a class="header-anchor" href="#pattern类" aria-hidden="true">#</a> Pattern类</h3><p><code>pattern</code>对象是一个正则表达式对象，Pattern类没有公共构造方法，要创建一个Pattern对象，需要调用其公共静态方法<code>Pattern.compile(String regExp)</code>，它返回一个Pattern对象，该方法接受一个正则表达式作为它的第一个参数</p><h3 id="matcher类" tabindex="-1"><a class="header-anchor" href="#matcher类" aria-hidden="true">#</a> Matcher类</h3><p>Matcher对象是对输入字符串的解析和匹配的引擎，与Pattern类一样，Matcher也没有公共构造方法，需要调用Pattern对象的matcher方法来获取一个Matcher对象</p><figure><img src="`+m+`" alt="image-20211130215948471" tabindex="0" loading="lazy"><figcaption>image-20211130215948471</figcaption></figure><p>常用的替换方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>Matcher appendReplacement(StringBuffer sb, String replacement)</code></td><td>实现非终端添加和替换步骤。</td></tr><tr><td><code>StringBuffer appendTail(StringBuffer sb)</code></td><td>实现终端添加和替换步骤。</td></tr><tr><td><code>String replaceAll(String replacement)</code> 比较常用</td><td>替换模式与给定替换字符串相匹配的输入序列的每个子序列</td></tr><tr><td><code>String replaceFirst(String replacement)</code></td><td>替换模式与给定替换字符串匹配的输入序列的第一个子序列</td></tr><tr><td><code>static String quoteReplacement(String s)</code></td><td>返回指定字符串的字面替换字符串。这个方法返回一个字符串，就像传递给Matcher类的<code>appendReplacement</code> 方法一个字面字符串一样工作</td></tr></tbody></table><p>也可以通过如下方法来直接的返回一个字符串是否能和表达式匹配，匹配返回true，不匹配返回false</p><p>一般工作情况下这样用的多，简洁方便（如果想去验证某一个字符串是否满足某一个正则匹配块）</p><p>当然，这种方式是整体匹配---传入的字符串必须完全满足该条件才回返回true（regExp中可以不加上^或者&amp;这两个头尾符）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//        演示matcher的独立用法</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> matches <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;hello.*&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
   matches <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matches<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="patternsyntaxexeception" tabindex="-1"><a class="header-anchor" href="#patternsyntaxexeception" aria-hidden="true">#</a> PatternSyntaxExeception</h3><p>PatternSyntaxExeception是一个非强制异常类，它表示一个正则表达式模式中的语法错误</p><h2 id="分组、捕获、反向引用" tabindex="-1"><a class="header-anchor" href="#分组、捕获、反向引用" aria-hidden="true">#</a> 分组、捕获、反向引用</h2><p>先来看看一个问题:</p><p>给你一段文本，找出所有四个数字连接在一起的字符串，并且这四个数字要满足</p><ol><li>第一位与第四位相同</li><li>第二位与第三位相同</li><li>例如：1441 2332</li></ol><p>分组和捕获之前已经说过了，大概就是<code>(?&lt;number1&gt;\\\\d)</code> 这样</p><figure><img src="`+v+`" alt="image-20211130220750736" tabindex="0" loading="lazy"><figcaption>image-20211130220750736</figcaption></figure><p>看到这里，很清晰的就知道，反向引用的语法为：<code>(\\\\d)\\\\1</code></p><p>也就是：比如说我现在捕获了三个字段</p><p><code>(\\\\d)(\\\\d)(\\\\d)</code> 那么我要捕获第一个字段则需要：<code>(\\\\d)(\\\\d)(\\\\d)\\\\1</code></p><p>三个全部捕获即：<code>(\\\\d)(\\\\d)(\\\\d)\\\\1\\\\2\\\\3</code>就可以了，1,2,3是根据括号的顺序决定的</p><p>这里三个全部捕获能获取到的为：123123、456456、789789等</p><ol><li>匹配两个连续相同的数字:<code>(\\\\d)\\\\1</code></li><li>匹配5个连续相同的数字：<code>(\\\\d)\\\\1{4}</code></li><li>匹配解决上方问题<code>(\\\\d)(\\\\d)\\\\2\\\\1</code></li></ol><p>放在Java中就是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">&quot;1998 2002 2222 2112 &quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> regExp <span class="token operator">=</span> <span class="token string">&quot;(\\\\d)(\\\\d)\\\\2\\\\1&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">Pattern</span> compile <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regExp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> compile<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;匹配结果：&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="外部反向引用使用-使用外部反向引用解决结巴的问题" tabindex="-1"><a class="header-anchor" href="#外部反向引用使用-使用外部反向引用解决结巴的问题" aria-hidden="true">#</a> 外部反向引用使用-使用外部反向引用解决结巴的问题</h3><p>先说下，在<code>matcher.group()</code>时，也可以通过外部反向引用快速获取，且不需要加上($)号，详情看下面的<a href="###%E6%89%A9%E5%B1%95-%E8%A7%A3%E6%9E%90%E5%87%BA%E4%B8%80%E4%B8%AAURL%E4%B8%AD%E7%9A%84%E5%AD%97%E6%AE%B5">扩展-解析出一个URL中的字段</a></p><figure><img src="`+g+`" alt="image-20211130223553382" tabindex="0" loading="lazy"><figcaption>image-20211130223553382</figcaption></figure><p>现在有一段话：<code>我我我我我我我我.....我要.....看看看看......杰哥！</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run9</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;我我我我我我我我.....我要.....看看看看......杰哥！&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//        1. 去掉所有的.</span>
        <span class="token class-name">String</span> regExp <span class="token operator">=</span> <span class="token string">&quot;\\\\.&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Pattern</span> compile <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regExp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> compile<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        使用replaceAll替换符合的字符串</span>
        str <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;去掉所有的.后：&quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        2. 去掉重复的字 . 匹配任意字符</span>
        <span class="token comment">//分组捕获到的内容会存放到$1</span>
        regExp <span class="token operator">=</span> <span class="token string">&quot;(.)\\\\1+&quot;</span><span class="token punctuation">;</span>
        compile <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regExp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        matcher <span class="token operator">=</span> compile<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;找到重复的字&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token comment">//        使用外部方向引用替换：我我我我替换为我</span>
        str <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;$1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;去掉所有的重复的字后：&quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        可以使用简化的方式两步完成</span>
        str <span class="token operator">=</span> <span class="token string">&quot;我我我我我我我我.....我要.....看看看看......杰哥！&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//        先使用一条语句去掉...</span>
        str <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;[.]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;简化去重1：&quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        再使用一条语句去掉重复的汉字</span>
        str <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;(.)\\\\1+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;$1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;简化去重2：&quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//我要看杰哥！</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在string类中使用正则表达式" tabindex="-1"><a class="header-anchor" href="#在string类中使用正则表达式" aria-hidden="true">#</a> 在String类中使用正则表达式</h2><p>String类中的replaceAll是可以直接使用正则表达式替换的</p><p>比方说，现在有一段话，我想将其的1.?全部替换为1.8：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>2000年5月，JDK1.3、JDK1.4和J2SE1.3相继发布，几周后其获得了Apple公司Mac OS X的工业标准的支持。2001年9月24日，J2EE1.3发布。2002年2月26日，J2SE1.4发布。自此Java的计算能力有了大幅提升，与J2SE1.3相比，其多了近62%的类和接口。在这些新特性当中，还提供了广泛的XML支持、安全套接字（Socket）支持（通过SSL与TLS协议）、全新的I/OAPI、正则表达式、日志与断言。2004年9月30日，J2SE1.5发布，成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE 1.5更名为Java SE 5.0（内部版本号1.5.0），代号为“Tiger”，Tiger包含了从1996年发布1.0版本以来的最重大的更新，其中包括泛型支持、基本类型的自动装箱、改进的循环、枚举类型、格式化I/O及可变参数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>非常简单：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run10</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;......&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> replaceAll <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;1\\\\.\\\\d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>replaceAll<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以通过调用器的matcher方法验证数据：</p><p>比方说验证一个手机号，要求必须是138,139开头的手机号</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run11</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span><span class="token string">&quot;13969968888&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> matches <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;^(13(?:9|8))+(\\\\d){8}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;验证结果：&quot;</span><span class="token operator">+</span> matches<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以结合split来进行分割数据</p><p>比方说，这段话中，通过所有特殊字符进行分割字符串</p><p><code>11111@22222#33333$44444-55555&amp;66666*77777.88888</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run12</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;11111@22222#33333$44444-55555&amp;66666*77777.88888&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;[@#$\\\\-*&amp;.]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> split<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展-验证一个数字是否是整数或者小数" tabindex="-1"><a class="header-anchor" href="#扩展-验证一个数字是否是整数或者小数" aria-hidden="true">#</a> 扩展-验证一个数字是否是整数或者小数</h2><p>目标：<code>123 -456 34.89 -87.9 -0.01 0.45</code></p><p>需要区分正负</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run13</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">&quot;123.456&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> regExp <span class="token operator">=</span> <span class="token string">&quot;^[-+]?([1-9]\\\\d*|0)(.\\\\d+)?$&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regExp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;匹配成功 是整数 或小数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;匹配失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析：<code>([1-9]\\\\d*|0)</code>就是要么以1~9开头任意数量的数字，或者是个0，防止0098这样的事情</p><h2 id="扩展-解析出一个url中的字段" tabindex="-1"><a class="header-anchor" href="#扩展-解析出一个url中的字段" aria-hidden="true">#</a> 扩展-解析出一个URL中的字段</h2><figure><img src="`+b+`" alt="image-20211130234627965" tabindex="0" loading="lazy"><figcaption>image-20211130234627965</figcaption></figure><p>思路：分组，分成4个组，然后分别获取对应的值即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run14</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://111.111.111.111:8080/user/article?id=1003#title&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> regExp <span class="token operator">=</span> <span class="token string">&quot;^(?&lt;protocol&gt;http|https)://(?&lt;host&gt;[a-zA-z0-9.]+):(?&lt;port&gt;\\\\d{2,5})(?&lt;files&gt;[\\\\w-/]*/[\\\\w?=#]+)$&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">Pattern</span> compile <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regExp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> compile<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        整体匹配</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//            外部反向引用</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;$protocol:&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">&quot;protocol&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;$host:&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">&quot;host&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;$port:&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">&quot;port&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;$files:&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">&quot;files&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展-java正则表达式大全" tabindex="-1"><a class="header-anchor" href="#扩展-java正则表达式大全" aria-hidden="true">#</a> 扩展-Java正则表达式大全</h2>`,91),_={href:"https://blog.csdn.net/zpz2411232428/article/details/83549502",target:"_blank",rel:"noopener noreferrer"},S=s(`<div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>一、校验数字的表达式


1 数字：^[0-9]<span class="token italic"><span class="token punctuation">*</span><span class="token content">$
2 n位的数字：^\\d{n}$
3 至少n位的数字：^\\d{n,}$
4 m-n位的数字：^\\d{m,n}$
5 零和非零开头的数字：^(0|<span class="token url">[<span class="token content">1-9</span>][<span class="token variable">0-9</span>]</span></span><span class="token punctuation">*</span></span>)$
6 非零开头的最多带两位小数的数字：^(<span class="token url">[<span class="token content">1-9</span>][<span class="token variable">0-9</span>]</span><span class="token italic"><span class="token punctuation">*</span><span class="token content">)+(.[0-9]{1,2})?$
7 带1-2位小数的正数或负数：^(\\-)?\\d+(\\.\\d{1,2})?$
8 正数、负数、和小数：^(\\-|\\+)?\\d+(\\.\\d+)?$
9 有两位小数的正实数：^[0-9]+(.[0-9]{2})?$
10 有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$
11 非零的正整数：^[1-9]\\d</span><span class="token punctuation">*</span></span>$ 或 ^(<span class="token url">[<span class="token content">1-9</span>][<span class="token variable">0-9</span>]</span><span class="token italic"><span class="token punctuation">*</span><span class="token content">){1,3}$ 或 ^\\+?<span class="token url">[<span class="token content">1-9</span>][<span class="token variable">0-9</span>]</span></span><span class="token punctuation">*</span></span>$
12 非零的负整数：^\\-[1-9][]0-9&quot;<span class="token italic"><span class="token punctuation">*</span><span class="token content">$ 或 ^-[1-9]\\d</span><span class="token punctuation">*</span></span>$
13 非负整数：^\\d+$ 或 ^[1-9]\\d<span class="token italic"><span class="token punctuation">*</span><span class="token content">|0$
14 非正整数：^-[1-9]\\d</span><span class="token punctuation">*</span></span>|0$ 或 ^((-\\d+)|(0+))$
15 非负浮点数：^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d<span class="token italic"><span class="token punctuation">*</span><span class="token content">\\.\\d</span><span class="token punctuation">*</span></span>|0\\.\\d<span class="token italic"><span class="token punctuation">*</span><span class="token content">[1-9]\\d</span><span class="token punctuation">*</span></span>|0?\\.0+|0$
16 非正浮点数：^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d<span class="token italic"><span class="token punctuation">*</span><span class="token content">\\.\\d</span><span class="token punctuation">*</span></span>|0\\.\\d<span class="token italic"><span class="token punctuation">*</span><span class="token content">[1-9]\\d</span><span class="token punctuation">*</span></span>))|0?\\.0+|0$
17 正浮点数：^[1-9]\\d<span class="token italic"><span class="token punctuation">*</span><span class="token content">\\.\\d</span><span class="token punctuation">*</span></span>|0\\.\\d<span class="token italic"><span class="token punctuation">*</span><span class="token content">[1-9]\\d</span><span class="token punctuation">*</span></span>$ 或 ^(([0-9]+\\.[0-9]<span class="token italic"><span class="token punctuation">*</span><span class="token content"><span class="token url">[<span class="token content">1-9</span>][<span class="token variable">0-9</span>]</span></span><span class="token punctuation">*</span></span>)|([0-9]<span class="token italic"><span class="token punctuation">*</span><span class="token content"><span class="token url">[<span class="token content">1-9</span>][<span class="token variable">0-9</span>]</span></span><span class="token punctuation">*</span></span>\\.[0-9]+)|([0-9]<span class="token italic"><span class="token punctuation">*</span><span class="token content"><span class="token url">[<span class="token content">1-9</span>][<span class="token variable">0-9</span>]</span></span><span class="token punctuation">*</span></span>))$
18 负浮点数：^-([1-9]\\d<span class="token italic"><span class="token punctuation">*</span><span class="token content">\\.\\d</span><span class="token punctuation">*</span></span>|0\\.\\d<span class="token italic"><span class="token punctuation">*</span><span class="token content">[1-9]\\d</span><span class="token punctuation">*</span></span>)$ 或 ^(-(([0-9]+\\.[0-9]<span class="token italic"><span class="token punctuation">*</span><span class="token content"><span class="token url">[<span class="token content">1-9</span>][<span class="token variable">0-9</span>]</span></span><span class="token punctuation">*</span></span>)|([0-9]<span class="token italic"><span class="token punctuation">*</span><span class="token content"><span class="token url">[<span class="token content">1-9</span>][<span class="token variable">0-9</span>]</span></span><span class="token punctuation">*</span></span>\\.[0-9]+)|([0-9]<span class="token italic"><span class="token punctuation">*</span><span class="token content"><span class="token url">[<span class="token content">1-9</span>][<span class="token variable">0-9</span>]</span></span><span class="token punctuation">*</span></span>)))$
19 浮点数：^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d<span class="token italic"><span class="token punctuation">*</span><span class="token content">\\.\\d</span><span class="token punctuation">*</span></span>|0\\.\\d<span class="token italic"><span class="token punctuation">*</span><span class="token content">[1-9]\\d</span><span class="token punctuation">*</span></span>|0?\\.0+|0)$




二、校验字符的表达式


1 汉字：^[\\u4e00-\\u9fa5]{0,}$
2 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$
3 长度为3-20的所有字符：^.{3,20}$
4 由26个英文字母组成的字符串：^[A-Za-z]+$
5 由26个大写英文字母组成的字符串：^[A-Z]+$
6 由26个小写英文字母组成的字符串：^[a-z]+$
7 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$
8 由数字、26个英文字母或者下划线组成的字符串：^\\w+$ 或 ^\\w{3,20}$
9 中文、英文、数字包括下划线：^[\\u4E00-\\u9FA5A-Za-z0-9_]+$
10 中文、英文、数字但不包括下划线等符号：^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$
11 可以输入含有^%&amp;&#39;,;=?$\\&quot;等字符：[^%&amp;&#39;,;=?$\\x22]+
12 禁止输入含有<span class="token strike"><span class="token punctuation">~</span><span class="token content">的字符：[^</span><span class="token punctuation">~</span></span>\\x22]+




三、特殊需求表达式


1 Email地址：^\\w+([-+.]\\w+)<span class="token italic"><span class="token punctuation">*</span><span class="token content">@\\w+([-.]\\w+)</span><span class="token punctuation">*</span></span>\\.\\w+([-.]\\w+)<span class="token italic"><span class="token punctuation">*</span><span class="token content">$
2 域名：<span class="token url">[<span class="token content">a-zA-Z0-9</span>][<span class="token variable">-a-zA-Z0-9</span>]</span>{0,62}(/.<span class="token url">[<span class="token content">a-zA-Z0-9</span>][<span class="token variable">-a-zA-Z0-9</span>]</span>{0,62})+/.?
3 InternetURL：[a-zA-z]+://[^\\s]</span><span class="token punctuation">*</span></span> 或 ^https://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]<span class="token italic"><span class="token punctuation">*</span><span class="token content">)?$
4 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$
5 电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$ 
6 国内电话号码(0511-4405222、021-87888822)：\\d{3}-\\d{8}|\\d{4}-\\d{7}
7 身份证号：
  15或18位身份证：^\\d{15}|\\d{18}$
  15位身份证：^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$
  18位身份证：^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{4}$
8 短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$
9 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^<span class="token url">[<span class="token content">a-zA-Z</span>][<span class="token variable">a-zA-Z0-9_</span>]</span>{4,15}$
10 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w{5,17}$
11 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.</span><span class="token punctuation">*</span></span>\\d)(?=.<span class="token italic"><span class="token punctuation">*</span><span class="token content">[a-z])(?=.</span><span class="token punctuation">*</span></span>[A-Z]).{8,10}$ 
12 日期格式：^\\d{4}-\\d{1,2}-\\d{1,2}
13 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$
14 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ 
15 钱的输入格式：
16 1.有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^<span class="token url">[<span class="token content">1-9</span>][<span class="token variable">0-9</span>]</span><span class="token italic"><span class="token punctuation">*</span><span class="token content">$ 
17 2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|<span class="token url">[<span class="token content">1-9</span>][<span class="token variable">0-9</span>]</span></span><span class="token punctuation">*</span></span>)$ 
18 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?<span class="token url">[<span class="token content">1-9</span>][<span class="token variable">0-9</span>]</span><span class="token italic"><span class="token punctuation">*</span><span class="token content">)$ 
19 4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ 
20 5.必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]{2})?$ 
21 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$ 
22 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})</span><span class="token punctuation">*</span></span>(.[0-9]{1,2})?$ 
23 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})<span class="token italic"><span class="token punctuation">*</span><span class="token content">)(.[0-9]{1,2})?$ 
24 备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;</span><span class="token punctuation">*</span></span>&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里
25 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.<span class="token url">[<span class="token content">x|X</span>][<span class="token variable">m|M</span>]</span>[l|L]$
26 中文字符的正则表达式：[\\u4e00-\\u9fa5]
27 双字节字符：[^\\x00-\\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))
28 空白行的正则表达式：\\n\\s<span class="token italic"><span class="token punctuation">*</span><span class="token content">\\r (可以用来删除空白行)
29 HTML标记的正则表达式：&lt;(\\S</span><span class="token punctuation">*</span></span>?)[^&gt;]<span class="token italic"><span class="token punctuation">*</span><span class="token content">&gt;.</span><span class="token punctuation">*</span></span>?|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>.*?</span> <span class="token punctuation">/&gt;</span></span> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)
30 首尾空白字符的正则表达式：^\\s<span class="token italic"><span class="token punctuation">*</span><span class="token content">|\\s</span><span class="token punctuation">*</span></span>$或(^\\s<span class="token italic"><span class="token punctuation">*</span><span class="token content">)|(\\s</span><span class="token punctuation">*</span></span>$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)
31 腾讯QQ号：<span class="token url">[<span class="token content">1-9</span>][<span class="token variable">0-9</span>]</span>{4,} (腾讯QQ号从10000开始)
32 中国邮政编码：[1-9]\\d{5}(?!\\d) (中国邮政编码为6位数字)
33 IP地址：\\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function A(w,B){const t=e("ExternalLinkIcon");return o(),c("div",null,[y,h,f,x,E,n("p",null,[n("a",_,[a("https://blog.csdn.net/zpz2411232428/article/details/83549502"),l(t)]),a(" 这篇文章上啥都有")]),S])}const $=p(q,[["render",A],["__file","23-正则表达式.html.vue"]]);export{$ as default};
