import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-3ab2953d.js";const p="/images/Java/Android/03-1-Kotlin协程/image-20220612115419560.png",e="/images/Java/Android/03-1-Kotlin协程/image-20220612115842357.png",o="/images/Java/Android/03-1-Kotlin协程/image-20220612124402104.png",c="/images/Java/Android/03-1-Kotlin协程/image-20220612164411894.png",i="/images/Java/Android/03-1-Kotlin协程/image-20220612164425988.png",l={},u=t(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>这玩意学习起来略微有点难度</p><ul><li>Java当中不曾出现过，只有现代编程语言才有的特性</li><li>协程的概念不太清晰，我们目前看到的大都是不同语言对于协程的实现或者衍生</li><li>如果你Kotlin基础不扎实，或者多线程基础不太行的话…可能还会更难理解</li></ul><p>这里举两个例子吧，在JavaScript和Golang中开启协程的方式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fun1</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">await</span> api<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>and</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">go</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然还有Python之类的协程，这里就不做演示了</p><p>协程实际上就是对多线程的一个进一步封装，就像是Java来对指针和GC进行了封装一样，可以让我们更方便的构建出更好的代码</p><p>在Kotlin中，协程基于线程，是一个轻量级的线程（一个线程调度框架）</p><p>在后续的Android开发中，协程并不是必须品，你也可以像Java那样使用线程，例如</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">package</span> com<span class="token punctuation">.</span>project


<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Thread <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，也可以使用线程池来完成这个内容</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">package</span> com<span class="token punctuation">.</span>project

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors


<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> executor <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment">//    创建一个带有返回值的任务</span>
    <span class="token keyword">val</span> future <span class="token operator">=</span> executor<span class="token punctuation">.</span>submit<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
        <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是若使用协程的话，可以让thread变得更容易进行管理，同时可以更轻松的使用</p><h2 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门" aria-hidden="true">#</a> 快速入门</h2><p>首先需要安装两个依赖</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// https://mvnrepository.com/artifact/org.jetbrains.kotlinx/kotlinx-coroutines-core</span>
<span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.2&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// https://mvnrepository.com/artifact/org.jetbrains.kotlinx/kotlinx-coroutines-core-jvm</span>
<span class="token function">runtimeOnly</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.6.2&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS:如果是之后的Android项目的话，大概率是安装好了的，直接用即可，不需要额外安装其他内容</p><p>然后写点代码使用</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">package</span> com<span class="token punctuation">.</span>project

<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit

<span class="token comment">//注意这个suspend</span>
<span class="token comment">// suspend的函数可以挂起，挂起的函数可以被挂起的函数调用，挂起的函数可以被协程调用</span>
<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//    GlobalScope:是一个协程作用域，它可以被用来启动一个协程。</span>
<span class="token comment">//    它也是一个顶级协程，它的作用域是整个程序。</span>
<span class="token comment">//    然后调用launch()方法来启动一个协程。</span>
<span class="token comment">//    这个方法返回一个Job对象，它可以用来取消协程。</span>

<span class="token comment">//    这里的launch(Dispatchers.Main) 中 Dispatchers.Default 指的是在哪个线程中启动的协程</span>
<span class="token comment">//    Default根据平台不同而定，在Android中是主线程，在JVM中是主线程，在JS中是主线程。（反正都是主线程就是了，不知道写啥就写Default）</span>
    <span class="token keyword">val</span> launch <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token comment">//        切换上下文到其他线程，这里是切换到IO线程中执行异步任务</span>
        <span class="token keyword">val</span> withContext <span class="token operator">=</span> <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">//            这个值会被作为协程的返回值</span>
            <span class="token function">MyTestObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token function">println</span><span class="token punctuation">(</span>withContext<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token comment">//    挂起当前线程（主线程），等待launch协程执行完毕，和线程池的join一样</span>
    launch<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> MyTestObj <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;User&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实这样看起来有点怪哈，但如果你用过Java中的<code>CompletableFuture</code>，例如这样的代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductEntity</span><span class="token punctuation">&gt;</span></span> productEntityCompletableFuture <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// 这里经过一系列操作获取到了product</span>
    <span class="token keyword">return</span> product<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> saveStore <span class="token operator">=</span> productEntityCompletableFuture<span class="token punctuation">.</span><span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span>product <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> saveBanner <span class="token operator">=</span> productEntityCompletableFuture<span class="token punctuation">.</span><span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span>product <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> saveDetail <span class="token operator">=</span> productEntityCompletableFuture<span class="token punctuation">.</span><span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span>product <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> saveTags <span class="token operator">=</span> productEntityCompletableFuture<span class="token punctuation">.</span><span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span>product <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> saveStandard <span class="token operator">=</span> productEntityCompletableFuture<span class="token punctuation">.</span><span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span>product <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>productEntityCompletableFuture<span class="token punctuation">,</span> saveStore<span class="token punctuation">,</span> saveBanner<span class="token punctuation">,</span> saveDetail<span class="token punctuation">,</span> saveTags<span class="token punctuation">,</span> saveStandard<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这还只是一个callback，如果说上面的saveDetail要在saveStore之后执行…或者有更多的callback，那就成了地狱callback，可读性极差，协程在任何时候主要目的之一都是来解决地狱callback问题的</p><h2 id="协程的挂起和恢复-概念" tabindex="-1"><a class="header-anchor" href="#协程的挂起和恢复-概念" aria-hidden="true">#</a> 协程的挂起和恢复-概念</h2><p>常规的函数基础操作包括invoke(或者call)和return，协程新增了suspend和resume</p><ul><li>suspend：让协程挂起或者暂停，用于执行当前协程，并保存所有的局部变量—如果说你学习过JavaScript或者C#，Python之类的，可以把这个当成是<code>async</code></li><li>resume：用于让已暂停的协程从暂停处继续运行</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">package</span> com<span class="token punctuation">.</span>project

<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigDecimal
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit

<span class="token keyword">class</span> MyApplication <span class="token punctuation">{</span>
    <span class="token comment">/**
     * 无论是啥情况下，把suspend当成async来用就可以了（声明当前函数是一个异步任务）
     */</span>
    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        在suspend函数中调用带有suspend修饰的函数，就可以挂起（相当于等待该函数完毕 和其他语言的await一样）</span>
<span class="token comment">//        也就是说 不需要额外的await语句，只需要在suspend函数中调用suspend函数就可以实现同步调用了</span>
        <span class="token keyword">val</span> user <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">show</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">show</span><span class="token punctuation">(</span>user<span class="token operator">:</span> User<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">user<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">user<span class="token punctuation">.</span>age</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
        <span class="token function">User</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">BigDecimal</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;100&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">MyApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="阻塞和挂起" tabindex="-1"><a class="header-anchor" href="#阻塞和挂起" aria-hidden="true">#</a> 阻塞和挂起</h2><p>例如某天你想去按个摩，点了98号技师，但是他正在忙，你要等待他忙完，这就是阻塞</p><figure><img src="`+p+'" alt="image-20220612115419560" tabindex="0" loading="lazy"><figcaption>image-20220612115419560</figcaption></figure><p>如果你某天想去按个摩，点了98号技师，但是它正在忙，你此时又有别的事情要做，就让前台给你记下你预约了98号，让98号之后来服务你，在这过程中你做你自己的事情，这就是挂起</p><figure><img src="'+e+`" alt="image-20220612115842357" tabindex="0" loading="lazy"><figcaption>image-20220612115842357</figcaption></figure><p>在Kotlin中，使用suspend关键字修饰的函数叫做挂起函数，<strong>挂起函数只能在协程体内或者其他挂起函数内调用</strong></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">package</span> com<span class="token punctuation">.</span>project

<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> result <span class="token operator">=</span> async <span class="token punctuation">{</span>
<span class="token comment">//            挂起 就相当于新开了一个线程来run这些内容 不会影响主线程</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
            <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span>
        <span class="token punctuation">}</span>
        <span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token comment">//    阻塞 直接阻塞主线程</span>
    <span class="token comment">// PS  可以把下面这行阻塞删掉并且上面的代码不加join看看是什么效果（协程将会随着Context线程的结束而结束</span>
    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩展-使用原生api来完成协程" tabindex="-1"><a class="header-anchor" href="#扩展-使用原生api来完成协程" aria-hidden="true">#</a> 扩展-使用原生API来完成协程</h3><p>实际上我们刚刚使用的是封装过的API（相当于Netty一样），这里演示下使用原生的Api，实际工作中用不上， 看看就好</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">package</span> com<span class="token punctuation">.</span>project

<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">val</span> continuation <span class="token operator">=</span> <span class="token keyword">suspend</span> <span class="token punctuation">{</span>
        <span class="token comment">// 声明协程的主内容和返回值（就相当于一个runnable一样</span>
        <span class="token number">5</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">createCoroutine</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> Continuation<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置上下文对象</span>
        <span class="token keyword">override</span> <span class="token keyword">val</span> context<span class="token operator">:</span> CoroutineContext <span class="token operator">=</span> EmptyCoroutineContext

        <span class="token comment">// 这就是回调函数callback</span>
        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">resumeWith</span><span class="token punctuation">(</span>result<span class="token operator">:</span> Result<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;=== </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">result<span class="token punctuation">.</span><span class="token function">getOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ===&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 启动一个协程</span>
    continuation<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>Unit<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>=== 5 ===
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="协程的调度器-上下文" tabindex="-1"><a class="header-anchor" href="#协程的调度器-上下文" aria-hidden="true">#</a> 协程的调度器（上下文）</h2><p>所有的协程必须在<strong>调度器中运行</strong>，即使在主线程上也是如此</p><figure><img src="`+o+'" alt="image-20220612124402104" tabindex="0" loading="lazy"><figcaption>image-20220612124402104</figcaption></figure><p>注意，Main只能在Android中使用，通常在开发web server例如SpringBoot的时候都是用Dispatchers.Default，当然如果你没有指定的话，默认也就是Dispatchers.Default</p><h2 id="结构化并发" tabindex="-1"><a class="header-anchor" href="#结构化并发" aria-hidden="true">#</a> 结构化并发</h2><figure><img src="'+c+'" alt="image-20220612164411894" tabindex="0" loading="lazy"><figcaption>image-20220612164411894</figcaption></figure><figure><img src="'+i+'" alt="image-20220612164425988" tabindex="0" loading="lazy"><figcaption>image-20220612164425988</figcaption></figure>',47),r=[u];function k(d,v){return s(),a("div",null,r)}const g=n(l,[["render",k],["__file","03-1-Kotlin协程.html.vue"]]);export{g as default};
