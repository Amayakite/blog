const n=JSON.parse('{"key":"v-be3cab44","path":"/GoLang/Base/02-%E7%B1%BB.html","title":"02-GoLang中的类和包","lang":"zh-CN","frontmatter":{"title":"02-GoLang中的类和包","date":"2022-02-27T01:02:31.000Z","category":"GoLang","tag":["GoLang"],"description":"概述 嘛，总得来说这个东西和其他的强类型语言差不多，不过类这个东西在 golang 中被称为结构体 从 Type 开始 就相当于是自定义类型一样，下面来一个简单的示例 package main import \\"fmt\\" type myInt int func main() { \\tvar n myInt \\tn = 100 \\tprintln(n) \\tfmt.Printf(\\"%T\\\\n\\", n) }","head":[["meta",{"property":"og:url","content":"http://www.amayakite.github.io/GoLang/Base/02-%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"Amayakite Blogs"}],["meta",{"property":"og:title","content":"02-GoLang中的类和包"}],["meta",{"property":"og:description","content":"概述 嘛，总得来说这个东西和其他的强类型语言差不多，不过类这个东西在 golang 中被称为结构体 从 Type 开始 就相当于是自定义类型一样，下面来一个简单的示例 package main import \\"fmt\\" type myInt int func main() { \\tvar n myInt \\tn = 100 \\tprintln(n) \\tfmt.Printf(\\"%T\\\\n\\", n) }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-17T12:51:48.000Z"}],["meta",{"property":"article:author","content":"Amayakite"}],["meta",{"property":"article:tag","content":"GoLang"}],["meta",{"property":"article:published_time","content":"2022-02-27T01:02:31.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-17T12:51:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02-GoLang中的类和包\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-27T01:02:31.000Z\\",\\"dateModified\\":\\"2023-06-17T12:51:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amayakite\\",\\"url\\":\\"https://github.com/Amayakite\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"从 Type 开始","slug":"从-type-开始","link":"#从-type-开始","children":[]},{"level":2,"title":"结构体","slug":"结构体","link":"#结构体","children":[{"level":3,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":3,"title":"匿名结构体","slug":"匿名结构体","link":"#匿名结构体","children":[]},{"level":3,"title":"结构体初始化的几种方式","slug":"结构体初始化的几种方式","link":"#结构体初始化的几种方式","children":[]},{"level":3,"title":"给结构体添加方法(重要)","slug":"给结构体添加方法-重要","link":"#给结构体添加方法-重要","children":[]},{"level":3,"title":"结构体的嵌套使用","slug":"结构体的嵌套使用","link":"#结构体的嵌套使用","children":[]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"扩展： Json 的序列化和反序列化","slug":"扩展-json-的序列化和反序列化","link":"#扩展-json-的序列化和反序列化","children":[]}]},{"level":2,"title":"接口(interface)","slug":"接口-interface","link":"#接口-interface","children":[{"level":3,"title":"基本的创建和使用","slug":"基本的创建和使用","link":"#基本的创建和使用","children":[]},{"level":3,"title":"定义一个接口","slug":"定义一个接口","link":"#定义一个接口","children":[]},{"level":3,"title":"值接收者和指针接收者接口的区别","slug":"值接收者和指针接收者接口的区别","link":"#值接收者和指针接收者接口的区别","children":[]},{"level":3,"title":"接口的继承","slug":"接口的继承","link":"#接口的继承","children":[]},{"level":3,"title":"空接口","slug":"空接口","link":"#空接口","children":[]},{"level":3,"title":"空接口类型的判断和断言","slug":"空接口类型的判断和断言","link":"#空接口类型的判断和断言","children":[]}]},{"level":2,"title":"Package-包","slug":"package-包","link":"#package-包","children":[{"level":3,"title":"从一个简单的包开始","slug":"从一个简单的包开始","link":"#从一个简单的包开始","children":[]},{"level":3,"title":"包的别名","slug":"包的别名","link":"#包的别名","children":[]}]}],"git":{"createdTime":1687006308000,"updatedTime":1687006308000,"contributors":[{"name":"Amayakite","email":"amayakite@qq.com","commits":1}]},"readingTime":{"minutes":9.05,"words":2715},"filePathRelative":"GoLang/Base/02-类.md","localizedDate":"2022年2月27日","excerpt":"<h2> 概述</h2>\\n<p>嘛，总得来说这个东西和其他的强类型语言差不多，不过类这个东西在 golang 中被称为结构体</p>\\n<h2> 从 Type 开始</h2>\\n<p>就相当于是自定义类型一样，下面来一个简单的示例</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">package</span> main\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token string\\">\\"fmt\\"</span>\\n\\n<span class=\\"token keyword\\">type</span> myInt <span class=\\"token builtin\\">int</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">var</span> n myInt\\n\\tn <span class=\\"token operator\\">=</span> <span class=\\"token number\\">100</span>\\n\\t<span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>n<span class=\\"token punctuation\\">)</span>\\n\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%T\\\\n\\"</span><span class=\\"token punctuation\\">,</span> n<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
