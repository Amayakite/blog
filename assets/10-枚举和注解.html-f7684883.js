const n=JSON.parse('{"key":"v-313fcc62","path":"/JavaLang/JavaSE/10-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3.html","title":"10-枚举和注解","lang":"zh-CN","frontmatter":{"title":"10-枚举和注解","date":"2021-11-02T17:05:31.000Z","category":"JavaSE","tag":["Java","JavaSE","Enum"],"description":"枚举介绍 开始前，先来看一个需求：创建季节（Season）对象，请设计并完成 package com.enum_; /** * * @author Amayakite * @version 1.0.0 */ public class Enumeration01 { public static void main(String[] args) { // 使用 Season season = new Season(\\"春天\\", \\"冷\\"); Season season1 = new Season(\\"夏天\\", \\"热\\"); Season season2 = new Season(\\"秋天\\", \\"冷\\"); Season season3 = new Season(\\"冬天\\", \\"冷\\"); // 看起来很正常，但是假如说某一天来了个憨批，写了个： Season season4 = new Season(\\"大黑暗天\\", \\"Genshin Impact\\"); // 或者又有个人，把已创建的对象的值修改了: season.setDesc(\\"热死了\\"); season.setName(\\"北风天\\"); // 这显然就不符合逻辑了...因为对于季节而言，他的具体的值就是固定的四个，不会有更多的取值范围 // 按照目前的设计思路，不能提现季节是固定的四个对象 // 因此，这样的设计不好 // 所以，就得用到枚举类了[枚：一个一个；举：列举；即把对象一个一个列举出来，只能选取其中某个] } } class Season { private String name; private String desc;// 描述 public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDesc() { return desc; } public void setDesc(String desc) { this.desc = desc; } public Season(String name, String desc) { this.name = name; this.desc = desc; } }","head":[["meta",{"property":"og:url","content":"http://www.amayakite.github.io/JavaLang/JavaSE/10-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Amayakite Blogs"}],["meta",{"property":"og:title","content":"10-枚举和注解"}],["meta",{"property":"og:description","content":"枚举介绍 开始前，先来看一个需求：创建季节（Season）对象，请设计并完成 package com.enum_; /** * * @author Amayakite * @version 1.0.0 */ public class Enumeration01 { public static void main(String[] args) { // 使用 Season season = new Season(\\"春天\\", \\"冷\\"); Season season1 = new Season(\\"夏天\\", \\"热\\"); Season season2 = new Season(\\"秋天\\", \\"冷\\"); Season season3 = new Season(\\"冬天\\", \\"冷\\"); // 看起来很正常，但是假如说某一天来了个憨批，写了个： Season season4 = new Season(\\"大黑暗天\\", \\"Genshin Impact\\"); // 或者又有个人，把已创建的对象的值修改了: season.setDesc(\\"热死了\\"); season.setName(\\"北风天\\"); // 这显然就不符合逻辑了...因为对于季节而言，他的具体的值就是固定的四个，不会有更多的取值范围 // 按照目前的设计思路，不能提现季节是固定的四个对象 // 因此，这样的设计不好 // 所以，就得用到枚举类了[枚：一个一个；举：列举；即把对象一个一个列举出来，只能选取其中某个] } } class Season { private String name; private String desc;// 描述 public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDesc() { return desc; } public void setDesc(String desc) { this.desc = desc; } public Season(String name, String desc) { this.name = name; this.desc = desc; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-17T12:51:48.000Z"}],["meta",{"property":"article:author","content":"Amayakite"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaSE"}],["meta",{"property":"article:tag","content":"Enum"}],["meta",{"property":"article:published_time","content":"2021-11-02T17:05:31.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-17T12:51:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"10-枚举和注解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-02T17:05:31.000Z\\",\\"dateModified\\":\\"2023-06-17T12:51:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amayakite\\",\\"url\\":\\"https://github.com/Amayakite\\"}]}"]]},"headers":[{"level":2,"title":"枚举介绍","slug":"枚举介绍","link":"#枚举介绍","children":[{"level":3,"title":"枚举的介绍","slug":"枚举的介绍","link":"#枚举的介绍","children":[]}]},{"level":2,"title":"自定义类实现枚举","slug":"自定义类实现枚举","link":"#自定义类实现枚举","children":[]},{"level":2,"title":"enum关键字实现枚举","slug":"enum关键字实现枚举","link":"#enum关键字实现枚举","children":[{"level":3,"title":"enum常用方法说明","slug":"enum常用方法说明","link":"#enum常用方法说明","children":[]},{"level":3,"title":"ENUM使用细节","slug":"enum使用细节","link":"#enum使用细节","children":[]},{"level":3,"title":"枚举的补充：配合Switch来使用","slug":"枚举的补充-配合switch来使用","link":"#枚举的补充-配合switch来使用","children":[]}]},{"level":2,"title":"JDK内置的基本注解类","slug":"jdk内置的基本注解类","link":"#jdk内置的基本注解类","children":[{"level":3,"title":"基本的Annotation介绍","slug":"基本的annotation介绍","link":"#基本的annotation介绍","children":[]}]},{"level":2,"title":"元注解：对注解进行注解","slug":"元注解-对注解进行注解","link":"#元注解-对注解进行注解","children":[{"level":3,"title":"@Retention注解","slug":"retention注解","link":"#retention注解","children":[]},{"level":3,"title":"@Target","slug":"target","link":"#target","children":[]}]}],"git":{"createdTime":1687006308000,"updatedTime":1687006308000,"contributors":[{"name":"Amayakite","email":"amayakite@qq.com","commits":1}]},"readingTime":{"minutes":11.37,"words":3411},"filePathRelative":"JavaLang/JavaSE/10-枚举和注解.md","localizedDate":"2021年11月2日","excerpt":"<h2> 枚举介绍</h2>\\n<blockquote>\\n<p>开始前，先来看一个需求：创建季节（Season）对象，请设计并完成</p>\\n</blockquote>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">package</span> <span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>enum_</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n *\\n * <span class=\\"token keyword\\">@author</span> Amayakite\\n * <span class=\\"token keyword\\">@version</span> 1.0.0\\n */</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Enumeration01</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token comment\\">//        使用</span>\\n        <span class=\\"token class-name\\">Season</span> season <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Season</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"春天\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"冷\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Season</span> season1 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Season</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"夏天\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"热\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Season</span> season2 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Season</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"秋天\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"冷\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Season</span> season3 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Season</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"冬天\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"冷\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//        看起来很正常，但是假如说某一天来了个憨批，写了个：</span>\\n        <span class=\\"token class-name\\">Season</span> season4 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Season</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"大黑暗天\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Genshin Impact\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//        或者又有个人，把已创建的对象的值修改了:</span>\\n        season<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setDesc</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"热死了\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        season<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setName</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"北风天\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//        这显然就不符合逻辑了...因为对于季节而言，他的具体的值就是固定的四个，不会有更多的取值范围</span>\\n\\n<span class=\\"token comment\\">//        按照目前的设计思路，不能提现季节是固定的四个对象</span>\\n<span class=\\"token comment\\">//        因此，这样的设计不好</span>\\n<span class=\\"token comment\\">//        所以，就得用到枚举类了[枚：一个一个；举：列举；即把对象一个一个列举出来，只能选取其中某个]</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Season</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> name<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> desc<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 描述</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> name<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">setName</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> name<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> name<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">getDesc</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> desc<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">setDesc</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> desc<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>desc <span class=\\"token operator\\">=</span> desc<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Season</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> name<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> desc<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> name<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>desc <span class=\\"token operator\\">=</span> desc<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
