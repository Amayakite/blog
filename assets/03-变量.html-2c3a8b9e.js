import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as c,c as i,d as t,a as n,b as a,e as s}from"./app-3ab2953d.js";const r="/images/Java/JavaSE/03-变量/image-20211025221257337.png",u="/images/Java/JavaSE/03-变量/image-20211026001529258.png",d={},k=s(`<h1 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h1><blockquote><p>在各个编程语言中，变量都是必不可少的物件，就跟搭建一个房子一样，有砖头，有水泥，有水管......Java中也不例外</p></blockquote><h2 id="变量的基本原理" tabindex="-1"><a class="header-anchor" href="#变量的基本原理" aria-hidden="true">#</a> 变量的基本原理</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">//给“1”在内存里开了一块空间，这个空间坐标为“a”</span>
        <span class="token comment">//声明变量的步骤：声明变量a为整数型变量，然后对其赋值为1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="java中的数据类型" tabindex="-1"><a class="header-anchor" href="#java中的数据类型" aria-hidden="true">#</a> Java中的数据类型</h2>`,5),m=s(`<h3 id="使用变量的注意事项" tabindex="-1"><a class="header-anchor" href="#使用变量的注意事项" aria-hidden="true">#</a> 使用变量的注意事项</h3><ol><li>变量表示内存中的一个存储区域[不同的变量，类型不同，占用的空间也不同] <ol><li>比如：int 4个字节，double就是八个字节</li><li>该区域有自己的名称[变量名]和类型[数据类型]</li><li>变量必须先声明，后使用，即有顺序</li><li>该区域的数据可以在同一类型范围内不断变化</li><li>变量在同一个作用域内不能重名</li><li>变量=变量名+值+数据类型</li></ol></li></ol><h3 id="整数类型-使用细节" tabindex="-1"><a class="header-anchor" href="#整数类型-使用细节" aria-hidden="true">#</a> 整数类型 使用细节</h3><ol><li>Java各整数类型有固定的范围和长度，不受系统的影响，以保证Java程序的可移植性，整数类型的默认值是0</li><li>Java整数常量默认为int类型，声明Long型常量须后加<code>l</code>或者<code>L</code></li><li>Java程序中变量声明为int型，除非不足以表示大数</li><li>bit：计算机中最小的存储单位，Byte：计算机中基本的存储单元，1Byte=8bit</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> _004VarDetail <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">byte</span> n0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//1个字节</span>
   <span class="token keyword">int</span> n1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//4个字节</span>
   <span class="token keyword">long</span> n2 <span class="token operator">=</span> <span class="token number">1L</span> <span class="token comment">//8个字节</span>
   <span class="token keyword">int</span> n3 <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1L</span><span class="token punctuation">;</span> <span class="token comment">// 强转换 4个字节</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="认识整数数据类型" tabindex="-1"><a class="header-anchor" href="#认识整数数据类型" aria-hidden="true">#</a> 认识整数数据类型</h4><ol><li><p>byte：</p><ul><li>byte 数据类型是8位、有符号的，以二进制补码表示的整数；</li><li>最小值是 <code>-128（-2^7）</code>；</li><li>最大值是 <code>127（2^7-1）</code>；</li><li>默认值是<code>0</code>；</li><li>byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；</li><li>例子：byte a = 100，byte b = -50。</li></ul></li><li><p>short：</p><ul><li>short 数据类型是 16 位、有符号的以二进制补码表示的整数</li><li>最小值是 -32768（-2^15）；</li><li>最大值是 32767（2^15 - 1）；</li><li>Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；</li><li>默认值是 0</li><li>例子：short s = 1000，short r = -20000</li></ul></li><li><p>int：</p><ol><li>int 数据类型是32位、有符号的以二进制补码表示的整数；</li><li>最小值是 -2,147,483,648（-2^31）；</li><li>最大值是 2,147,483,647（2^31 - 1）；</li><li>一般地整型变量默认为 int 类型；</li><li>默认值是 0 ；</li><li>例子：int a = 100000, int b = -200000</li></ol></li><li><p>long：</p><ol><li>long 数据类型是 64 位、有符号的以二进制补码表示的整数；</li><li>最小值是 -9,223,372,036,854,775,808（-2^63）；</li><li>最大值是 9,223,372,036,854,775,807（2^63 -1）；</li><li>这种类型主要使用在需要比较大整数的系统上；</li><li>默认值是 0L；</li><li>例子： long a = 100000L，Long b = -200000L。</li><li>&quot;L&quot;理论上不分大小写，但是若写成&quot;l&quot;容易与数字&quot;1&quot;混淆，不容易分辩。所以最好大写。</li></ol></li></ol><h3 id="浮点类型-使用细节" tabindex="-1"><a class="header-anchor" href="#浮点类型-使用细节" aria-hidden="true">#</a> 浮点类型 使用细节</h3><ol><li><p>与整数类型相似，Java浮点类型也是有固定的范围和字段长度，不受OS的影响<br> Float是四个字节，Double是八个字节，浮点类型的默认值是<code>0.0</code></p></li><li><p>Java的浮点型常量默认为是Double类型，声明float常量需要在后面加上<code>f</code>或<code>F</code></p></li><li><p>浮点类型常量有两种表现形式</p><ul><li>十进制数形式：如<code>5.12</code> <code>5.102f</code> <code>.512</code>(必须有小数点)</li><li>科学计数法形式：如 <code>5.12e2[]</code> <code>5.12e-2[]</code></li></ul></li><li><p>通常情况下，应该使用double型，因为它比float更精确</p></li><li><p>浮点数使用陷阱：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 浮点数使用陷阱：2.7和8.1/3比较</span>
<span class="token keyword">double</span> num1 <span class="token operator">=</span><span class="token number">2.7</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> num2 <span class="token operator">=</span><span class="token number">8.1</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//预期 2.7</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2.7</span>
<span class="token comment">// 存储格式导致，效数存放的是一系列离散非连续的值</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2.6999999999999997</span>
<span class="token comment">// 也就是精度偏离 所有语言都会有这个问题</span>
<span class="token comment">// 得到一个重要的使用点：当我们对运算结果是小数的进行相当判断要小心</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>num1 <span class="token operator">==</span>num2<span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;相等&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;不相等&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num1<span class="token operator">-</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4.440892098500626E-16</span>
<span class="token comment">// 精度比较，获得两个数差值的绝对值，在某个精度范围内判断</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num1<span class="token operator">-</span>num2<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0.000001</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;精度判断-他们是相等的&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="认识浮点型" tabindex="-1"><a class="header-anchor" href="#认识浮点型" aria-hidden="true">#</a> 认识浮点型</h4><ol><li><p>float：</p><ol><li>float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；</li><li>float 在储存大型浮点数组的时候可节省内存空间；</li><li>默认值是 0.0f；</li><li>浮点数不能用来表示精确的值，如货币；</li><li>例子：float f1 = 234.5f。</li></ol></li><li><p>double：</p><ol><li><p>double 数据类型是双精度、64 位、符合 IEEE 754 标准的浮点数；</p></li><li><p>浮点数的默认类型为 double 类型；</p></li><li><p>double类型同样不能表示精确的值，如货币；</p></li><li><p>默认值是 0.0d；</p></li><li><p>例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> d1  <span class="token operator">=</span> <span class="token number">7D</span> <span class="token punctuation">;</span>
<span class="token keyword">double</span> d2  <span class="token operator">=</span> <span class="token number">7.</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> d3  <span class="token operator">=</span>  <span class="token number">8.0</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> d4  <span class="token operator">=</span>  <span class="token number">8.D</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> d5  <span class="token operator">=</span>  <span class="token number">12.9867</span><span class="token punctuation">;</span>
<span class="token comment">//是一个 int 字面量，而 7D，7. 和 8.0 是 double 字面量。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ol><h3 id="扩展-javaapi文档" tabindex="-1"><a class="header-anchor" href="#扩展-javaapi文档" aria-hidden="true">#</a> 扩展：JavaApi文档</h3><p>在上方的浮点类型中，使用了一个特殊的功能-<code>Math.abs</code>，这个东西是拿来的，该咋用？</p><p>所以就要引出AP文档了，Java API 文档 ，顾名思义，就是这玩意的使用手册</p>`,14),v={href:"https://www.matools.com/api/java8",target:"_blank",rel:"noopener noreferrer"},b=s('<p>在这之中我通过索引+<code>Ctrl+F</code>查询到了Mach类，并找到了其中的方法.abs，如图所示，它是返回值为 <code>double</code>绝对值</p><figure><img src="'+r+'" alt="image-20211025221257337" tabindex="0" loading="lazy"><figcaption>image-20211025221257337</figcaption></figure><p>也可以通过API文档找到自己想要的方法的说明文档</p><p>例如：ArrayList类有哪些方法，可以找到包-类-方法找到它（当然我大部分都是直接上索引搜索）</p><h2 id="字符类型-char" tabindex="-1"><a class="header-anchor" href="#字符类型-char" aria-hidden="true">#</a> 字符类型-char</h2>',5),g=s(`<li><p>char 类型是一个单一的 16 位 Unicode 字符；</p></li><li><p>最小值是 \\u0000（十进制等效值为 0）；</p></li><li><p>最大值是 \\uffff（即为 65535）；</p></li><li><p>char 数据类型可以储存任何字符；</p></li><li><p>例子：char letter = &#39;A&#39;;</p></li><li><p>字符常量是用单引号<code>&#39;&#39;</code>括起来的单个字符,他没有默认值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token char">&#39;我&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Java中还允许使用转义符&quot;&quot;来将其后面的字符转变为特殊字符型常量</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">&#39;\\t&#39;</span><span class="token punctuation">;</span> <span class="token comment">//制表符</span>
<span class="token keyword">char</span> c5 <span class="token operator">=</span> <span class="token char">&#39;\\n&#39;</span> <span class="token comment">//换行符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li>`,7),y=n("p",null,"在Java中，Char的本质是一个整数，在输出时，是Unicode码对应的字符",-1),h={href:"http://tool.chinaz.com/tools/unicode.aspx?qq-pf-to=pcqq.group",target:"_blank",rel:"noopener noreferrer"},x=s(`<li><p>可以直接个体char赋一个整数，然后输出时，会按照对应的Unicode字符输出</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Char类型的使用</span>
<span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">&#39;\\t&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token char">&#39;我&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c4 <span class="token operator">=</span><span class="token number">97</span><span class="token punctuation">;</span>  <span class="token comment">// char类型可以直接存放一个数字</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里实际输出的是\`a\`，97对照的字符就是\`a\`，这是一种编码的概念</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将char转换成数字进行输出 获得25105</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//97</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Char类型是可以进行运算的，相当于一个整数，因为它都对应有Unicode码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//107</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在Java程序中，Char默认输出的是UniCode码对应的字符，如果想要让其输出数字，就要使用int类型进行转换</p></li>`,3),f=s(`<h3 id="字符型本质的探讨" tabindex="-1"><a class="header-anchor" href="#字符型本质的探讨" aria-hidden="true">#</a> 字符型本质的探讨</h3><ol><li>字符型存储到计算机中，需要将字符对应的码值（整数）取出来，比如&#39;a&#39;:<br> 存储：&#39;a&#39;<mark>&gt;码值97</mark>&gt;二进制(1100 0001) <mark>&gt;存储<br> 读取：二进制</mark>&gt;97==&gt;&#39;a&#39;==&gt;显示</li><li>字符串的码值的对应关系是通过字符编码表决定的（是规定好的）</li></ol><h3 id="扩展-常见编码表一览" tabindex="-1"><a class="header-anchor" href="#扩展-常见编码表一览" aria-hidden="true">#</a> 扩展-常见编码表一览</h3><ul><li>ASCII编码表 <ul><li>一个字节表示，一共128个字符</li><li>上个世纪60年代，美国指定了一套字符编码(使用一个字节)，对英语字符与二进制位之间的关系做了统一的规定，这被称为ASCII码，ASCII码一共规定了128个字符的编码，只占用了一个字节的后7位，最前面的1统一规定为0</li><li>一个字节可以表示256个字符，ASCII码<strong>只用了128个字符</strong></li><li>缺点：<strong>不能表示所有的字符</strong></li></ul></li><li>UniCode编码表 <ul><li>固定大小的编码，使用两个字节来表示字符，字母和汉字都是统一占用两个字符，这样有点浪费时间</li><li>一种编码，将世界上所有的符号都纳入其中，每一个符号都给予了独一无二的编码，<strong>使用Unicode没有乱码的问题</strong></li><li>2的16次方是65536，所以最多编码是65536个字符</li><li>编码0~127的字符与ASCII的编码一样，比如&#39;a&#39;在ASCII码是<code>0x61</code>,在UniCode码是<code>0x0061</code>，都对应97，因此UniCode码兼容ASCII码</li><li>缺点：<strong>一个英文和一个汉字都占用两个字符</strong>，对于存储空间来说这是浪费</li></ul></li><li>UTF-8编码表 <ul><li>大小可变的编码，字母使用1个字节，汉字使用3个字节</li><li>UTF-8是在互联网上<strong>使用最广泛的一种UniCode实现方式</strong></li><li>UTF-8是一种变长的编码方式，它可以使用1~6个字节表示一个符号，根据不同的符号而变化字节长度</li></ul></li><li>GBK编码表 <ul><li>可以表示汉字，而且范围广，字母使用1个字节，汉字使用2个字节</li></ul></li><li>GBK2312编码表 <ul><li>可以表示汉字，GBK2312&lt;GBK</li></ul></li><li>BIg5编码 <ul><li>繁体中文，台湾和香港用的</li></ul></li></ul><h2 id="布尔类型" tabindex="-1"><a class="header-anchor" href="#布尔类型" aria-hidden="true">#</a> 布尔类型</h2><ol><li>布尔类型也叫Boolean类型</li><li>布尔类型占用一个字节</li><li>布尔类型一般都是用于逻辑运算，流程控制等： <ul><li>if条件控制语句</li><li>while循环控制语句</li><li>do-while循环控制语句</li><li>for循环控制语句</li></ul></li><li>这种类型只作为一种标志来记录 true/false 情况</li><li>默认值是 <strong>false</strong>，没有<strong>null</strong>，如果像其他语言定义0/-1/1等会报错</li><li>例子：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> pass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>pass<span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;通过了考试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出这行</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;没有通过考试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><h3 id="二元运算符" tabindex="-1"><a class="header-anchor" href="#二元运算符" aria-hidden="true">#</a> 二元运算符</h3><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">运算</th><th style="text-align:center;">范例</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td style="text-align:center;">+</td><td style="text-align:center;">正号</td><td style="text-align:center;">+7</td><td style="text-align:center;">7</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">负号</td><td style="text-align:center;">b=11;-b</td><td style="text-align:center;">-11</td></tr><tr><td style="text-align:center;">+</td><td style="text-align:center;">加</td><td style="text-align:center;">9+9</td><td style="text-align:center;">18</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">减</td><td style="text-align:center;">10-8</td><td style="text-align:center;">2</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">乘</td><td style="text-align:center;">2*2</td><td style="text-align:center;">4</td></tr><tr><td style="text-align:center;">/</td><td style="text-align:center;">除</td><td style="text-align:center;">9/9</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">%</td><td style="text-align:center;">取模（取余）</td><td style="text-align:center;">11%9</td><td style="text-align:center;">2</td></tr><tr><td style="text-align:center;">++<br>++</td><td style="text-align:center;">自增(前)：先运算后取值<br>自增（后）：先取值后运算</td><td style="text-align:center;">a=2;b=++a;<br>a=2;b=a++;</td><td style="text-align:center;">a=3;b=3;<br>a=3;b=2;</td></tr><tr><td style="text-align:center;">--<br>--</td><td style="text-align:center;">自减（前）：前运算后取值<br>自减（后）：先取值后运算</td><td style="text-align:center;">a=2;b=--a;<br>a=2;b=a--;</td><td style="text-align:center;">a=1;b=1;<br>a=1;b=2;</td></tr><tr><td style="text-align:center;">+</td><td style="text-align:center;">字符串相加</td><td style="text-align:center;">&quot;hello&quot;+&quot;world&quot;</td><td style="text-align:center;">&quot;helloworld&quot;</td></tr></tbody></table><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符" aria-hidden="true">#</a> 关系运算符</h3><p>返回布尔值</p><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">运算</th><th style="text-align:center;">范例</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td style="text-align:center;">==</td><td style="text-align:center;">相等于</td><td style="text-align:center;">8==7</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">!=</td><td style="text-align:center;">不等于</td><td style="text-align:center;">8!=7</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">&lt;</td><td style="text-align:center;">大于</td><td style="text-align:center;">8&lt;7</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">&gt;</td><td style="text-align:center;">小于</td><td style="text-align:center;">8&gt;7</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">&lt;=</td><td style="text-align:center;">大于等于</td><td style="text-align:center;">8&lt;=7</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">&gt;=</td><td style="text-align:center;">小于等于</td><td style="text-align:center;">8&gt;=7</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">instanceof</td><td style="text-align:center;">检查是否是该类的对象</td><td style="text-align:center;">&quot;Hello&quot; instanceof String</td><td style="text-align:center;">true</td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><p>一般用于求证多个结果</p><table><thead><tr><th style="text-align:center;">a</th><th style="text-align:center;">b</th><th style="text-align:center;">a&amp;b</th><th style="text-align:center;">a&amp;&amp;b</th><th style="text-align:center;">a|b</th><th style="text-align:center;">a||b</th><th style="text-align:center;">!a</th><th style="text-align:center;">a^b</th></tr></thead><tbody><tr><td style="text-align:center;">true</td><td style="text-align:center;">true</td><td style="text-align:center;">true</td><td style="text-align:center;">true</td><td style="text-align:center;">true</td><td style="text-align:center;">true</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">true</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">true</td><td style="text-align:center;">true</td><td style="text-align:center;">false</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">false</td><td style="text-align:center;">true</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">true</td><td style="text-align:center;">true</td><td style="text-align:center;">true</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">true</td><td style="text-align:center;">false</td></tr></tbody></table><ol><li><code>a&amp;b</code>:<strong>&amp;叫逻辑与</strong>，规则：当a和b同时为true，则结果为true，否则为false</li><li><code>a&amp;&amp;b</code>: <strong>&amp;&amp; 叫短路与</strong>：规则：当a和b同时为true，则结果为true，否则为false</li><li><code>a|b</code>：<strong>|叫逻辑或</strong>，规则：当a和b中任意一个为true时，则结果为true，否则为false</li><li><code>a||b</code>：<strong>||叫短路或</strong>，规则：当a和b中任意一个为true时，则结果为true，否则为false</li><li><code>!a</code>：<strong>!表示取反</strong>，或者称之为非运算，规则：当a为true时，结果为false，当a为false时，结果为true</li><li><code>a^b</code>：^叫逻辑异或，当a和b不同时，则结果为true，否则为false</li></ol><p>通常情况下<code>a&amp;&amp;b</code>，<code>a||b</code>,<code>!a</code>用的比其他的多一些</p><h3 id="三元运算符" tabindex="-1"><a class="header-anchor" href="#三元运算符" aria-hidden="true">#</a> 三元运算符</h3><p>基本语法：<code>条件表达式？表达式1:表达式2</code></p><ol><li>如果条件表达是结果为true，则运行表达式1</li><li>如果条件表达式结果为false，则运行表达式2</li></ol><p>例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> _006Operator<span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> a <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> res <span class="token operator">=</span> a<span class="token operator">&gt;</span>b<span class="token operator">?</span><span class="token operator">++</span>a<span class="token operator">:</span><span class="token operator">--</span>b<span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出为98</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三元运算符特别注意点" tabindex="-1"><a class="header-anchor" href="#三元运算符特别注意点" aria-hidden="true">#</a> 三元运算符特别注意点</h2><p>使用三元运算符时，它自包含的区域算作一个整体，大概意思就是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果应该是什么，这时候可能线都不会想就答曰1吧...但是<code>true?1:2.0</code>这个在程序运行过程中是当做一个整体来看的，即：他这之中精度最高的是2.0（double），那么返回的数据类型也将是一个double，所以结果是1.0</p><p>这个特点对于所有的基本数据类型都有效(包含char byte short)</p><h3 id="运算符的优先级" tabindex="-1"><a class="header-anchor" href="#运算符的优先级" aria-hidden="true">#</a> 运算符的优先级</h3><table><thead><tr><th style="text-align:center;">优先度</th><th style="text-align:center;">运算顺序（L:Left;R:Right）</th><th style="text-align:center;">运算符列表</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">根据其内的内容决定</td><td style="text-align:center;">. () {} ; ,</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">R--&gt;L</td><td style="text-align:center;">* / %</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">L--&gt;R</td><td style="text-align:center;">+ -</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">L--&gt;R</td><td style="text-align:center;">&lt;&lt; &gt;&gt; &gt;&gt;&gt; 位移</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">L--&gt;R</td><td style="text-align:center;">&lt; &gt; &lt;= &gt;= instanceof</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">L--&gt;R</td><td style="text-align:center;">== !=</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;">L--&gt;R</td><td style="text-align:center;">&amp;</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">L--&gt;R</td><td style="text-align:center;">^</td></tr><tr><td style="text-align:center;">9</td><td style="text-align:center;">L--&gt;R</td><td style="text-align:center;">|</td></tr><tr><td style="text-align:center;">10</td><td style="text-align:center;">L--&gt;R</td><td style="text-align:center;">&amp;&amp;</td></tr><tr><td style="text-align:center;">11</td><td style="text-align:center;">L--&gt;R</td><td style="text-align:center;">||</td></tr><tr><td style="text-align:center;">12</td><td style="text-align:center;">L--&gt;R</td><td style="text-align:center;">? :</td></tr><tr><td style="text-align:center;">13</td><td style="text-align:center;">R--&gt;L</td><td style="text-align:center;">= *= /= %=</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">R--&gt;L</td><td style="text-align:center;">+= -= &lt;&lt;= &gt;&gt;=</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">R--&gt;L</td><td style="text-align:center;">&gt;&gt;&gt;= &amp;= ^= |=</td></tr></tbody></table><ul><li>上方未说明的运算符表示用的比较少，要用到了再百度</li></ul><h2 id="数据类型转换-比较重要" tabindex="-1"><a class="header-anchor" href="#数据类型转换-比较重要" aria-hidden="true">#</a> 数据类型转换（比较重要）</h2><p>Java中，数据类型转换分为自动类型转换和手动类型转换</p>`,33),w=n("p",null,"自动类型转换",-1),j=n("ul",null,[n("li",null,"当Java程序在进行赋值或者运算时，精度小的类型会自动转换为精度大的数据类型，这个就是自动数据类型转换"),n("li",null,"数据类型按精度（容量）大小排序为：")],-1),q=s(`<p>像下面这样定义是没问题的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> testTranslator1 <span class="token operator">=</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span> <span class="token comment">//ok</span>
<span class="token keyword">double</span> testTranslator2 <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span> <span class="token comment">//ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是在定义时<strong>精度大的类型无法转换为精度小的类型</strong>，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> testTranslator3 <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span><span class="token comment">//错误: 不兼容的类型: 从double转换到int可能会有损失</span>
<span class="token keyword">byte</span> testTranslator4 <span class="token operator">=</span><span class="token number">132456</span><span class="token punctuation">;</span><span class="token comment">//错误: 不兼容的类型: 从int转换到byte可能会有损失</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4),S=s(`<h3 id="自动类型转换的使用和细节" tabindex="-1"><a class="header-anchor" href="#自动类型转换的使用和细节" aria-hidden="true">#</a> 自动类型转换的使用和细节</h3><ol><li>有多种类型的数据混合运算时，系统会先<strong>自动将所有数据转换成容量最大的那种数据类型</strong>，然后在进行计算</li><li>当我们把精度（容量）大的数据类型赋值给精度小的数据类型会报错，<strong>反之就会进行自动类型转换</strong></li><li>[Byte，Short]和Char 之间<strong>不会</strong>相互自动转换</li><li>Byte Short Char他们三者可以进行运算的，在进行运算的时候会首先转换成int类型</li><li>Boolean类型不参与转换</li><li>自动提升原则：表达式结果的类型自动提升为 <strong>操作数中最大的类型</strong></li></ol><p>在实际使用（运算过程中），请按照上方表升序表来决定结果类型，例如:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">byte</span> testAdd1 <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> testAdd2 <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span> testAdd3 <span class="token operator">=</span>testAdd1<span class="token operator">+</span>testAdd2<span class="token punctuation">;</span> <span class="token comment">//错误: 不兼容的类型: 从int转换到byte可能会有损失</span>
<span class="token keyword">int</span> testAdd4 <span class="token operator">=</span>testAdd2<span class="token operator">+</span>testAdd1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="强制类型转换" tabindex="-1"><a class="header-anchor" href="#强制类型转换" aria-hidden="true">#</a> 强制类型转换</h3><p>可以这样来强制类型转换，<strong>但相对的可能会出现一些问题</strong>，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> testForce1<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1.9</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;n1=&quot;</span><span class="token operator">+</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// n1=1 造成了精度损失</span>

<span class="token keyword">int</span> testForce2 <span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>testForce3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//-48  造成了数据溢出</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除非有把握，不然别乱使用</p><ol><li><p>当数据的大小从<code>大---&gt;小</code>进行转换时，就需要使用到强制类型转换</p></li><li><p>强转符号只针对于最近操作的数据有效，往往会使用小括号提升优先级</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> x <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">0.35</span><span class="token operator">+</span><span class="token number">6</span><span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">;</span> <span class="token comment">//错误</span>
<span class="token keyword">int</span> y <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">0.35</span><span class="token operator">+</span><span class="token number">6</span><span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//正确</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Char 常量可以保存int 的常量值，但不能保存int 的变量值，需要强转</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span> c1 <span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> m <span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c2 <span class="token operator">=</span>m<span class="token punctuation">;</span><span class="token comment">// 报错</span>
<span class="token keyword">char</span> c3 <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>m<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">,</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Byte和Short类型在进行运算时，当作int类型处理</p></li></ol><figure><img src="`+u+`" alt="image-20211026001529258" tabindex="0" loading="lazy"><figcaption>image-20211026001529258</figcaption></figure><h3 id="基本数据类型和string类型的转换" tabindex="-1"><a class="header-anchor" href="#基本数据类型和string类型的转换" aria-hidden="true">#</a> 基本数据类型和String类型的转换</h3><ul><li><p>在程序开发中，我们经常需要将基本数据类型转换成String类型，或者将String类型转换成基本数据类型</p></li><li><p>基本类型转String类型</p><ul><li><p>语法：将基本类型的值+<code>&quot;&quot;</code>即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> n1 <span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> n2 <span class="token operator">=</span><span class="token number">1.1f</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> n3<span class="token operator">=</span><span class="token number">3.4</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> b1 <span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1<span class="token operator">+</span>str<span class="token operator">+</span>n2<span class="token operator">+</span>str<span class="token operator">+</span>n3<span class="token operator">+</span>str<span class="token operator">+</span>b1<span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出： 100 1.1 3.4 true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>String类型转基本数据类型</p><ul><li><p>语法：通过基本类型包装的ParseXX方法即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token string">&quot;12.11&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;123456.41&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Short</span><span class="token punctuation">.</span><span class="token function">parseShort</span><span class="token punctuation">(</span><span class="token string">&quot;12&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token function">parseByte</span><span class="token punctuation">(</span><span class="token string">&quot;12&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如何将字符串转换成字符Char？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span>&#39;<span class="token class-name">Hello</span> <span class="token class-name">World</span>&#39;<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">chatAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将H提出转换为Char</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h4 id="基本数据类型和string类型转换时的注意事项" tabindex="-1"><a class="header-anchor" href="#基本数据类型和string类型转换时的注意事项" aria-hidden="true">#</a> 基本数据类型和String类型转换时的注意事项</h4><ol><li>在将String类型转换成基本数据类型时，要确保String类型能够转换成有效的数据，<br> 比如：可以将”123“转换成一个整数，但是不能将”Hello123456“转换成一个整数</li><li>如果格式不正确，会抛出异常，程序就会终止，这个问题在后续《处理异常》中会处理</li></ol><h2 id="本章练习" tabindex="-1"><a class="header-anchor" href="#本章练习" aria-hidden="true">#</a> 本章练习</h2><ol><li><p>阅读程序，推测输出的值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * _005HomeWork.java
 * <span class="token keyword">@author</span> Amyakite
 * <span class="token keyword">@version</span> 0.0.1
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> _005HomeWork<span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> n1<span class="token punctuation">;</span>
  n1<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> n2<span class="token punctuation">;</span>
  n2<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> n3<span class="token punctuation">;</span>
  n3<span class="token operator">=</span>n1<span class="token operator">+</span>n2<span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;n3:&quot;</span><span class="token operator">+</span>n3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> n4<span class="token operator">=</span><span class="token number">38</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> n5<span class="token operator">=</span>n4<span class="token operator">-</span>n3<span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;n5:&quot;</span><span class="token operator">+</span>n5<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用char类型，分别保存\\n,\\t,\\r \\ 1 2 3 等字符，并打印</p></li><li><p>变成，保存两本数的名称，用+拼接，看看效果，保存两个性别，用加号拼接，看下哦vu哦，保存两本书的价格，用加号拼接，看效果</p></li><li><p>编程实现类似于Excel表格效果<br> 姓名 年龄 成绩 性别 爱好<br> XX XX XX XX XX</p><ol><li>要求用变量名将姓名 年龄 成绩 性别 爱好存储</li><li>使用+</li><li>添加适当的注释</li><li>添加转义符，用一条语句输出</li></ol></li></ol><blockquote><p>答</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * _005HomeWork.java
 * <span class="token keyword">@author</span> Amyakite
 * <span class="token keyword">@version</span> 0.0.1
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> _005HomeWork<span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> n1<span class="token punctuation">;</span>
  n1<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> n2<span class="token punctuation">;</span>
  n2<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> n3<span class="token punctuation">;</span>
  n3<span class="token operator">=</span>n1<span class="token operator">+</span>n2<span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;n3:&quot;</span><span class="token operator">+</span>n3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//30</span>
  <span class="token keyword">int</span> n4<span class="token operator">=</span><span class="token number">38</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> n5<span class="token operator">=</span>n4<span class="token operator">-</span>n3<span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;n5:&quot;</span><span class="token operator">+</span>n5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//8</span>

  <span class="token class-name">String</span> name <span class="token operator">=</span><span class="token string">&quot;Ay&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> age <span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
  <span class="token keyword">double</span> results <span class="token operator">=</span><span class="token number">60.1</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> hobby <span class="token operator">=</span> <span class="token string">&quot;敲代码&quot;</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> like <span class="token operator">=</span><span class="token string">&quot;睡觉&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> tab <span class="token operator">=</span><span class="token char">&#39;\\t&#39;</span><span class="token punctuation">;</span>

  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>

   <span class="token string">&quot;姓名\\t年龄\\t成绩\\t性别\\t爱好\\n&quot;</span><span class="token operator">+</span>
   name<span class="token operator">+</span>tab<span class="token operator">+</span>age<span class="token operator">+</span>tab<span class="token operator">+</span>results<span class="token operator">+</span>tab<span class="token operator">+</span>hobby<span class="token operator">+</span>tab<span class="token operator">+</span>like
   <span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18);function _(C,L){const e=l("Mermaid"),p=l("ExternalLinkIcon");return c(),i("div",null,[k,t(e,{id:"mermaid-15",code:"eJxLL0osyFDwCeLySixLfDZ1w7Pedc837n46r1tX185R4+n8Xc/mrEEW1sSm0Enj6Z6pz6esQFXoCJQBijxt2APkcsFZYNEtQC5U+9O1M55N2QcRsnKqLEk11AnOyC8qMdLxzCsx0fHJz0u3QNW9dd3zpp36Tzf0ww2xcsvJTwQqdskvTcpJtQBb/XTt9OdrlkG0OGckFhnpQGx62jv1yY5VEFmIwh3NTzdMgSiEs62c8vNzUhPzoJpCikpTddwSc4pTuZyAyoC2agCxc05icbEmWORZ39Kn/YuBLk4tSktMhqgCOW93CxcAD5C63g=="}),m,n("p",null,[n("a",v,[a("Java在线文档"),t(p)]),a("，建议是用这个，离线的目前网上能下到的JDK1.8的大部分都带有同一个人的广告。。。")]),b,n("ol",null,[g,n("li",null,[y,n("blockquote",null,[n("p",null,[a("扩展：ASCII是美国制定的只支持英文等等，够人家用，后来计算机全球兴起，文字符号众多，所以创建了unicode俗称万国码,非洲字都有 可以使用"),n("a",h,[a("这个"),t(p)]),a("工具来对Unicode进行转码")])])]),x]),f,n("ul",null,[n("li",null,[w,j,t(e,{id:"mermaid-1360",code:"eJxLL0osyFDwCeJ6unb68zXLnm/c/XRet66unXNGYpECkFbIzCsB0zn5eelgRlpOfiJEKCW/NCknlevZ1A1PG/bAdSZVlqQCqeKM/KISIA3UzwUAOjEoWA=="}),q])]),S])}const I=o(d,[["render",_],["__file","03-变量.html.vue"]]);export{I as default};
