import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c,a as n,b as s,d as t,e as a}from"./app-2d4b26c1.js";const l="/images/SpringBoot/04-Redis/image-20211222180739538.png",d="/images/SpringBoot/04-Redis/image-20211222180955536.png",r="/images/SpringBoot/04-Redis/image-20211222181014333.png",u="/images/SpringBoot/04-Redis/image-20211222181039767.png",k="/images/SpringBoot/04-Redis/image-20211222181103747.png",m="/images/SpringBoot/04-Redis/image-20211222181125028.png",v="/images/SpringBoot/04-Redis/image-20211222185303744.png",g="/images/SpringBoot/04-Redis/image-20211222212302018.png",b="/images/SpringBoot/04-Redis/image-20211222212647326.png",h="/images/SpringBoot/04-Redis/image-20211222214305623.png",f="/images/SpringBoot/04-Redis/image-20211222214454125.png",y="/images/SpringBoot/04-Redis/image-20211222224058143.png",x="/images/SpringBoot/04-Redis/image-20211222224449309.png",w="/images/SpringBoot/04-Redis/image-20211222224707303.png",_="/images/SpringBoot/04-Redis/image-20211223121745764.png",q="/images/SpringBoot/04-Redis/image-20211223122512138.png",R="/images/SpringBoot/04-Redis/image-20211223122638825.png",S="/images/SpringBoot/04-Redis/image-20211223123601860.png",j="/images/SpringBoot/04-Redis/image-20211223130858482.png",B="/images/SpringBoot/04-Redis/image-20211223130940379.png",z="/images/SpringBoot/04-Redis/image-20211223131115293.png",I="/images/SpringBoot/04-Redis/image-20211223170648151.png",C="/images/SpringBoot/04-Redis/image-20211223171156327.png",O="/images/SpringBoot/04-Redis/image-20211223173323095.png",T="/images/SpringBoot/04-Redis/image-20211223173848353.png",M="/images/SpringBoot/04-Redis/image-20211223174140887.png",L="/images/SpringBoot/04-Redis/image-20211223174257801.png",E="/images/SpringBoot/04-Redis/image-20211223180656571.png",F="/images/SpringBoot/04-Redis/image-20211223203804732.png",J="/images/SpringBoot/04-Redis/image-20211223205332078.png",K="/images/SpringBoot/04-Redis/image-20211223205700387.png",A="/images/SpringBoot/04-Redis/image-20211223210026383.png",P="/images/SpringBoot/04-Redis/image-20211224001053673.png",H="/images/SpringBoot/04-Redis/image-20211224001100549.png",D="/images/SpringBoot/04-Redis/image-20211224000756690.png",V="/images/SpringBoot/04-Redis/image-20211224000827544.png",$="/images/SpringBoot/04-Redis/image-20211224003705848.png",G="/images/SpringBoot/04-Redis/image-20211224194823610.png",N="/images/SpringBoot/04-Redis/image-20211224195019133.png",U="/images/SpringBoot/04-Redis/image-20211224200220578.png",X="/images/SpringBoot/04-Redis/image-20211224225758243.png",Z="/images/SpringBoot/04-Redis/image-20211224230003789.png",Q="/images/SpringBoot/04-Redis/image-20211224231121355.png",W="/images/SpringBoot/04-Redis/image-20211225122151292.png",Y="/images/SpringBoot/04-Redis/image-20211225122339629.png",nn="/images/SpringBoot/04-Redis/image-20211225132812624.png",sn={},an=a('<h1 id="redis-console" tabindex="-1"><a class="header-anchor" href="#redis-console" aria-hidden="true">#</a> Redis Console</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>这玩意 不太想多说是啥了</p><p>简单来说 就是一个在内存上的数据库，IO速度非常快~</p><p>属于NOSql：不仅仅有SQL</p><p>主要是做并发之类的用的</p><p>以及解决集群之间数据的共享问题</p><p>Nosql可以在百亿数据集达到毫秒级查询</p><figure><img src="'+l+'" alt="image-20211222180739538" tabindex="0" loading="lazy"><figcaption>image-20211222180739538</figcaption></figure><p>还可以减少sql压力之类的，例如查询到的结果存放到nosql中 以后别人要数据 如果nosql中有，直接在那里面拿</p><figure><img src="'+d+'" alt="image-20211222180955536" tabindex="0" loading="lazy"><figcaption>image-20211222180955536</figcaption></figure><figure><img src="'+r+'" alt="image-20211222181014333" tabindex="0" loading="lazy"><figcaption>image-20211222181014333</figcaption></figure><figure><img src="'+u+'" alt="image-20211222181039767" tabindex="0" loading="lazy"><figcaption>image-20211222181039767</figcaption></figure><figure><img src="'+k+'" alt="image-20211222181103747" tabindex="0" loading="lazy"><figcaption>image-20211222181103747</figcaption></figure><figure><img src="'+m+'" alt="image-20211222181125028" tabindex="0" loading="lazy"><figcaption>image-20211222181125028</figcaption></figure><p>顺带一提：Redis现在支持事务了</p><h2 id="安装redis" tabindex="-1"><a class="header-anchor" href="#安装redis" aria-hidden="true">#</a> 安装Redis</h2>',17),en={href:"https://blog.csdn.net/qq_24958783/article/details/107541425",target:"_blank",rel:"noopener noreferrer"},tn=a(`<p>我这里就不建议直接安了（维护蛮痛苦的），docker走起</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull redis:latest
<span class="token function">mkdir</span> .redis
<span class="token builtin class-name">cd</span> .redis
<span class="token function">touch</span> redis.conf
<span class="token function">vi</span> redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token comment">#bind 127.0.0.1 </span>
<span class="token comment">#注释掉这部分，这是限制redis只能本地访问</span>

protected-mode no 
<span class="token comment">#默认yes，开启保护模式，限制为本地访问</span>

daemonize no
<span class="token comment">#默认no，改为yes意为以守护进程方式启动，可后台运行，除非kill进程，改为yes会使配置文件方式启动redis失败</span>

databases 16 
<span class="token comment">#数据库个数（可选），我修改了这个只是查看是否生效。。</span>

dir  ./ 
<span class="token comment">#输入本地redis数据库存放文件夹（可选） 不动即可</span>

appendonly yes 
<span class="token comment">#redis持久化（可选）</span>

requirepass  密码 
<span class="token comment">#配置redis访问密码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">--name</span> redis <span class="token parameter variable">-v</span> /home/你的用户名/.redis/redis.conf:/etc/redis/redis.conf <span class="token parameter variable">-v</span> /home/你的用户名/.redis/data/:/data  redis redis-server /etc/redis/redis.conf <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着连接</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> redis <span class="token function">bash</span>
redis-cli
auth  刚刚设置的密码，按下回车后显示OK即可
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就可以了 如果说启动后 docker ps 没有的话 就<code>docke logs redis</code>看下是哪里配置锁了</p><p>Redis的底层是单线程+多路IO复用 就有点像是JavaScript的async await 异步操作那样</p><figure><img src="`+v+'" alt="image-20211222185303744" tabindex="0" loading="lazy"><figcaption>image-20211222185303744</figcaption></figure><h2 id="redis的基本使用" tabindex="-1"><a class="header-anchor" href="#redis的基本使用" aria-hidden="true">#</a> Redis的基本使用</h2><p>假设你现在已经进入了redis-cli，并且完成了用户验证之类的（如果没有设置密码可以不要验证，在服务器上用的话务必得使用用户验证 不然之后端口已开分分钟被别人注虫）</p><h2 id="✨基本的操作" tabindex="-1"><a class="header-anchor" href="#✨基本的操作" aria-hidden="true">#</a> ✨基本的操作</h2><table><thead><tr><th>键</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td><code>set key value</code></td><td>插入key-value键值对<br>如果是重复插入相同的，则覆盖之前的</td><td><code>set k1 张三</code></td></tr><tr><td><code>setnx key value</code></td><td>插入key-value键值对<br>只有key不存在时，才会插入<br>否则将啥都不会变</td><td></td></tr><tr><td><code>mest k1 v1 k2 v2....</code></td><td>批量插入/设置键值对 以空格分隔</td><td></td></tr><tr><td><code>mget k1 k2 k3..</code></td><td>批量通过key获取其对应value的值 以空格分隔</td><td></td></tr><tr><td><code>mestnx k1 v1 k2 v2....</code></td><td>批量插入/设置键值对<br>如果有的key已经存在，则全部都不会插入成功<br>只有当全部key原本都不存在的时候，才能插入成功<br>原子性：有一个失败则都失败</td><td></td></tr><tr><td><code>get key</code></td><td>通过key查询对应value</td><td><code>get k1</code></td></tr><tr><td><code>getset key value</code></td><td>获取到值的同时替换原本的值<br>返回原本的值</td><td></td></tr><tr><td><code>incr key</code></td><td>只对数值类型的value有效<br>让其++（自增1）<br>这个和下面的几个都是原子性操作<br>原子性操作之后有说</td><td></td></tr><tr><td><code>decr key</code></td><td>同上，不过是--（自减1）</td><td></td></tr><tr><td><code>incrby key number</code></td><td>将key中存储的数字按照number值进行增加<br>number由你来决定</td><td></td></tr><tr><td><code>decrby key number</code></td><td>同上</td><td></td></tr><tr><td><code>append key value</code></td><td>在指定的key后面加上指定的value<br>返回追加完毕后的长度<br>（如果key不存在，则会创建新的key）</td><td><code>append k1 123</code></td></tr><tr><td><code>getrange &lt;key&gt; &lt;起始位置&gt; &lt;结束位置&gt;</code></td><td>获取值的范围，类似于Java中的substring<br>index从0开始技算，<strong>包含</strong>结束位置<br>例如0,3，返回前四个</td><td><code>set username lucymary</code><br><code>GETRANGE username 0 3</code><br>结果:lucy</td></tr><tr><td><code>setrange &lt;key&gt; &lt;起始位置&gt; value</code></td><td>基本同上 替换从指定范围起的值<br>注意 也是从0开始计数的</td><td></td></tr><tr><td><code>keys *</code></td><td>查看当前库的所有key(匹配：<code>keys *1</code>)</td><td><code>keys k1</code><br><code>keys *1</code><br><code>kes *</code></td></tr><tr><td><code>exists key</code></td><td>判断某个key是否存在</td><td></td></tr><tr><td><code>type key</code></td><td>查看指定的key是什么类型</td><td></td></tr><tr><td><code>del key</code></td><td>根据key删除指定的key-value对</td><td></td></tr><tr><td><code>unlink key</code></td><td>根据<code>value</code>选择非阻塞删除指定的key-value对<br>也就是仅将<code>key</code>从<code>keyspace</code>元数据中删除<br>真正的删除会在后续异步操作<br>（正在使用的人依旧可以正常使用）</td><td></td></tr><tr><td><code>expire key time</code></td><td>为给定的key设置过期时间，单位为秒</td><td><code>exprie key k1 10</code></td></tr><tr><td><code>settx key 过期时间 value</code></td><td>创建key-value的时候指定过期时间</td><td></td></tr><tr><td><code>ttl key</code></td><td>查看key还有多少秒过期<br>-1表示永不过期<br>-2表示已过期</td><td></td></tr><tr><td><code>select index</code></td><td>切换数据库<br>默认是0号数据库 可以自由传入数值 进入指定的数据库</td><td><code>select 1</code><br><code>select 0</code></td></tr><tr><td><code>dbsize</code></td><td>查看当前数据库key的数量（不统计已过时的）</td><td></td></tr><tr><td><code>flushdb</code></td><td>清空当前库的所有数据</td><td></td></tr><tr><td><code>flushall</code></td><td>删库跑路~清空全部数据库</td><td></td></tr></tbody></table><h3 id="原子性操作" tabindex="-1"><a class="header-anchor" href="#原子性操作" aria-hidden="true">#</a> 原子性操作</h3><p>所谓原子性操作就是指不回被线程调度机制打断的操作</p><p>这个操作一旦开始，就一直运行到结束，中间不会有任何context switch（切换另一个线程）</p><ul><li>在单线程中，能够在单条指令中完成的操作都可以被认为是<code>原子操作</code>，因为中断只能发生于指令之间</li><li>在多线程中，不能被其他进程（线程）打断的操作就叫原子性操作<br> 比方说Java中的i++就不是原子性操作（geti,i=i+1）</li></ul><p>Redis单命令的原子性主要得益于Redis的单线程</p><h2 id="string字符串" tabindex="-1"><a class="header-anchor" href="#string字符串" aria-hidden="true">#</a> String字符串</h2><blockquote><p>String是Redis最基本的类型</p><p>是<strong>二进制安全</strong>的，Redis的String可以包含任何数据，比如jpg图片或者<strong>序列化对象</strong></p><p>String类型是Redis最基本的数据类型，一个Redis中字符串的<strong>value</strong>最多是<strong>512MB</strong></p></blockquote><p>额外说明：<code>Key</code>始终是字符串类型</p><p>redis中的key对应string类型的value</p><p>就像是Java中的<code>new HashMap&lt;String,String&gt;</code>一样</p><h4 id="字符串的底层结构" tabindex="-1"><a class="header-anchor" href="#字符串的底层结构" aria-hidden="true">#</a> 字符串的底层结构</h4><p>​String的数据结构为简单的动态字符串(Simple Dynamic String ，SDS)是可以修改的字符串，内部结构实现上类似于Java的ArrayList，才用预分配冗余空间的方式来减少内存的频繁分配</p><figure><img src="'+g+'" alt="image-20211222212302018" tabindex="0" loading="lazy"><figcaption>image-20211222212302018</figcaption></figure><p>如上图所示，内部为当前实际分配的空间capacity，一般要高于实际字符串长度len</p><p>当字符串长度小于1MB时，扩容都是加倍现有空间，如果超过1MB，扩容一次只会增加1MB的空间</p><p>字符串的最大长度是512MB</p><h2 id="list列表" tabindex="-1"><a class="header-anchor" href="#list列表" aria-hidden="true">#</a> List列表</h2><p>Redis的列表是简单的字符串列表，按照插入顺序排序</p><p>我们可以自由的添加一个元素到列表的头部或者尾部</p><p>它的底层实际上是一个<strong>双向链表</strong>，对两端的操作性能很高，通过索引下标操作中间的节点性能会比较差</p><figure><img src="'+b+'" alt="image-20211222212647326" tabindex="0" loading="lazy"><figcaption>image-20211222212647326</figcaption></figure><h3 id="✨列表的常用操作" tabindex="-1"><a class="header-anchor" href="#✨列表的常用操作" aria-hidden="true">#</a> ✨列表的常用操作</h3><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>lpush key v1 v2 v3...</code></td><td style="text-align:left;">创建一个列表，并且从左往右的放值<br>可以放任意数量的value，第一个为key</td></tr><tr><td style="text-align:center;"><code>lrange key startIndex endIndex</code></td><td style="text-align:left;">从左往右的读取列表的数据<br>可以键入<code>0 -1</code> 获取一个列表的所有值</td></tr><tr><td style="text-align:center;"><code>rpush key value....</code></td><td style="text-align:left;">同第一个，但顺序是从右往左</td></tr><tr><td style="text-align:center;"><code>lpop/rpop key [count 可选]</code></td><td style="text-align:left;">从列表中取出一个值（同时列表中会删除该值）<br>可以通过指定count来指定要取出的数量<br>如果说一个列表中的值没了 这个列表也没了</td></tr><tr><td style="text-align:center;"><code>rpoplpush key1 key2</code></td><td style="text-align:left;">从key1 列表的最右边取出一个值<br>插入到key2列表的最左边<br>也就是将key1列表的最开始插入的值<br>取出放到key2列表的末尾</td></tr><tr><td style="text-align:center;"><code>lindex key index</code></td><td style="text-align:left;">根据指定下标获取到相应的元素<br>注意 这里获取元素时从左到右获取的<br>也就是说 第一个插入的元素在index -1<br>最后一个插入的元素在 index 0</td></tr><tr><td style="text-align:center;"><code>llen key</code></td><td style="text-align:left;">获取列表的长度</td></tr><tr><td style="text-align:center;"><code>linsert &lt;key&gt; before &lt;value &gt; &lt;new value&gt;</code></td><td style="text-align:left;">在<code>key</code>中指定的<code>value</code>的后面插入<code>newValue</code>的值<br>before可以换成after 换成after后就变成了前面插入</td></tr><tr><td style="text-align:center;"><code>lrem &lt;key&gt; &lt;n&gt; &lt;value&gt;</code></td><td style="text-align:left;">从左到右删除n个指定的value<br>最后插入的优先删除</td></tr><tr><td style="text-align:center;"><code>lset &lt;key&gt; &lt;index&gt; &lt;value&gt;</code></td><td style="text-align:left;">将列表key下标为index的值替换成value</td></tr></tbody></table><p>需要额外注意的是：列表读取是先进后出</p><p>例如我们从左往右放</p><ul><li>第一次:放了v1， 列表的结构：<code>v1</code></li><li>第二次 V2 列表的结构：<code>v2 v1</code></li><li>第三次 v3 结构：<code>v3 v2 v1</code></li><li>所以当你从左往右读取的时候 会先读取到v3 然后v2 最后 v1</li></ul><p>举个例子：</p><figure><img src="'+h+'" alt="image-20211222214305623" tabindex="0" loading="lazy"><figcaption>image-20211222214305623</figcaption></figure><p>创建一个从左往右的列表，从左往右的读取 能发现第一个读取到的是最后插入的值</p><figure><img src="'+f+'" alt="image-20211222214454125" tabindex="0" loading="lazy"><figcaption>image-20211222214454125</figcaption></figure><p>但如果从右往左插入的表，那么得到的顺序将会按照我们插入的顺序来走</p><h2 id="set集合" tabindex="-1"><a class="header-anchor" href="#set集合" aria-hidden="true">#</a> Set集合</h2><p>​Redis的Set对外停的功能和list差不多，特殊的地方是这玩意可以<strong>自动重排</strong>，当我们需要存储一个列表的数据，但又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list没有的</p><p>​Redis的Set是String类型的<strong>无序集合</strong>，它底层是一个value为null的Hash表（底层应该跟Java的HashSet差不多），所以增删改的复杂度都是<code>O(1)</code></p><p>一个算法， 随着数据的增加，执行时间的长短，如果是<code>O(1)</code>数据增加，查找数据的时间不变</p><h3 id="✨set集合的基本操作" tabindex="-1"><a class="header-anchor" href="#✨set集合的基本操作" aria-hidden="true">#</a> ✨Set集合的基本操作</h3><table><thead><tr><th style="text-align:center;">命令</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>sadd key value1 value2...</code></td><td>将一个或者多个元素添加到set集合中<br>如果元素已存在将会被忽略</td></tr><tr><td style="text-align:center;"><code>smembers key</code></td><td>取出该集合的所有值</td></tr><tr><td style="text-align:center;"><code>smember key value</code></td><td>判断集合中是否含有指定value的值<br>如果有返回1，没有返回0</td></tr><tr><td style="text-align:center;"><code>scard key</code></td><td>返回该集合的元素个数</td></tr><tr><td style="text-align:center;"><code>srem key value1 value2...</code></td><td>删除集合中的某个元素 可以删除多个</td></tr><tr><td style="text-align:center;"><code>sopo key [count]</code></td><td><strong>随机</strong>从该集合中吐出一个值<br>注意 该值被吐出后将会被删除<br>可以指定count吐出多个值 <br>这个一般用于发牌或者抽奖之类的功能</td></tr><tr><td style="text-align:center;"><code>smove &lt;source&gt; &lt;destination&gt; value</code></td><td>把集合<strong>source</strong>中的一个<code>value</code>取出移动到<strong>destination</strong>集合中</td></tr><tr><td style="text-align:center;"><code>sinter key1 key2</code></td><td>取出两个集合中<strong>交集</strong>(相同的)的元素</td></tr><tr><td style="text-align:center;"><code>sunion key1 key2</code></td><td>返回两个集合中<strong>并集</strong>(就相当于是两个集合一块给你)的元素</td></tr><tr><td style="text-align:center;"><code>sdiff key1 key2</code></td><td>返回两个集合中<strong>差集</strong>的元素<br>(key1有但是key2没有的元素)</td></tr></tbody></table><h2 id="hash-键值对" tabindex="-1"><a class="header-anchor" href="#hash-键值对" aria-hidden="true">#</a> Hash（键值对）</h2><p>Redis Hash是一个键值对的集合</p><p>Redis Hash是一个String类型的<code>field</code>和<code>value</code>映射表</p><p>Hash特别适合用于存储对象，类似于Java的<code>Map&lt;String,Object&gt;</code></p><figure><img src="'+y+'" alt="image-20211222224058143" tabindex="0" loading="lazy"><figcaption>image-20211222224058143</figcaption></figure><p>用户ID为查找的key，存储的value包含性别、年龄、生日等信息，如果用普通的key-value来保存的话：</p><figure><img src="'+x+'" alt="image-20211222224449309" tabindex="0" loading="lazy"><figcaption>image-20211222224449309</figcaption></figure><p>可以非常直观的感受到这样不太行 当然我们也可以尝试使用Java的序列化存储，但是那样的话可视性、读取反射生成跟第一种的区别其实不大</p><p>所以就可以用到Hash 结构如下</p><figure><img src="'+w+'" alt="image-20211222224707303" tabindex="0" loading="lazy"><figcaption>image-20211222224707303</figcaption></figure><h3 id="✨hash的常用命令" tabindex="-1"><a class="header-anchor" href="#✨hash的常用命令" aria-hidden="true">#</a> ✨Hash的常用命令</h3><table><thead><tr><th>命令</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>hset &lt;key&gt; &lt;field&gt; &lt;value&gt;</code></td><td>给key这个集合中，field字段赋值value</td><td><code>hset user_1001 name jock</code></td></tr><tr><td><code>hget key filed</code></td><td>从指定集合中取出指定的字段</td><td><code>hget user_1001 name</code></td></tr><tr><td><code>hmset key &lt;f1&gt; &lt;v1&gt; &lt;f2&gt; &lt;v2&gt;</code></td><td>批量设置指定字段的值<br>目前已经被官方弃用<br>使用hset也能达到同样的效果</td><td></td></tr><tr><td><code>hexists key field</code></td><td>查看指定的表中，给定的字段的值是否存在<br>存在返回1 不存在返回0</td><td></td></tr><tr><td><code>hkeys key</code></td><td>查看一个表中所有的<strong>字段名</strong></td><td></td></tr><tr><td><code>hvals key</code></td><td>查看一个表中所有的<strong>value</strong></td><td></td></tr><tr><td><code>hincrby key filed count</code></td><td>将表中指定的字段增加count（数值）<br>例如给一个人的年龄+10<br><code>hincrby userxxx age 10</code></td><td></td></tr><tr><td><code>hsetnx key field value</code></td><td>将哈希表key中的filed的值设置为value<br>这个操作只能在当前map中没有指定的filed时生效<br>也就是当filed字段存在的时候，将什么都不会发生<br>返回一个数值 为0 设置失败<br>为1 设置成功</td><td></td></tr></tbody></table><h3 id="hash的数据结构" tabindex="-1"><a class="header-anchor" href="#hash的数据结构" aria-hidden="true">#</a> Hash的数据结构</h3><p>​这玩意有两种数据结构</p><p>​zipList 当你的数据比较少的使用用这个</p><p>​hashTable 数据有点多的时候用这个</p><h2 id="zset-有序集合" tabindex="-1"><a class="header-anchor" href="#zset-有序集合" aria-hidden="true">#</a> Zset(有序集合)</h2><p>​这玩意和普通的set长得差不多，也是没有重复元素的字符串集合</p><p>​不同的地方是，有序集合的每个成员都关联了一个评分(score)，这个评分被用来按照最低到最高分的方式排序集合中的成员，集合的成员是唯一的，但是评分可以是重复的</p><p>​因为元素是有序的，所以可以很快的根据评分(sorce)或者次序(position)来获取一个范围的元素</p><p>​访问有序集合的中间元素也是非常快的，因此能够将一个有序集合作为一个没有重复成员的智能列表来使用</p><h3 id="✨zset常用命令" tabindex="-1"><a class="header-anchor" href="#✨zset常用命令" aria-hidden="true">#</a> ✨Zset常用命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>zadd key sroce1 value1 sroce2 value2...</code></td><td>将一个或者多个member元素以及它的sroce值加入到有序的key当中<br>例如<br><code>zadd topLanager 200 Java 300 C++ 400 Python 500 Javascript</code></td></tr><tr><td><code>zrange key startIndex endIndex [WITHSCORES] [limit offset count]</code></td><td>取出一个ZSet的指定元素，传入0 -1 取出所有元素<br>元素将按照排名进行排序<br>WITHSCORES属性是一个可选的值：<br>带上他可以让分数一起返回到结果集<br>结果集的顺序将为：<br>[0]value? [1]sroce1 [2]value? [3] sroce2...</td></tr><tr><td><code>zrangebyscore key minNumber maxNumber [WITHSCORES][limit offset count]</code></td><td>返回有序集key中，所有的score值基于min和max之间（包括他们两）的所有成员<br>按照score的值递增（从小到大排列</td></tr><tr><td><code>zrevrangebyscore xxxxx</code></td><td>同上 不过是冲大到小排序</td></tr><tr><td><code>zincrby key count value</code></td><td>为指定的value的score增加指定的值</td></tr><tr><td><code>zrem key value</code></td><td>删除指定的元素</td></tr><tr><td><code>zcount key min max</code></td><td>统计该集合分数区间的元素个数，返回一个number</td></tr><tr><td><code>zrank key value</code></td><td>返回指定值在集合中的排名，从0开始<br>0是最大的</td></tr></tbody></table><h2 id="✨redis配置文件-基本配置" tabindex="-1"><a class="header-anchor" href="#✨redis配置文件-基本配置" aria-hidden="true">#</a> ✨Redis配置文件-基本配置</h2><table><thead><tr><th>配置项</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>bind</td><td>可以在什么地方连接<br>设置成0.0.0.0 支持任何地方连接</td><td>127.0.0.1 只能接收本机访问</td></tr><tr><td>protected-mode</td><td>是否开启保护模式<br>开启保护模式后只能通过本机访问<br>不能通过远程访问</td><td>默认值yes 可以改成no让远程可以访问</td></tr><tr><td>port</td><td>端口号</td><td>6379</td></tr><tr><td>tcp-backlog</td><td>允许最大未完成TCP三次握手和完成三次握手队列的数量总和</td><td>默认是511，如果要追求高并发这个值可以改为更多</td></tr><tr><td>timeout</td><td>连接上后多长时间不操作会自动断开连接</td><td>默认是0--用不超时可以穿入以秒为单位，例如600</td></tr><tr><td>tcp-keepalive</td><td>连接上Redis之后每隔指定秒数检测心跳<br>（是否有在操作，如果没有在操作则断开连接）</td><td>默认值是300，每隔300s检查一次心跳</td></tr><tr><td>daemonize</td><td>Redis是否可以后台启动</td><td>默认no，改成yes才可以后台启动</td></tr><tr><td>pidfile</td><td>指定文件夹，每次redis操作会将操作的内容放置到指定的文件内</td><td>这个根据心情设置 传入相对路径或者绝对路径都可</td></tr><tr><td>loglevel</td><td>日志的级别<br>debug 开启这个能看到更详细的日志<br>verbose 类似于Java中的Info<br>notice 这个一般用于生产环境中<br>warning 只显示一些有用的或者重要的信息</td><td>默认值时notice</td></tr><tr><td>logfile</td><td>设置日志的输出文件路径，可以指定相对路径或者绝对路径</td><td>默认为空 可以设置到 例如/dev/redis文件夹中</td></tr><tr><td>databases</td><td>设置redis有多少个数据库</td><td>默认是16</td></tr><tr><td>requirepass</td><td>设置连接redis的密码<br>redis默认是不需要密码就可以访问的<br>通常情况下一定要设置密码<br><strong>设置的密码建议使用随机生成的超过256位的</strong></td><td>默认没有密码<br>可以通过<code>requirepass 密码</code>设置<br>设置完毕后连接时需要通过<code>auth 密码</code>来提供密码进行登陆</td></tr><tr><td>maxclients</td><td>设置redis可以和多少个客户端进行连接<br>如果达到了设置的数量，redis会拒绝新的连接请求<br>并向这些连接方发出max number of clients reached作为回应</td><td>默认值是10000，即可以同时和1W个客户端进行连接</td></tr><tr><td>maxmomory</td><td>设置Redis使用的内存量，一旦使用量达到上限，redis将会试图移除内部数据<br>移除规则可以通过<code>maxmemory-policy</code>指定<br>通常建议设置</td><td>默认是0<br>可以按照如下方式书写<br>maxmemory 1048576 <br>maxmemory 1048576B<br> maxmemory 1000KB <br>maxmemory 100MB <br>maxmemory 1GB <br>maxmemory 1000K maxmemory 100M <br>maxmemory 1G</td></tr><tr><td>maxmemory-policy</td><td>设置当内存满的时候如何移除内部数据<br>volaie-lru 使用LRU算法移除key，只对设置了过期时间的键管用<br>allkeys-lru 在所有集合key中，使用LRU算法移除key<br>valatie-radom，在过期的集合中随机移除随机的key<br>allkeys-random 在所有集合的key中 移除随机的key<br>volatile-ttl 移除那些TTL值最小的key，也就是临近过期的key<br>noeviction 不进行移除，针对写操作返回错误信息</td><td>volatile-lru</td></tr><tr><td>maxmemory-samples</td><td>设置样本数量，LRU算法和最小TTL都并非算是精确的算法，而是估算值，所以可以设置样本的大小<br>redis会默认检查指定数量的key并选择其中LRU的那个<br>一般设置3~7的数字，数字越小样本越不准确，但是性能消耗越小</td><td>3<br>这玩意就类似于抽样一样，比如有10000个商品 抽取出三个商品就算合格</td></tr></tbody></table><h2 id="redis的发布和订阅" tabindex="-1"><a class="header-anchor" href="#redis的发布和订阅" aria-hidden="true">#</a> Redis的发布和订阅</h2><p>​Redis发布订阅(puh/sub)是一种消息通信模式，发送者(pub)发送消息，订阅者(sub)接收消息</p><p>​Redis客户端可以订阅任意数量的频道</p><figure><img src="'+_+`" alt="image-20211223121745764" tabindex="0" loading="lazy"><figcaption>image-20211223121745764</figcaption></figure><h3 id="用redis实现一个简单的消息订阅" tabindex="-1"><a class="header-anchor" href="#用redis实现一个简单的消息订阅" aria-hidden="true">#</a> 用Redis实现一个简单的消息订阅</h3><p>​实际生产过程中，这个玩意用的比较少</p><p>我们打开两个console，分别都连接上<code>redis-cli</code></p><p>Console1 接收者</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>SUBSCRIBE MessageChannel_01
<span class="token comment"># SUBSCRIBE 订阅一个频道 MessageChannel_01是频道名称 注意 订阅后除非自己手动退出 不然这个连接就始终在接收这个频道的数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+q+`" alt="image-20211223122512138" tabindex="0" loading="lazy"><figcaption>image-20211223122512138</figcaption></figure><p>Console2 发送者</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>publish MessageChannel_01 Hello
<span class="token comment"># publish 发送消息  MessageChannel_01 频道名  Hello 消息内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>发送完毕后返回一个integer 为接收者的数量，如果没有任何人接收返回0</p><p>接着在console1内可以发现接收到了Hello</p><figure><img src="`+R+'" alt="image-20211223122638825" tabindex="0" loading="lazy"><figcaption>image-20211223122638825</figcaption></figure><p>注意：发布的消息没有持久化，如果在订阅的客户端收不到Hello，只能收到订阅后发布的消息</p><p>当让 可以退订 不过这玩意基本用不上 Java有更好的替代品 这个之后会说--rabbitmq</p><h2 id="redis6的新数据类型" tabindex="-1"><a class="header-anchor" href="#redis6的新数据类型" aria-hidden="true">#</a> Redis6的新数据类型</h2><h3 id="bitmaps" tabindex="-1"><a class="header-anchor" href="#bitmaps" aria-hidden="true">#</a> Bitmaps</h3><p>这个类型主要是可以来操作二进制数据（0101010这种）</p><ul><li>BitMaps本身不是一种数据类型，实际上它就是字符串<code>key-value</code>，但是它可以对字符串进行位操作</li><li>bitMaps提供了一套命令，所以可以在redis中使用bitMaps和使用字符串的方法不太一样</li><li>可以把bitmaps想象成一个以位为单位的数组，数组的每个单元只能存储0和1，数组的下标在Bitmaps中叫做偏移量</li></ul><p>实例：每个独立用户是否访问过网站存放在BitMaps中，访问的用户将被计数位1，没有范围的技数为0，用户偏移量作为用户的ID</p><p>设置键的offset个位的值（从0算起），假设现在有20个用户，userid=1，6,11,15,19的用户对网站进行了访问，那么当前BitMaps的初始化结果是</p><figure><img src="'+S+'" alt="image-20211223123601860" tabindex="0" loading="lazy"><figcaption>image-20211223123601860</figcaption></figure><p>注意：很多用户的id以指定一个数值（例如10000开头）直接将用户的bitmaps的偏移量对应一定会造成浪费，通常的做法是每次<code>setbit</code>操作时将用户id减去这个指定的数字</p><p>在第一次初始化bitMap时，假如偏移量非常大，那么整个初始化过程将会比较慢，可能会造成Redis的阻塞</p><h3 id="✨bitmaps的指令" tabindex="-1"><a class="header-anchor" href="#✨bitmaps的指令" aria-hidden="true">#</a> ✨bitMaps的指令</h3><table><thead><tr><th>指令</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td><code>setbit key index count</code></td><td>设置一个bit对象，并且将index位置的值设置为count</td><td><code>setbit users_10001 1 1</code><br>这里是将这个users_10001偏移量为1的位置的值设置为1<br>也可以：<code>setbit users_10001 18 1</code></td></tr><tr><td><code>getbit key index</code></td><td>获取一个bit对象指定index位置的值</td><td><code>getbit users_10001 1</code><br>结果：1<br><code>getbit users_10001 18</code><br>结果：1<br><code>getbit users_10001 66</code><br>结果：0</td></tr><tr><td><code>bitcount key</code></td><td>统计指定key中被设置为1的index的总数</td><td><code>bitcount users_10001</code><br>结果：2</td></tr><tr><td></td><td>bitcoun还可以传入start 和end筛选<br>这个建议用了去查博客<br>稍微有点复杂<br>设置是按位，统计数量按字节，一个字节是八位</td><td></td></tr><tr><td><code>bitop &lt;and/or/not/xor&gt; destkey key1,key2...</code></td><td>对一个或多个保存二进制位的字符串key进行位元操作，并将结果保存到destkey上</td><td></td></tr><tr><td></td><td>例子：<br><code>setbit user1 1 1</code><br>然后2 3 4 分别也设置为1<br><code>setbit user2 3 1</code><br>user2 只有3是1<br>接下来整合，使用user3接收<br><code>BITOP and user3 user1 user2</code><br>然后获取user3的index=3的值<br><code>getbit user3 3</code><br>结果;1</td><td></td></tr></tbody></table><h3 id="bitmaps和set的对比" tabindex="-1"><a class="header-anchor" href="#bitmaps和set的对比" aria-hidden="true">#</a> BitMaps和set的对比</h3><p>假设网站有1e个用户，每天独立访问5kw，如果每天用集合类型和bitmaps分别存储活跃用户可以得到表</p><figure><img src="'+j+'" alt="image-20211223130858482" tabindex="0" loading="lazy"><figcaption>image-20211223130858482</figcaption></figure><p>很明显，这种情况下使用BitMaps能节省很多的空间，尤其是随着时间推移节省内存还是比较可观的</p><figure><img src="'+B+'" alt="image-20211223130940379" tabindex="0" loading="lazy"><figcaption>image-20211223130940379</figcaption></figure><p>但BitMaps并不是万金油，假如网站每天的独立访问用户量很少，例如只有10万（大量的僵尸用户），那么两者的对比如下所示，很显然这个时候用bitmaps就不太合适了，因为基本上大部分位都是0</p><figure><img src="'+z+`" alt="image-20211223131115293" tabindex="0" loading="lazy"><figcaption>image-20211223131115293</figcaption></figure><h3 id="hyperloglog" tabindex="-1"><a class="header-anchor" href="#hyperloglog" aria-hidden="true">#</a> HyperLoglog</h3><p>​在工作当中，我们经常会遇到与统计相关的功能需求，例如统计网站PV（PageView页面访问量）可以使用redis的<code>incr</code>/<code>incrby</code>实现</p><p>​但是像UV（UniqueVistor，独立访客）、独立IP数，搜索记录数等需要去重和计数的问题该如何解决，这种求集合中不重复元素个数的问题被称为基数问题</p><p>解决基数问题有很多种方案：</p><ol><li>数据存储在Mysql表中，使用<code>distinct count</code>计算不重复个数</li><li>使用Redis提供的<code>hash</code>、<code>set</code>、<code>bitmaps</code>等表数据结构来处理</li></ol><p>以上的方案结果准确，但是随着数据不断的增加，导致占用空间也来越大，对于非常大的数据集是不切实际的</p><p>​所以Redis推出了HyperLoglog</p><p>​这是用来做统计基数的算法</p><ul><li>优点：在输入元素的数量或者体积非常大的时候，计算基数的空间是固定的，并且是很小的</li></ul><p>在Redis里面，每个HypeLoglog键只需要花费12kb的内存，就可以计算接近2^64个不同元素的基数</p><p>这和计算基数时，元素越多耗费的内存就越多的集合形成鲜明的对比</p><p>​但是：因为HyperLoglog只会根据输入元素来计算基数，而不会存储输入元素本身，所以HyperLoglog不能像集合那样，返回输入的各个元素</p><h3 id="✨hyperloglog的使用" tabindex="-1"><a class="header-anchor" href="#✨hyperloglog的使用" aria-hidden="true">#</a> ✨HyperLoglog的使用</h3><table><thead><tr><th>命令</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>pfadd key elemnt [element...]</code></td><td>添加指定的元素(element)到HyperLoglog中</td><td><code>pfadd program java</code><br><code>pfadd program java c++</code></td></tr><tr><td><code>pfcount key</code></td><td>统计这个key中所包含的元素个数，返回总元素数量</td><td><code>pfcount program</code><br>返回值：2</td></tr><tr><td><code>pfmerge dest k1 k2 ...</code></td><td>将一个或者多个HyperLoglog合并存放到dest中</td><td><code>pfadd k1 a b</code><br><code>pfadd k2 a b c d</code><br><code>pfmerge k100 k1 k2</code><br>此时k100的count=4</td></tr></tbody></table><h3 id="geospatial" tabindex="-1"><a class="header-anchor" href="#geospatial" aria-hidden="true">#</a> Geospatial</h3><p>​这玩意是拿来存储地理信息的</p><p>​存放元素的二维坐标</p><p>​redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度hash等常见操作</p><p>​这玩意简称GEO</p><h3 id="✨geo的使用" tabindex="-1"><a class="header-anchor" href="#✨geo的使用" aria-hidden="true">#</a> ✨Geo的使用</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>geoadd key {longitude latiude member}...</code></td><td>添加地理位置 进度 维度 名称 可以添加多个<br>如：<br><code>geoadd china_city 121.47 31.23 ShangHai</code><br>添加多个：<br><code>geoadd china_city 106.50 29.53 Chongqing 114.05 22.52 ShenZhen 116.38 39.90 BeiJing</code><br>注意：两级（北极南极）无法添加，一般会下载城市数据，直接通过Java程序一次性导入<br>有效的经纬度：<br>经度：-180~180<br>纬度：-85.05112878~85.05112878<br>当坐标位置超出指定范围时，该命令将返回一个错误<br>已经添加的数据，是无法再次往里面添加的（不能有重复）</td></tr><tr><td><code>geopos key member</code></td><td>获取指定区域的坐标值<br></td></tr><tr><td><code>geodist key m1 m2 单位</code></td><td>获取两个位置的直线距离：<br>例如：<code>GEODIST china_city ShangHai ShenZhen km</code><br>结果：1215.9224<br>单位的可选单位<br>m：米，默认值，没有指定的话就是用这个<br>km:：千米<br>mi：英里<br>ft：英尺</td></tr><tr><td>还有一些别的，要用上了再去查查这个geo即可</td><td></td></tr></tbody></table><h1 id="redisjava" tabindex="-1"><a class="header-anchor" href="#redisjava" aria-hidden="true">#</a> RedisJava</h1><h2 id="jedis-让java操作redis" tabindex="-1"><a class="header-anchor" href="#jedis-让java操作redis" aria-hidden="true">#</a> Jedis--让Java操作Redis</h2><h3 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖" aria-hidden="true">#</a> 安装依赖</h3><p>只需要安装第一个即可 其他的都是附带的log打印</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>       <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-simple --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-simple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.7.32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>



        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.7.32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.18.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩展-docker修改容器端口" tabindex="-1"><a class="header-anchor" href="#扩展-docker修改容器端口" aria-hidden="true">#</a> 扩展-Docker修改容器端口</h3>`,138),pn={href:"https://www.cnblogs.com/hkgov/p/14276263.html",target:"_blank",rel:"noopener noreferrer"},on=a(`<p>按照这篇文章走一遍 建议把redis的端口改成别的</p><p>这里我才用的最古老的方法，重新整一个容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop redis
docekr <span class="token function">rm</span> redis

<span class="token comment"># 下面先</span>

<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> 最终你访问的端口:6379 <span class="token parameter variable">--name</span> redis <span class="token parameter variable">-v</span> /home/你的用户名/.redis/redis.conf:/etc/redis/redis.conf <span class="token parameter variable">-v</span> /home/你的用户名/.redis/data/:/data   redis redis-server /etc/redis/redis.conf <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你执意要使用6379的话，本地倒还好，云服务器的话大概几分钟左右的时间就会被别人注入挖矿之类的玩意</p><h3 id="连接并使用redis" tabindex="-1"><a class="header-anchor" href="#连接并使用redis" aria-hidden="true">#</a> 连接并使用redis</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        1 创建jedis对象</span>
        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;这里填写ip 本地的话就localhost&quot;</span><span class="token punctuation">,</span> 端口号<span class="token operator">-</span>传入数值<span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">&quot;这里填写你的密码（如果有的话）&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        测试</span>
        <span class="token class-name">String</span> ping <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ping<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没问题的话你的控制台会出现一个<strong>PONG</strong></p><p>接下来测试下其他的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Jedis</span> jedis<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@BeforeAll</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span> xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;keys:{}&quot;</span><span class="token punctuation">,</span> keys<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;name:{}&quot;</span><span class="token punctuation">,</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        jedis<span class="token punctuation">.</span><span class="token function">mset</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;18&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mget <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">mget</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;mget:{}&quot;</span><span class="token punctuation">,</span> mget<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@AfterAll</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="操作hashmap" tabindex="-1"><a class="header-anchor" href="#操作hashmap" aria-hidden="true">#</a> 操作hashmap</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//        赋值 也可以通过传入Map的方式替代field和value传值</span>
    jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        取值</span>
    <span class="token class-name">String</span> set <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;set:{}&quot;</span><span class="token punctuation">,</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jedis实例-手机验证码" tabindex="-1"><a class="header-anchor" href="#jedis实例-手机验证码" aria-hidden="true">#</a> Jedis实例-手机验证码</h3><p>要求：</p><ol><li>输入手机号，点击发送后随机生成6位数字验证码，2分钟内有效</li><li>输入验证码，点击验证，返回成功或失败</li><li>每个手机号每天只能输入三次</li></ol><p>思路：</p><ol><li>生成随机六位验证码，通过random</li><li>把验证码放到redis里面，设置过期时间120s</li><li>判断验证码是否一致，和输入的验证码进行匹配比较，如果一样的话就成功</li><li>每个手机每天只能发送三次验证码 <ol><li>incr 每次发送之后+1</li><li>大于2的时候，提示不能提交发送</li></ol></li></ol><p>下面的是一个比较简化的版本 实际生产环境中 应该都是调用其他地方的api来处理生成短信验证码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneCode</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//        verifyCode(&quot;18888888888&quot;);</span>
        <span class="token comment">// gerRedisCode(&quot;18888888888&quot;, &quot;069261&quot;);</span>
        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Jedis</span> jedis<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;xxxxx&quot;</span><span class="token punctuation">,</span> xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
         * 生成随机验证码
         *
         * <span class="token keyword">@param</span> <span class="token parameter">length</span> 验证码长度
         * <span class="token keyword">@return</span> 数值验证码
         */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;length must be positive&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
         * 发送验证码 并存入redis
         * <span class="token keyword">@param</span> <span class="token parameter">phone</span>
         */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">verifyCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//        手机发送次数的key</span>
        <span class="token class-name">String</span> countKey <span class="token operator">=</span> <span class="token string">&quot;phone_&quot;</span> <span class="token operator">+</span> phone <span class="token operator">+</span> <span class="token string">&quot;_count&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//        每个手机每天只能发送三次</span>
        <span class="token class-name">String</span> count <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>countKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//            如果为null表示没有发送过 新建一个有时长的key 过期时间为24h</span>
            jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span>countKey<span class="token punctuation">,</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//            发送次数+1</span>
            jedis<span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span>countKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;每天只能发送三次&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//            注意这个return</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//        验证码的key</span>
        <span class="token class-name">String</span> codeKey <span class="token operator">=</span> <span class="token string">&quot;phone_&quot;</span> <span class="token operator">+</span> phone <span class="token operator">+</span> <span class="token string">&quot;_code&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//        发送的验证码要放到redis里面</span>
        <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        过期时间为两分钟</span>
        jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span>codeKey<span class="token punctuation">,</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
         * 验证验证码
         * <span class="token keyword">@param</span> <span class="token parameter">phone</span>
         * <span class="token keyword">@param</span> <span class="token parameter">code</span>
         */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">gerRedisCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">,</span> <span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//        从redis中获取验证码</span>
        <span class="token class-name">String</span> codeKey <span class="token operator">=</span> <span class="token string">&quot;phone_&quot;</span> <span class="token operator">+</span> phone <span class="token operator">+</span> <span class="token string">&quot;_code&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> code1 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>codeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 这里实际用的时候说多加一重验证 判断是获取到的验证码信息是否为null，如果为null表示验证码过期 就需要用户重新申请验证码了   或者这只前加一个ttl判断有没有过期</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>code1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;验证成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;验证失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 首先调用下</p><p><code>verifyCode(&quot;18888888888&quot;);</code></p><p>可以在redis中看到这些</p><h2 id="✨springboot整合redis" tabindex="-1"><a class="header-anchor" href="#✨springboot整合redis" aria-hidden="true">#</a> ✨SpringBoot整合redis</h2><p>依旧是先到官网看看</p>`,23),cn={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using",target:"_blank",rel:"noopener noreferrer"},ln=a('<p>看到了两个</p><figure><img src="'+I+'" alt="image-20211223170648151" tabindex="0" loading="lazy"><figcaption>image-20211223170648151</figcaption></figure><p>用上面那个吧 听说下面的是做集群用的</p><p>当然我选择模板生成</p><figure><img src="'+C+`" alt="image-20211223171156327" tabindex="0" loading="lazy"><figcaption>image-20211223171156327</figcaption></figure><h3 id="添加依赖" tabindex="-1"><a class="header-anchor" href="#添加依赖" aria-hidden="true">#</a> 添加依赖</h3><p>现有的项目中加入</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到导入了蛮多依赖</p><figure><img src="`+O+'" alt="image-20211223173323095" tabindex="0" loading="lazy"><figcaption>image-20211223173323095</figcaption></figure><p>额外说下 这玩意是基于lettuce的netty来进行操作的</p><p>接下来分析下自动配置</p><p>根据我们之前的学习可以知道 所有官方提供的整合包，自动配置都在官方的springbootautoconfiguration内，所以进去看看</p><p>redis 的包名为：spring-boot-starter-data-redis</p><p>所以在autoconfiguration下的data内的redis</p><p>可以看到显眼的autoConfiguration</p><figure><img src="'+T+'" alt="image-20211223173848353" tabindex="0" loading="lazy"><figcaption>image-20211223173848353</figcaption></figure><p>接下来可以在这之中看到</p>',18),dn=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Configuration"),n("span",{class:"token punctuation"},"("),s("proxyBeanMethods "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token annotation punctuation"},"@ConditionalOnClass"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"RedisOperations"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token annotation punctuation"},"@EnableConfigurationProperties"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"RedisProperties"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token annotation punctuation"},"@Import"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token class-name"},"LettuceConnectionConfiguration"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"JedisConnectionConfiguration"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),rn=a('<p>显眼的RedisProperties</p><p>这里再说下额外导入的东西：</p><ul><li>LettuceConnectionConfiguration客户端的连接配置</li></ul><p>点进去看一下</p><figure><img src="'+M+'" alt="image-20211223174140887" tabindex="0" loading="lazy"><figcaption>image-20211223174140887</figcaption></figure><p>这里看着就像是一个连接工厂的玩意 说明以后我们连接redis都是从这里获取连接</p><p>连接工厂准备好了的</p><p>接着看下另一个JedisConnectionConfiguration</p><figure><img src="'+L+'" alt="image-20211223174257801" tabindex="0" loading="lazy"><figcaption>image-20211223174257801</figcaption></figure><p>一目了然 这不就是Jedis吗 也就是说只要我们的<code>spring.redis.client-type</code>为jedis的时候，底层默认的链接工厂为jedis</p><p>也就是说它同时支持两种客户端来操作Redis</p><p>Lettuce是一个比较新的客户端，Jedis是老牌的客户端</p><p>接着我们回到Autoconfiguration</p>',13),un=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Bean"),s(`
`),n("span",{class:"token annotation punctuation"},"@ConditionalOnMissingBean"),n("span",{class:"token punctuation"},"("),s("name "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"redisTemplate"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token annotation punctuation"},"@ConditionalOnSingleCandidate"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"RedisConnectionFactory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"RedisTemplate"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"redisTemplate"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"RedisConnectionFactory"),s(" redisConnectionFactory"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token class-name"},"RedisTemplate"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},">")]),s(" template "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"RedisTemplate"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    template`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setConnectionFactory"),n("span",{class:"token punctuation"},"("),s("redisConnectionFactory"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" template"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token annotation punctuation"},"@Bean"),s(`
`),n("span",{class:"token annotation punctuation"},"@ConditionalOnMissingBean"),s(`
`),n("span",{class:"token annotation punctuation"},"@ConditionalOnSingleCandidate"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"RedisConnectionFactory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"StringRedisTemplate"),s(),n("span",{class:"token function"},"stringRedisTemplate"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"RedisConnectionFactory"),s(" redisConnectionFactory"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"StringRedisTemplate"),n("span",{class:"token punctuation"},"("),s("redisConnectionFactory"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),kn=a('<p>注入了两个bean 之前jdbc是jdbcTemplate，这里是redisTemplate 那么说明这个玩意就是来操作redis的（就像jdbcTemplate那样）</p><p>总所周知，Redis是通过key-value来进行存储的，所以说<code>RedisTemplate&lt;Object, Object&gt;</code>这两个Object指的是我们的Key的类型和Value的类型 都支持Object</p><p>另外还给我们注入了一个stringRedisTemplate 这里简单说下 意思就是，Key和Value都是String的，因为我们k和v都是String的开发场景非常多，所以它也给我们注入了这个</p><p>也就是说底层我们只要使用<code>stringRedisTemplate</code>和<code>redisTemplate</code>就能来操作Redis了</p><h3 id="简单使用spring-redis" tabindex="-1"><a class="header-anchor" href="#简单使用spring-redis" aria-hidden="true">#</a> 简单使用Spring-Redis</h3><p>我们可以在RedisProperties内看到非常多的配置</p><figure><img src="'+E+`" alt="image-20211223180656571" tabindex="0" loading="lazy"><figcaption>image-20211223180656571</figcaption></figure><p>前缀都是spring.redis</p><h3 id="配置application中的redis项" tabindex="-1"><a class="header-anchor" href="#配置application中的redis项" aria-hidden="true">#</a> 配置Application中的redis项</h3><p>接下来现在application.yml配置吧</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 网址
    <span class="token key atrule">port</span><span class="token punctuation">:</span> 端口
    password<span class="token punctuation">:</span>你的密码
    <span class="token key atrule">username</span><span class="token punctuation">:</span> default
    <span class="token comment"># 如果是默认账户 username 可以省略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然你也可以一句话概括上面的这些</p><p><code>url: redis://default:XXXX@X.X.X.X:6379</code> 当然本人并不是很喜欢这样整 也不建议这样整</p><p>接着使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">class</span> <span class="token class-name">ApplicationTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> operations <span class="token operator">=</span>
                stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        operations.set(&quot;hello&quot;, &quot;张三&quot;);</span>

        <span class="token class-name">String</span> hello <span class="token operator">=</span> operations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;hello = {}&quot;</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;StringRedisTemplate = {}&quot;</span><span class="token punctuation">,</span> stringRedisTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用jedis替换lettuce" tabindex="-1"><a class="header-anchor" href="#使用jedis替换lettuce" aria-hidden="true">#</a> 使用jedis替换Lettuce</h3><p>先导入依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Springboot有声明jedis的版本 所以我们这里不用写版本号</p><p>接着在配置文件中启用即可</p>`,20),mn=n("div",{class:"language-yaml line-numbers-mode","data-ext":"yml"},[n("pre",{yaml:"",class:"language-yaml"},[n("code",null,[n("span",{class:"token key atrule"},"spring"),n("span",{class:"token punctuation"},":"),s(`
  `),n("span",{class:"token key atrule"},"redis"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token key atrule"},"host"),n("span",{class:"token punctuation"},":"),s(` 网址
    `),n("span",{class:"token key atrule"},"port"),n("span",{class:"token punctuation"},":"),s(` 端口
    password`),n("span",{class:"token punctuation"},":"),s(`你的密码
    `),n("span",{class:"token key atrule"},"client-type"),n("span",{class:"token punctuation"},":"),s(` jedis
    `),n("span",{class:"token comment"},"# 然后可以对其做额外的配置 例如池子的大小等"),s(`
    `),n("span",{class:"token key atrule"},"jedis"),n("span",{class:"token punctuation"},":"),s(`
     `),n("span",{class:"token key atrule"},"pool"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token key atrule"},"max-active"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"10"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),vn=a(`<p>如果以后不想用jedis了 可以换回<code>lettuce</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 网址
    <span class="token key atrule">port</span><span class="token punctuation">:</span> 端口
    password<span class="token punctuation">:</span>你的密码
    <span class="token key atrule">client-type</span><span class="token punctuation">:</span> lettuce
    <span class="token comment"># 同上 可以用lettuce：xxx来进行一些指向性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着测试依旧正常</p><p>如果说你使用jedis有问题 百分之九十是maven依赖没有更新</p><h2 id="redis的事务" tabindex="-1"><a class="header-anchor" href="#redis的事务" aria-hidden="true">#</a> Redis的事务</h2><blockquote><p>Redis的事务是一个单独的隔离操作：事务中的所有命令都会序列化。按顺序的执行。</p><p>事务在执行的过程中，不会被其他客户端发送过来的命令打断</p></blockquote><p>Redis事务主要作用就是<strong>串联多个命令</strong>防止别的命令插队</p><h3 id="✨multi、exec、discard" tabindex="-1"><a class="header-anchor" href="#✨multi、exec、discard" aria-hidden="true">#</a> ✨Multi、Exec、Discard</h3><p>从输入<code>Multi</code>命令开始，输入的命令都会一次进入命令队列中，直到输入<code>Exec</code>后，Redis会将之前队列中的命令依次执行，如果说不想要提交，则可以通过<code>Discard</code>来取消提交</p><ul><li>Multi就像是Mysql的开启事务，开启新的事物</li><li>Exec就像是Mysql的提交事务</li><li>Discard就像是Mysql的回滚事务，取消事务的提交</li></ul><figure><img src="`+F+'" alt="image-20211223203804732" tabindex="0" loading="lazy"><figcaption>image-20211223203804732</figcaption></figure><p>总之使用和Mysql差不多 不过目前来说只是没有那几个分类的区别：什么读未提交之类的</p><p>注意</p><ul><li>如果组队阶段出现了错误，则所有命令都不会被真正的执行</li><li><strong>如果执行阶段出现了错误(例如setxxx 队列中有十条语句，但是有一条出错了，那么只有那一条出错的将不会被执行，其他的会正常执行)，则会没有原子性的执行</strong></li></ul><p>Redis没有回滚这一个概念，只有提交和不提交的概念</p><h3 id="事务解决数据冲突的问题" tabindex="-1"><a class="header-anchor" href="#事务解决数据冲突的问题" aria-hidden="true">#</a> 事务解决数据冲突的问题</h3><p>现在我们账面上有1w</p><p>然后目前有三个请求</p><ul><li>一个请求想给金额减8k</li><li>一个请求想给金额减5k</li><li>一个金额想给金额减1k</li></ul><figure><img src="'+J+'" alt="image-20211223205332078" tabindex="0" loading="lazy"><figcaption>image-20211223205332078</figcaption></figure><h3 id="悲观锁" tabindex="-1"><a class="header-anchor" href="#悲观锁" aria-hidden="true">#</a> 悲观锁</h3><p>​Pressimistic Lock 顾名思义，就是非常悲观，每次拿数据去的时候都认为被别人修改，所以每次在拿到数据的时候都会上锁，这样别人想拿这个锁就会block直到它拿到锁</p><p>​传统的关系型数据库里面就用到了很多这种机制，比如行锁，表锁等，都是在做操作之前先<strong>上锁</strong></p><figure><img src="'+K+'" alt="image-20211223205700387" tabindex="0" loading="lazy"><figcaption>image-20211223205700387</figcaption></figure><p>缺点是效率比较低 如果说同时执行的玩意较多 那么所有查询都要等待前面的结束</p><h3 id="乐观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁" aria-hidden="true">#</a> 乐观锁</h3><p>​非常乐观，每次拿数据的时候都认为别人不会去修改，所以不会上锁，但是在更新的时候判断一下在此期间别人有没有去更新这个数据，就类似于下图的版本号机制</p><p>​乐观锁用于多读的数据类型，这样可以提高吞吐量，Redis就是利用这种check-and-set实现事务的</p><figure><img src="'+A+`" alt="image-20211223210026383" tabindex="0" loading="lazy"><figcaption>image-20211223210026383</figcaption></figure><p>比较现实的例子就是春运的火车抢票</p><h3 id="✨watch-key-key" tabindex="-1"><a class="header-anchor" href="#✨watch-key-key" aria-hidden="true">#</a> ✨Watch key [key...]</h3><p>再执行multi提交之前，先执行<code>watch key1 key2...</code>可以监视一个或者多个key，如果在事务执行前这个（或这些）key被其他命令所改动，那么事务将会被打断</p><p>使用流程是：</p><ul><li>先使用<code>watch</code>锁定字段</li><li>再使用<code>mutil</code>开启事务</li><li>最后使用<code>exec</code>提交事务</li></ul><p>如果说最后提交的时候发现值被其他人修改了，将会返回null，并且不会对齐进行修改，否则返回<code>QUEUED</code>：操作成功</p><h3 id="unwatch" tabindex="-1"><a class="header-anchor" href="#unwatch" aria-hidden="true">#</a> unwatch</h3><p>顾名思义，取消对事务的监视</p><h3 id="redis事务三特性" tabindex="-1"><a class="header-anchor" href="#redis事务三特性" aria-hidden="true">#</a> Redis事务三特性</h3><ul><li>单独的隔离操作 <ul><li>事务中的所有命令都会序列化、按顺序的执行，事务在执行的过程中，不会被其他客户端发送来的命令打断</li></ul></li><li>没有隔离级别的概念 <ul><li>队列中的命令没有提交前都不会被实际执行，因为事务提交前任何指令都不会被实际执行</li></ul></li><li>不保证原子性 <ul><li>事务中如果有一条命令执行失败，其后的命令依然会被执行，没有回滚</li></ul></li></ul><h3 id="模拟一个简单的售票系统" tabindex="-1"><a class="header-anchor" href="#模拟一个简单的售票系统" aria-hidden="true">#</a> 模拟一个简单的售票系统</h3><p>大概意思是</p><ul><li>用户可以点击买票</li><li>返回值有success抢票成功</li><li>fail抢票失败</li><li>只有一张票</li></ul><p>HTML部分</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span>
              <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ie=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/axios/0.21.1/axios.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getTicket<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点我抢票<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>抢票结果：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{text}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/runPiao&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">uid</span><span class="token operator">:</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token literal-property property">pid</span><span class="token operator">:</span><span class="token number">222</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
                        <span class="token punctuation">}</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>

            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 代码部分：</p><p>Service</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token class-name">MyProject<span class="token punctuation">.</span>RedisForSpringBoot</span><span class="token punctuation">.</span>service<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">DataAccessException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisOperations</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">SessionCallback</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">StringRedisTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ValueOperations</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> Amayakite
 * <span class="token keyword">@version</span> 1.0.0
 * @BelongsProject 26-Redis-SpringBoot
 * @BelongsPackage com.MyProject.RedisForSpringBoot.service
 * <span class="token keyword">@date</span> 2021/12/23 21:42
 * <span class="token keyword">@description</span> 项目描述
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoSeckill</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">doSecKill</span><span class="token punctuation">(</span><span class="token class-name">Long</span> uid<span class="token punctuation">,</span> <span class="token class-name">Long</span> prodid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//        非空判断</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>uid <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> prodid <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ops <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//        定义库存key</span>
        <span class="token class-name">String</span> kcKey <span class="token operator">=</span> <span class="token string">&quot;product:&quot;</span> <span class="token operator">+</span> prodid <span class="token operator">+</span> <span class="token string">&quot;:stock&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//        定义用户抢购key</span>
        <span class="token class-name">String</span> userKey <span class="token operator">=</span> <span class="token string">&quot;product:&quot;</span> <span class="token operator">+</span> prodid <span class="token operator">+</span> <span class="token string">&quot;:user:&quot;</span> <span class="token operator">+</span> uid<span class="token punctuation">;</span>
        <span class="token comment">//        获取库存</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> ops<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>kcKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        如果说库存为null 说明秒杀还没有开始</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//        创建秒杀</span>
            ops<span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>kcKey<span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//        判断用户是否可以重复秒杀 这里设置个有效期为30s</span>
        <span class="token class-name">Boolean</span> aBoolean <span class="token operator">=</span> ops<span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>userKey<span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        一定有返回值 true  创建成功 false 创建失败</span>
        <span class="token keyword">assert</span> aBoolean <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>aBoolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//        注意 redis只能这样整事务</span>
        <span class="token class-name">Integer</span> execute <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SessionCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Integer</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">RedisOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> operations<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
                <span class="token comment">//                    开启监听</span>
                <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> forValue <span class="token operator">=</span> operations<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> forValue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>kcKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                operations<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">K</span><span class="token punctuation">)</span> kcKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
                operations<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                forValue<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">K</span><span class="token punctuation">)</span> kcKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> operations<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//            如果执行成功 返回true</span>
        <span class="token keyword">assert</span> execute <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>execute <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求部分</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QucikController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">DoSeckill</span> doSeckill<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/runPiao&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">runPiao</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;uid&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> uid<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;pid&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> piaoId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> shop1 <span class="token operator">=</span> doSeckill<span class="token punctuation">.</span><span class="token function">doSecKill</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> piaoId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        返回json</span>
        <span class="token keyword">return</span> shop1 <span class="token operator">?</span> <span class="token string">&quot;{\\&quot;result\\&quot;:\\&quot;success\\&quot;}&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;{\\&quot;result\\&quot;:\\&quot;fail\\&quot;}&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试了下，效果可以</p><figure><img src="`+P+'" alt="image-20211224001053673" tabindex="0" loading="lazy"><figcaption>image-20211224001053673</figcaption></figure><figure><img src="'+H+`" alt="image-20211224001100549" tabindex="0" loading="lazy"><figcaption>image-20211224001100549</figcaption></figure><p>但是这样真的能解决高并发问题吗？</p><p>我接着用Python写了一个并发请求脚本（用Java也可以 不过比较痛苦）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token keyword">import</span> json
<span class="token keyword">import</span> threading


<span class="token keyword">def</span> <span class="token function">http_get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">:</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>params<span class="token punctuation">)</span>
    <span class="token comment"># 结果转换为json格式</span>
    result <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
    <span class="token comment"># 判断是否成功</span>
    <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">&#39;result&#39;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">:</span>
        <span class="token comment"># 抢票成功</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;抢票成功！&quot;</span><span class="token punctuation">)</span>
    

<span class="token comment"># 生成随机六位数</span>
<span class="token keyword">def</span> <span class="token function">random_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">import</span> random
    num <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">999999</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> num

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token comment"># 发送httpget请求，获取响应结果</span>
    url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8080/runPiao&quot;</span>
    <span class="token comment"># 轮番发送1w次请求 多线程发送</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>http_get<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">{</span>
        <span class="token string">&#39;uid&#39;</span><span class="token punctuation">:</span>random_num<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">&#39;pid&#39;</span><span class="token punctuation">:</span><span class="token number">222</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+D+'" alt="image-20211224000756690" tabindex="0" loading="lazy"><figcaption>image-20211224000756690</figcaption></figure><p>接着发现了超卖现象</p><p>同时票数也成为了负数</p><figure><img src="'+V+`" alt="image-20211224000827544" tabindex="0" loading="lazy"><figcaption>image-20211224000827544</figcaption></figure><p>这可不太行..</p><p>这里简单说下这里面出现的问题</p><ul><li>我们同时有一万个请求，但是Redis貌似并不能同时处理一万个请求 <ul><li>所以有些请求将会等待，最终将会抛出连接超时问题</li><li>这个连接超时就是最大连接数小于并发用户连接数</li></ul></li><li>以及超卖问题</li></ul><p>而且我发现用js的话问题更严重</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;axios&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> randomUUID<span class="token punctuation">,</span> randomInt <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;crypto&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> pet <span class="token operator">=</span> <span class="token string">&quot;aa,18&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:8080/runPiao&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token comment">// 随机生成6位数id</span>
            <span class="token literal-property property">uid</span><span class="token operator">:</span> <span class="token function">randomInt</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">222</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>result<span class="token operator">===</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Error:&quot;</span><span class="token operator">+</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+$+`" alt="image-20211224003705848" tabindex="0" loading="lazy"><figcaption>image-20211224003705848</figcaption></figure><p>1w次连接，2k次异常</p><h2 id="lua" tabindex="-1"><a class="header-anchor" href="#lua" aria-hidden="true">#</a> Lua</h2><p>​Lua是一个小巧的脚本语言，可以很容易被C、C++代码调用，也可以通过反过来调用C/C++的函数，一个完整的Lua解析器不超过200KB，所以不适合用来做编程语言，而是作为嵌入式脚本语言</p><p>​很多应用程序、游戏使用Lua作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性</p><p>​在Redis中，将复杂的或者多步的redis操作，写成一个脚本，一次提交给redis执行，减少反复连接Redis的次数，提升性能</p><p>​Lua是类似Redis事务，有一定的原子性，不会被其他命令插队，可以完成一些Redis事务性操作</p><p>​我们可以利用脚本淘汰用户、解决超卖问题</p><p>​利用Lua脚本解决超卖问题，实际上是利用了Redis的单线程调用特性，用任务队列的方式解决多任务并发问题</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> userid<span class="token operator">=</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">local</span> prodid<span class="token operator">=</span>KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">local</span> qtkey <span class="token operator">=</span> <span class="token string">&quot;ck:&quot;</span><span class="token operator">..</span>prodid<span class="token operator">..</span><span class="token string">&quot;:qt&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">local</span> userKey<span class="token operator">=</span><span class="token string">&quot;ck:&quot;</span><span class="token operator">..</span>prodid<span class="token operator">..</span><span class="token string">&quot;:usr&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">local</span> userExists<span class="token operator">=</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;sismenber&quot;</span><span class="token punctuation">,</span>userKey<span class="token punctuation">,</span>userid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>userExists<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span> <span class="token keyword">then</span>
    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token keyword">local</span> num <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>qtkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token keyword">then</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;decr&quot;</span><span class="token punctuation">,</span>qtkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;sadd&quot;</span><span class="token punctuation">,</span>userKey<span class="token punctuation">,</span>userid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里只做抛砖引玉 具体实现以后要用到了再说...</p><p>md主要是这老师讲的不详细 看不懂说了啥玩意..</p><h2 id="redis持久化" tabindex="-1"><a class="header-anchor" href="#redis持久化" aria-hidden="true">#</a> Redis持久化</h2><p>就是让数据能存放到硬盘内，而不单单是在内存中</p><p>Redis提供了两套系统，一个是RDB 一个是AOF</p><h3 id="rdb" tabindex="-1"><a class="header-anchor" href="#rdb" aria-hidden="true">#</a> RDB</h3><p>在指定的<strong>时间间隔</strong>内将内存中的数据集<strong>快照</strong>写入磁盘</p><p>使用这个玩意的话，Redis会单独创建一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，在用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能，如果需要进行大规模数据的恢复，且对于数据的完整性不是很敏感，那么RDB要比AOF的方式更加高效</p><p>缺点是最后一次持久化后的数据可能会丢失（还没到指定时间的情况下服务器挂掉了）</p><h3 id="rreis持久化路径的配置" tabindex="-1"><a class="header-anchor" href="#rreis持久化路径的配置" aria-hidden="true">#</a> Rreis持久化路径的配置</h3><p>默认是</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>dbfilename dump.db
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以更该自己喜欢的 不指定的话默认是按照相对路径（运行的路径下）</p><p>还有一些额外的配置</p><ul><li><p><code>stop-writes-on-bgsave-error</code> 默认为yes 当redis无法写入硬盘时，直接关掉Redis的写操作 可选no</p></li><li><p><code>rdbcompression</code>对于存储到磁盘中的快照，设置是否可以进行压缩，如果是的话，redis会才用LZF算法进行压缩 默认yes 可以设置为no</p></li><li><p><code>rdbchecksum</code>检查完整性 在存储快照后，可以让Redis来进行数据校验，但是这样做会增加10%左右的性能消耗，如果希望获取到最大的性能提升，可以关闭这个功能，推荐yes 默认yes</p></li><li><p><code>save 时间 次数</code> 多少时间内（S）触发了多少次修改次数，触发存储</p><ul><li><p>默认是1分钟1w次，或者5分钟修改10次，又或者15分钟修改了一次</p></li><li><p>禁用 方法：<code>save</code>传入空字符串即可</p></li><li><p>这个是同步方法 会阻塞主线程</p></li><li><p>例子：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>save 20 3
<span class="token comment"># 20秒之内 最少有三个key发生了变化 触发存储</span>

<span class="token comment"># 可以同时存在多个 理论上来说 时间越长 数值越小 反之亦然</span>
save 600 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>bgsave 时间 次数</code>Redis会在后台异步的进行快照操作，快照同时还可以响应客户端的请求</p><ul><li>在使用中，可以通过<code>lastsave</code>命令来获取最后一次成功执行快照的时间</li></ul></li></ul><p>TMD 草了 这玩意说人话 就是 自动帮你把东西存储到一个文件内 文件名叫<code>dump.rdb</code>你可以自由的copy这个文件到其他地方</p><p>启动的时候 默认会找这个文件中的输入并导入到redis内</p><p>就这样 对 没错 就这样</p><p>搞得我还以为是多高级的玩意</p><h3 id="aof" tabindex="-1"><a class="header-anchor" href="#aof" aria-hidden="true">#</a> AOF</h3><p>AOF是以日志的形式来记录每个写操作（增量保存），将Redis执行过的所有指令都记录下来（读操作不记录），只许追加文件不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，Redis重启的话就根据日志文件的内容将写指令从前到后执行一遍完成数据恢复的工作</p><p><strong>通常情况下 AOF不一定会设置</strong></p><p>AOF和RDB同时开启， 先加载RDB再加载AOF， 参考配置aof-use-rdb-preamble 默认是yes</p><p>AOF默认是不开启的，如果要开启的话</p><p>需要在配置文件中加上：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>appendonly yes
<span class="token comment"># 开启aof持久化 默认是no不开启</span>

<span class="token comment">#可选 开启aof后默认文件名为appendonly.aof</span>
appendonlyfilename 文件名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>恢复的话是要手动恢复的：</p><p>在<strong>shell</strong>中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-check-aof <span class="token parameter variable">--fix</span> 路径/文件 进行数据恢复
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它的同步频率也可以在conf文件内配置</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>appendfsync always
<span class="token comment">#  始终同步 每次Redis的写入都会立刻计入日志，性能比较差但是数据完整性比较好 默认是这个</span>
appendfsync everysec
<span class="token comment"># 每秒同步 每秒记录日志一次，如果服务器挂了，本秒的数据可能会丢失</span>
appendfsync no
<span class="token comment"># redis不主动进行同步，把同步时机交给操作系统 由操作系统决定..不建议用这个</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果说感觉文件过大且没有什么用的话 可以设置重写</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>auto-aof-rewrite-percentage 数值 例如 100 或者 10 20 30 
<span class="token comment"># 设置重写的基准值，文件达到100%时开始重写（文件是原来重写后的2倍时触发）</span>
auto-aof-rewrite-min-size 数值mb 例如：64mb(小写)
<span class="token comment"># 设置重写的基准值 最小文件64MB 达到这个基准值开始重写</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：<code>auto-aof-rewrite-percentage</code>设置为100%</p><p><code>auto-aof-rewrite-min-size</code>设置为64mb</p><p>则会在64mb+100%=128mb的时候触发重写</p><p>重写：例如原本</p><p>set key value1</p><p>set key2 value</p><p>会简化成 set k1 v1 k2 v2</p><p>或者说你原本执行了两次自增 它将会帮你缩减成 +2</p><p>aof优点：每一次修改都同步，文件的完整性会更加好；每秒同步一次，可能会丢失一秒的数据；从不同步，效率最高的</p><p>缺点：相对于数据文件来说，aof远远大于rdb，修复的速度也比rdb慢；aof运行效率也要比rdb慢，所以我们redis默认的配置就是rdb持久化</p><h3 id="持久化的补充说明" tabindex="-1"><a class="header-anchor" href="#持久化的补充说明" aria-hidden="true">#</a> 持久化的补充说明</h3><figure><img src="`+G+'" alt="image-20211224194823610" tabindex="0" loading="lazy"><figcaption>image-20211224194823610</figcaption></figure><figure><img src="'+N+'" alt="image-20211224195019133" tabindex="0" loading="lazy"><figcaption>image-20211224195019133</figcaption></figure><h2 id="redis主从复制" tabindex="-1"><a class="header-anchor" href="#redis主从复制" aria-hidden="true">#</a> Redis主从复制</h2><p>概念大概是</p><p>一个主人 有两个仆从</p><p>加起来是3个人</p><p>主人吩咐的东西 仆从就去遵守主人的命令</p><p>​在Redis中，是指将一台Redis服务器的数据，复制到其他的Redis服务器，前者称为主节点（master/leader）后者称为从节点(slave/follwer)</p><p>​<strong>数据的复制时是单向的，只能从主节点复制到从节点</strong></p><figure><img src="'+U+`" alt="image-20211224200220578" tabindex="0" loading="lazy"><figcaption>image-20211224200220578</figcaption></figure><p>主从复制的作用主要包括：</p><ol><li>数据冗余：主从复制实现了数据的热备份，是持久化以外的另一种数据存储方式</li><li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障修复-实际上是一种服务的冗余</li><li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，从节点提供读服务，即：写redis数据时应用连接主节点，读redis数据时应用连接从节点，分离服务器负担，尤其是在写少读多的情况下，通过多个节点分担负载，可以大大提高Redis服务器的并发量</li><li>高可用基石：除了上述作用外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是redis高可用的基础</li></ol><p>一般来说 要将redis运营到工程项目中，且只使用一台redis是万万不能的，原因如下：</p><ol><li>从结构上，单个redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大</li><li>从容量上，单个redis服务器的内存容量有限，就算一台redis服务器的内存容量为512gb，也不能将所有的内存用作redis存储内存，一般来说，单台redis最大使用内存不应该超过20g</li></ol><p>电商网站上的商品，一般都是一次上传，无数次浏览的，专业点说，就是：多读少写</p><p>架构中比较常见的就是一主二从</p><h3 id="配置主从集群" tabindex="-1"><a class="header-anchor" href="#配置主从集群" aria-hidden="true">#</a> 配置主从集群</h3><p>配置这玩意谨记一点即可：</p><p><strong>只配置从库，不用配置主库</strong></p><p>注意 配置文件要本地准备三份</p><p>额外指令： 在redis中使用<code>INFO replication</code> 可以查看当前redis的信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> INFO replication
<span class="token comment"># Replication</span>
role:master <span class="token comment"># 是什么级别 、什么角色</span>
connected_slaves:0 <span class="token comment"># 有多少个随从</span>
master_failover_state:no-failover
master_replid:b7a23646a995a5b4a25ba1a5c5cd02706a0237c6
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:0
second_repl_offset:-1
repl_backlog_active:0
repl_backlog_size:1048576
repl_backlog_first_byte_offset:0
repl_backlog_histlen:0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里附带一下我的完整流程</p><p>这里我是docker 所以 不提及别的</p><p>首先 给docker创建一个网关</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create redis <span class="token parameter variable">--subnet</span> <span class="token number">172.38</span>.0.0/16
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后查看这个网关</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+X+`" alt="image-20211224225758243" tabindex="0" loading="lazy"><figcaption>image-20211224225758243</figcaption></figure><p>看到了redis表示成功</p><p>接着 在你的用户的根目录下创建一个redis文件夹</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> redis
<span class="token builtin class-name">cd</span> redis
<span class="token function">mkdir</span> data-0 data-1 data-2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着运行如下脚本（存储为shell，修改下对应的值运行）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">index</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">0</span> <span class="token number">2</span><span class="token variable">)</span></span><span class="token punctuation">;</span><span class="token punctuation">\\</span>
<span class="token keyword">do</span> <span class="token punctuation">\\</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/你的用户名/redis/data-<span class="token variable">\${index}</span>/conf
<span class="token function">touch</span> /home/你的用户名/redis/data-<span class="token variable">\${index}</span>/conf/redis.conf
<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;&gt;</span> /home/你的用户名/redis/data-<span class="token variable">\${index}</span>/conf/redis.conf</span>
port 6379
bind 0.0.0.0
protected-mode no
daemonize no
appendonly yes
requirepass  这里设置访问密码 也可以不设置
EOF</span>
<span class="token keyword">done</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着运行 然后cd进去查看</p><figure><img src="`+Z+`" alt="image-20211224230003789" tabindex="0" loading="lazy"><figcaption>image-20211224230003789</figcaption></figure><p>看到有redis.conf表示成功</p><p>接着再创建一个shell脚本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">index</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">0</span> <span class="token number">2</span><span class="token variable">)</span></span><span class="token punctuation">;</span><span class="token punctuation">\\</span>
<span class="token keyword">do</span> <span class="token punctuation">\\</span>
<span class="token function">docker</span> run <span class="token parameter variable">-p</span> 这里填写外部能访问的端口号<span class="token variable">\${index}</span>:6379 <span class="token parameter variable">--name</span> redis-<span class="token variable">\${index}</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /home/你的用户名/redis/data-<span class="token variable">\${index}</span>/data:/data <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /home/你的用户名/redis/data-<span class="token variable">\${index}</span>/conf/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> <span class="token parameter variable">--net</span> redis <span class="token parameter variable">--ip</span> <span class="token number">172.38</span>.0.1<span class="token variable">\${index}</span> redis redis-server /etc/redis/redis.conf
<span class="token keyword">done</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 <code>-p 这里填写外部能访问的端口号\${index}:6379</code> 这里 可以通过更该shell脚本的方式 让 data-1 和 2不能被外网访问（shell脚本加个判断 不是0的话 就不加这个）</p><h4 id="临时配置" tabindex="-1"><a class="header-anchor" href="#临时配置" aria-hidden="true">#</a> 临时配置</h4><p>接着进入redis-1和redis-2容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> - it redis-1 <span class="token function">bash</span>
<span class="token comment"># 进入后 先连接上redis-cli并验证</span>
redis-cli <span class="token parameter variable">-a</span> 你的密码

<span class="token comment">#接着 运行如下命令</span>
SLAVEOF <span class="token number">172.38</span>.0.10 <span class="token number">6379</span>

<span class="token comment"># 如果主库设置了密码（redis-0） 则要进行验证</span>
config <span class="token builtin class-name">set</span> masterauth 主库密码

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个语法说明</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>slaveof <span class="token operator">&lt;</span>master-ip<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>master-port<span class="token operator">&gt;</span>。
 <span class="token operator">&lt;</span>master-ip<span class="token operator">&gt;</span>为主库服务ip，<span class="token operator">&lt;</span>master-port<span class="token operator">&gt;</span>表示主库所在端口，默认6379 配置本库是谁的从库
config <span class="token builtin class-name">set</span> masterauth <span class="token operator">&lt;</span>master-password<span class="token operator">&gt;</span>。
 <span class="token operator">&lt;</span>master-password<span class="token operator">&gt;</span>即为主库访问密码 这个是拿来验证密码的
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着你就能在主机中看到：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>role:master
connected_slaves:2
slave0:ip<span class="token operator">=</span><span class="token number">172.38</span>.0.11,port<span class="token operator">=</span><span class="token number">6379</span>,state<span class="token operator">=</span>online,offset<span class="token operator">=</span><span class="token number">1512</span>,lag<span class="token operator">=</span><span class="token number">0</span>
slave1:ip<span class="token operator">=</span><span class="token number">172.38</span>.0.12,port<span class="token operator">=</span><span class="token number">6379</span>,state<span class="token operator">=</span>online,offset<span class="token operator">=</span><span class="token number">1512</span>,lag<span class="token operator">=</span><span class="token number">0</span>
master_failover_state:no-failover
master_replid:f9d1b67fba9d354ac724776540481cb8bf526353
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:1512
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1
repl_backlog_histlen:1512
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自己有两个从机</p><p>此时你的data目录应该是如下的样子</p><figure><img src="`+Q+`" alt="image-20211224231121355" tabindex="0" loading="lazy"><figcaption>image-20211224231121355</figcaption></figure><p>此时你的主机中进行任何操作 从机都能同步的收集到信息</p><h4 id="永久配置" tabindex="-1"><a class="header-anchor" href="#永久配置" aria-hidden="true">#</a> 永久配置</h4><p>之前那种配置方式比较痛苦---繁琐且每次重启之后都需要重新配置</p><p>我们可以在从机的配置文件中进行直接的配置</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>replicaof 主机IP 端口
masterauth 主机密码（如果有的话）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我这里的配置是</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>replicaof 172.38.0.10 6379
masterauth 123456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着重启docker 访问 效果依旧</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> MyRedis connected<span class="token operator">!</span>
<span class="token operator">&gt;</span> info replication
<span class="token comment"># Replication</span>
role:master
connected_slaves:2
slave0:ip<span class="token operator">=</span><span class="token number">172.38</span>.0.11,port<span class="token operator">=</span><span class="token number">6379</span>,state<span class="token operator">=</span>online,offset<span class="token operator">=</span><span class="token number">182</span>,lag<span class="token operator">=</span><span class="token number">1</span>
slave1:ip<span class="token operator">=</span><span class="token number">172.38</span>.0.12,port<span class="token operator">=</span><span class="token number">6379</span>,state<span class="token operator">=</span>online,offset<span class="token operator">=</span><span class="token number">182</span>,lag<span class="token operator">=</span><span class="token number">1</span>
master_failover_state:no-failover
master_replid:961372891ca5d9ba9ceaefdae8fdaaf9a894a677
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:182
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1
repl_backlog_histlen:182

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="主从复制的特点" tabindex="-1"><a class="header-anchor" href="#主从复制的特点" aria-hidden="true">#</a> 主从复制的特点</h3><p>主机可以设置值，从机不能set值，只能get</p><p>从机想要set值的话会报错</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> k2 v2
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> READONLY You can&#39;t <span class="token function">write</span> against a <span class="token builtin class-name">read</span> only replica.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>主机即使宕机了，从机的内容依旧完好无损</p><p>如果主机宕机了，它依旧是不能get</p><p>这也是主从复制的缺点</p><p>但是从机宕机了，主机和其他从机依旧能够正常运行</p><p>并且从机从新链接上来之后 可以直接获取到在宕机期间其他机子set的值</p><p>Slave（从机）启动成功连接到master后会发送一个sync同步命令</p><p>Master（主机）接到命令，启动后台的存盘进程，同时收集所有接收到用于修改数据集的命令，在后台进程执行完毕后，master将传送整个数据文件到slave，并完成一次完全同步</p><p>全量复制：而Slave服务在接收到数据库文件数据后，将其存盘并加载到内存中</p><p>增量复制：Master继续将新的所有收集到的修改命令依次传递给slave，完成同步</p><p>但是只要重新连接master，一次完全同步（全量复制）将被自动执行，我们的数据一定可以在从机中看到</p><p>如果说从机不想继续当了 可以通过以下命令取消它本身追随的主机</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>slaveof no one
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这条命令可以让从机变回master</p><h3 id="哨兵模式" tabindex="-1"><a class="header-anchor" href="#哨兵模式" aria-hidden="true">#</a> 哨兵模式</h3><p>​也叫自动选老大方式 之前的主从模式缺陷很多</p><p>​主机宕机了，就得手动选主机 这是最主要的</p><p>​所以哨兵模式来了，它能解决这个“谋朝篡位”的问题</p><p>​哨兵模式（Sentinel）是谋朝篡位的自动版，能监控后台主机是否故障，如果故障了根据投票数量<strong>自动将从库转换为主库</strong></p><p>​哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个<strong>独立的进程</strong>，会独立运行，其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例</p><p>​ <img src="`+W+'" alt="image-20211225122151292" loading="lazy"></p><p>可能你会想到一个问题---这个哨兵死了咋办</p><p>哨兵是可以配置多个滴~</p><figure><img src="'+Y+'" alt="image-20211225122339629" tabindex="0" loading="lazy"><figcaption>image-20211225122339629</figcaption></figure><p><strong>实际场景中，哨兵一定是多个的</strong></p><blockquote><p>假设主服务器宕机，哨兵1会先检测到这个结果，系统并不会马上进行failover（从新选举）的过程，仅仅是哨兵1主观认为主服务器是不可用的，这个现象称为<strong>主观下线</strong></p><p>当后面的哨兵也检测到主服务器不可用，并且达到一定数量时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover操作</p><p>切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的服务器切换为主机，这个过程也被称为<strong>客观下线</strong></p><p>主（宕机）---&gt;哨兵A、B、C检测主不可用---&gt;随机一个哨兵发起投票、哨兵们投票----&gt;故障转移---&gt;发布订阅----&gt;通知到redis服务器---&gt;切换主机</p><p><strong>注意：通常不会配置偶数的哨兵，偶数的哨兵有概率产生平票</strong></p></blockquote><p>如果说哨兵全挂了，那就是真滴GG</p><h3 id="配置哨兵" tabindex="-1"><a class="header-anchor" href="#配置哨兵" aria-hidden="true">#</a> 配置哨兵</h3>',208),gn={href:"https://www.cnblogs.com/joeymary/p/11492791.html",target:"_blank",rel:"noopener noreferrer"},bn=a(`<p>理论上来说。。有多少个服务就要配置多少个哨兵</p><p>但是....我的服务器性能比较拉胯（2g4h）不敢多开 就只开一个了</p><p>首先在redis-0（master）的dokcer中创建一个文件（需要先安装vim）</p><p>安装vim</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mv</span> /etc/apt/sources.list /etc/apt/sources.list.bak
<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;</span>/etc/apt/sources.list</span>
deb http://mirrors.ustc.edu.cn/debian stable main contrib non-free
deb http://mirrors.ustc.edu.cn/debian stable-updates main contrib non-free
EOF</span>
<span class="token function">apt</span> update
<span class="token function">apt</span> <span class="token function">install</span> <span class="token function">vim</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着创建一个文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> sentinel.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>键入如下内容</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token comment"># 哨兵模式的端口 如果要启动多个哨兵，则要配置多个端口 默认值时26379</span>
port 26379
<span class="token comment"># sentinel monitor 这个是固定的写法</span>
<span class="token comment"># mymaster 这个哨兵的名字</span>
<span class="token comment">#  127.0.0.1 6379 要监控的主机</span>
<span class="token comment"># 1代表的是同意主节点不可用的sentinel数量 也就是当多少个哨兵判定主机挂了之后 就会自动投票切换主机</span>
<span class="token comment"># 这里的1是指只要有1个哨兵认为主服务器已经下线，主服务器就会被判定为客观下线</span>
sentinel monitor mymaster 127.0.0.1 6379 1

<span class="token comment"># 哨兵的工作目录 下面是默认值</span>
dir /tmp

<span class="token comment"># 当redis中开启了requirepass foobared 授权密码之后 所有链接redis的客户端都要提供密码</span>
<span class="token comment"># 这里是设置哨兵链接主从的密码 注意 主从的访问密码都必须要相同</span>
sentinel auth-pass mymaster 密码

<span class="token comment"># 指定多少毫秒后 主节点没有响应哨兵则认为主节点下线 默认30s</span>
sentinel down-after-milliseconds mymaster 30000

<span class="token comment"># 配置发生了 重新选举 主备切换最多可以有多少个从机对新的master同步</span>
<span class="token comment"># 这个数字越小 完成failover所需的时间就越长</span>
<span class="token comment"># 但是这个数值越大 就意味着 多个slave因为replication不可用</span>
<span class="token comment"># 可以通过设置为1 保证每次只有一个slave</span>
sentinel parallel-syncs mymaster 1

<span class="token comment"># 故障转义的超时时间  默认是3分钟</span>
sentinel failover-timeout mymaster 180000

<span class="token comment"># 配置当某一个件事情发生的时候要执行的shell脚本，例如全部redis都挂的时候</span>
<span class="token comment"># notification-script是通知形脚本 注意 配置了就一定要有该文件 否则会启动不成功</span>
<span class="token comment">#sentinel notification-script mymaster /var/xxx/xxxx.sh</span>

<span class="token comment"># 下面这个是当重新选举出主节点时会执行的脚本 通知相关的人告知master地址已改变</span>
<span class="token comment">#sentinel client-reconfig-script mymaster /var/xxx/xxx.sh</span>


daemonize yes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server sentinel.conf <span class="token parameter variable">--sentinel</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="集群" tabindex="-1"><a class="header-anchor" href="#集群" aria-hidden="true">#</a> 集群</h2><figure><img src="`+nn+`" alt="image-20211225132812624" tabindex="0" loading="lazy"><figcaption>image-20211225132812624</figcaption></figure><p>集群最少需要三主三从（六台服务器）..</p><p>我们首先把之前配置的所有redis都删掉</p><p>执行如下步骤的前置条件：确保给docker创建了一个网关</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create redis <span class="token parameter variable">--subnet</span> <span class="token number">172.38</span>.0.0/16
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着我们用shell创建六个conf</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">index</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">0</span> <span class="token number">5</span><span class="token variable">)</span></span><span class="token punctuation">;</span><span class="token punctuation">\\</span>
<span class="token keyword">do</span> <span class="token punctuation">\\</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/halo/redis/data-<span class="token variable">\${index}</span>/conf
<span class="token function">touch</span> /home/halo/redis/data-<span class="token variable">\${index}</span>/conf/redis.conf
<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;&gt;</span> /home/halo/redis/data-<span class="token variable">\${index}</span>/conf/redis.conf</span>
port 6379
bind 0.0.0.0
protected-mode no
daemonize no

# 开启集群模式
cluster-enabled yes

# 设置节点的配置文件
#cluster-config-file nodes.conf

# 设置节点的失联时间
cluster-node-timeout 5000
# 集群各节点IP地址 注意 这个IP需要特别注意一下，如果要对外提供访问功能，需要填写宿主机的IP，如果填写docker分配的IP（172.x.x.x），可能会导致部分集群节点在跳转时失败
cluster-announce-ip 172.38.0.1<span class="token variable">\${index}</span>
# 集群节点映射端口 相当于监控哪个redis
cluster-announce-port 6379
# 集群总线端口 这个相当于所有集群节点交流的端口
cluster-announce-bus-port 16379
#appendonly yes

# 访问密码相关配置
requirepass 123456
masterauth 123456
EOF</span>
<span class="token keyword">done</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着再写一个shell脚本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">index</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">0</span> <span class="token number">5</span><span class="token variable">)</span></span><span class="token punctuation">;</span><span class="token punctuation">\\</span>
<span class="token keyword">do</span> <span class="token punctuation">\\</span>
<span class="token function">docker</span> run <span class="token parameter variable">-p</span> redis对外IP<span class="token variable">\${index}</span>:6379 <span class="token parameter variable">-p</span> <span class="token number">16379</span><span class="token variable">\${index}</span>:16379 <span class="token parameter variable">--name</span> redis-<span class="token variable">\${index}</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /home/halo/redis/data-<span class="token variable">\${index}</span>/data:/data <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /home/halo/redis/data-<span class="token variable">\${index}</span>/conf/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> <span class="token parameter variable">--net</span> redis <span class="token parameter variable">--ip</span> <span class="token number">172.38</span>.0.1<span class="token variable">\${index}</span> redis redis-server /etc/redis/redis.conf
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>172.38.0.10</p><p>172.38.0.15</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--cluster</span> create  <span class="token number">172.38</span>.0.10:6379  <span class="token number">172.38</span>.0.11:6379 <span class="token number">172.38</span>.0.12:6379  <span class="token number">172.38</span>.0.13:6379  <span class="token number">172.38</span>.0.14:6379  <span class="token number">172.38</span>.0.15:6379 <span class="token parameter variable">-a</span> u8li0XRo5tydsOOFtOBJJbuieF8HYZzGBL0CvvB3bGzQQLJa7RQYSvmSvZHQmEvSmwyzZGgceXzmIwWnt5Nz6T1r006QIOd1kOuM --cluster-relicas <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>redis-cli --cluster create xxx</p><p>查看命令用法: redis-cli --cluster help</p>`,26);function hn(fn,yn){const e=i("ExternalLinkIcon");return o(),c("div",null,[an,n("p",null,[s("推荐看这篇文章"),n("a",en,[s("https://blog.csdn.net/qq_24958783/article/details/107541425"),t(e)])]),tn,n("p",null,[n("a",pn,[s("https://www.cnblogs.com/hkgov/p/14276263.html"),t(e)])]),on,n("p",null,[n("a",cn,[s("https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using"),t(e)])]),ln,dn,rn,un,kn,mn,vn,n("p",null,[n("a",gn,[s("https://www.cnblogs.com/joeymary/p/11492791.html"),t(e)]),s(" 参照这篇文章")]),bn])}const _n=p(sn,[["render",hn],["__file","04-Redis.html.vue"]]);export{_n as default};
