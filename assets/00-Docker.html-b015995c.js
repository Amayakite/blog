import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as l,a as n,b as s,d as e,e as t}from"./app-2d4b26c1.js";const c="/images/SpringCloud/00-Docker/image-20220104155005672.png",r="/images/SpringCloud/00-Docker/image-20220104160301590.png",d="/images/SpringCloud/00-Docker/image-20220104163355780.png",u="/images/SpringCloud/00-Docker/image-20220104201536544.png",m="/images/SpringCloud/00-Docker/image-20220104204917613.png",k="/images/SpringCloud/00-Docker/image-20220104210746142.png",v="/images/SpringCloud/00-Docker/image-20220104211904044.png",b="/images/SpringCloud/00-Docker/image-20220104214250828.png",g="/images/SpringCloud/00-Docker/image-20220104214744642.png",h="/images/SpringCloud/00-Docker/image-20220104214827117.png",f="/images/SpringCloud/00-Docker/image-20220104215004188.png",q="/images/SpringCloud/00-Docker/image-20220104215807989.png",y="/images/SpringCloud/00-Docker/image-20220104220233176.png",x="/images/SpringCloud/00-Docker/image-20220104220735753.png",_="/images/SpringCloud/00-Docker/image-20220104221743328.png",w="/images/SpringCloud/00-Docker/image-20220104222935979.png",D="/images/SpringCloud/00-Docker/image-20220104224728009.png",S="/images/SpringCloud/00-Docker/image-20220104224931947.png",C="/images/SpringCloud/00-Docker/image-20220104225352499.png",O="/images/SpringCloud/00-Docker/image-20220104225509194.png",A="/images/SpringCloud/00-Docker/image-20220104225522848.png",P="/images/SpringCloud/00-Docker/image-20220104225620567.png",M="/images/SpringCloud/00-Docker/image-20220104225645879.png",I="/images/SpringCloud/00-Docker/image-20220104230006641.png",R="/images/SpringCloud/00-Docker/image-20220104230123481.png",T="/images/SpringCloud/00-Docker/image-20220104231223999.png",E="/images/SpringCloud/00-Docker/image-20220104234146298.png",N="/images/SpringCloud/00-Docker/image-20220104235934545.png",z="/images/SpringCloud/00-Docker/image-20220105000827945.png",L="/images/SpringCloud/00-Docker/image-20220105131700746.png",j="/images/SpringCloud/00-Docker/image-20220105140313843.png",H="/images/SpringCloud/00-Docker/image-20220105141103036.png",U="/images/SpringCloud/00-Docker/image-20220105140848278.png",F="/images/SpringCloud/00-Docker/image-20220105141218399.png",B="/images/SpringCloud/00-Docker/image-20220119174116464.png",V="/images/SpringCloud/00-Docker/image-20220119180519935.png",W="/images/SpringCloud/00-Docker/image-20220119180547179.png",K="/images/SpringCloud/00-Docker/image-20220119193933882.png",Y="/images/SpringCloud/00-Docker/image-20220119194007032.png",$="/images/SpringCloud/00-Docker/image-20220119194245470.png",G="/images/SpringCloud/00-Docker/image-20220119200457890.png",J="/images/SpringCloud/00-Docker/image-20220119200759277.png",Q="/images/SpringCloud/00-Docker/image-20220119200847859.png",X="/images/SpringCloud/00-Docker/image-20220119212308383.png",Z="/images/SpringCloud/00-Docker/image-20220119214058287.png",nn="/images/SpringCloud/00-Docker/image-20220119214548354.png",sn="/images/SpringCloud/00-Docker/image-20220119222108897.png",an="/images/SpringCloud/00-Docker/image-20220119222336320.png",en="/images/SpringCloud/00-Docker/image-20220119222915944.png",tn="/images/SpringCloud/00-Docker/image-20220119223715561.png",on="/images/SpringCloud/00-Docker/image-20220119223910780.png",pn="/images/SpringCloud/00-Docker/image-20220119232745245.png",ln="/images/SpringCloud/00-Docker/image-20220119234052518.png",cn="/images/SpringCloud/00-Docker/image-20220119234145202.png",rn="/images/SpringCloud/00-Docker/image-20220119234338393.png",dn="/images/SpringCloud/00-Docker/image-20220119234953131.png",un="/images/SpringCloud/00-Docker/image-20220119235138175.png",mn="/images/SpringCloud/00-Docker/image-20220119235724607.png",kn="/images/SpringCloud/00-Docker/image-20220120000044659.png",vn="/images/SpringCloud/00-Docker/image-20220120114317974.png",bn="/images/SpringCloud/00-Docker/image-20220120120148671.png",gn="/images/SpringCloud/00-Docker/image-20220120124603233.png",hn="/images/SpringCloud/00-Docker/image-20220120124734036.png",fn="/images/SpringCloud/00-Docker/image-20220120124915265.png",qn="/images/SpringCloud/00-Docker/image-20220120125100136.png",yn="/images/SpringCloud/00-Docker/image-20220120125230085.png",xn="/images/SpringCloud/00-Docker/image-20220120125354954.png",_n="/images/SpringCloud/00-Docker/image-20220120131325324.png",wn={},Dn=t('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>具体的不多说了…反正有这玩意我们无论是学习之后的东西，还是干别的事情，都很方便</p><p>别TM以为自己回一个 docker run 就会docker了</p><h3 id="docker为什么会出现" tabindex="-1"><a class="header-anchor" href="#docker为什么会出现" aria-hidden="true">#</a> Docker为什么会出现</h3><p>一款产品：开发===&gt;上线 两套环境：应用环境，应用配置</p><p>我在我的电脑上可以运行，但是因为版本更新之类的，导致服务不可用</p><p>配置环境是非常麻烦的一件事情，每个机器都要部署Redis、Mysql之类的环境，直接整非常痛苦</p><p>发布一个项目（Jar+Redis、Mysql、Rs）项目都不能带上环境打包</p><p>之前配置一个Redis、mysql、Es都比较痛苦了，不能跨平台</p><p>传统：开发jar，运维来做这些操作</p><p>现在：一个人，从头到尾</p><p>Docker给以上的问题，提出了解决方案</p><p>就像是app一样</p><ul><li>APK=&gt;发布=&gt;张三下载apk，安装即可</li><li>jar（环境）=&gt;打包项目带上环境（镜像）=&gt;发布到（docker仓库、商店）=&gt;下载我们发布的镜像，直接运行即可</li></ul><p>这样说吧，Docker也可以做集群，也可以做Docker集群（这涉及到的东西蛮多，有专门的东西来着，貌似现在K8S非常牛逼，等我开始工作了之后得取了解下K8s）</p><p>docker实质是轻量化的虚拟机(就像是VMware之类的，但是那些玩意非常大，非常痛苦)，创建一个空白虚拟机几秒就可以完成</p><p>在几年前，一般说到搭环境，首先想到的就是….虚拟机，奈何电脑不允许，开多一丢丢就非常痛苦了</p><p>Docker是基于Golang开发的，依赖于Golang天生的高并发，非常牛逼</p>',18),Sn={href:"https://docs.docker.com/",target:"_blank",rel:"noopener noreferrer"},Cn=t('<blockquote><p>DevOps(开发。运维)</p></blockquote><p>应用更快速的交付和部署</p><p>传统：一堆帮助文档，安装程序</p><p>Docker：打包镜像发布测试，一键运行</p><p>更便捷的升级和扩容：使用了Docker之后，我们的部署应用就跟搭积木一样</p><h3 id="docker的基本组成" tabindex="-1"><a class="header-anchor" href="#docker的基本组成" aria-hidden="true">#</a> Docker的基本组成</h3><figure><img src="'+c+`" alt="image-20220104155005672" tabindex="0" loading="lazy"><figcaption>image-20220104155005672</figcaption></figure><p>大概就是这样 嘛反正非常简单就是了，直到DockerFile之前Docker的操作就是非常简单的</p><p>反正Docker就三个东西</p><ul><li>镜像（Image） <ul><li>Docker镜像就好比是一个模板，可以通过这个模板来创建容器服务（tomcat镜像==&gt;run===&gt;tomcat01容器），可以通过这个镜像创建多个容器</li></ul></li><li>容器（container） <ul><li>Docker利用容器技术，独立运行或一组应用，通过镜像来创建</li><li>启动、停止、基本命令</li><li>目前就可以把这个容器理解成一个简单的linux系统</li></ul></li><li>仓库（repository） <ul><li>仓库就是存放镜像的地方</li><li>仓库分为共有和私有仓库 <ul><li>Docker Hub 官方</li><li>国内 阿里云之类的都有容器服务器</li></ul></li></ul></li></ul><h2 id="安装和使用docker" tabindex="-1"><a class="header-anchor" href="#安装和使用docker" aria-hidden="true">#</a> 安装和使用Docker</h2><h3 id="安装和卸载" tabindex="-1"><a class="header-anchor" href="#安装和卸载" aria-hidden="true">#</a> 安装和卸载</h3><p>非常简单 不用管原理</p><p>自动安装，二选一，两个都可以安装docker</p><p>个人推荐是一键安装</p><p>注意 安装之前 要sudo su 获取下root权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://get.docker.com <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> <span class="token function">docker</span> <span class="token parameter variable">--mirror</span> Aliyun
<span class="token comment"># 或者</span>
<span class="token function">curl</span> <span class="token parameter variable">-sSL</span> https://get.daocloud.io/docker <span class="token operator">|</span> <span class="token function">sh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果都是一样的</p><p>如果说之前安装过了，想要卸载的话</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> remove <span class="token function">docker</span> docker-engine docker.io containerd runc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>手动安装的话，步骤稍微有点复杂</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token punctuation">\\</span>
    apt-transport-https <span class="token punctuation">\\</span>
    ca-certificates <span class="token punctuation">\\</span>
    <span class="token function">curl</span> <span class="token punctuation">\\</span>
    gnupg-agent <span class="token punctuation">\\</span>
    software-properties-common
<span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -
<span class="token function">sudo</span> apt-key fingerprint 0EBFCD88
<span class="token function">sudo</span> add-apt-repository <span class="token punctuation">\\</span>
   <span class="token string">&quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/ \\
  <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> \\
  stable&quot;</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试docker是否安装成功</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> run hello-world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>出现这样的即可</p><figure><img src="`+r+`" alt="image-20220104160301590" tabindex="0" loading="lazy"><figcaption>image-20220104160301590</figcaption></figure><h3 id="更换国内源-可选" tabindex="-1"><a class="header-anchor" href="#更换国内源-可选" aria-hidden="true">#</a> 更换国内源（可选）</h3><p>需要sudo权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vi</span> /etc/docker/daemon.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>填入如下内容</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后重启即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl daemon-reload
<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里可以支持的有</p><p>Docker中国官方</p><p><code>https://registry.docker-cn.com</code></p><p>网易</p><p><code>http://hub-mirror.c.163.com</code></p><p>中科大</p><p><code>https://docker.mirrors.ustc.edu.cn</code></p><p>阿里云</p><p><code>https://{your_id}.mirror.aliyuncs.com</code></p><p>腾讯云</p><p><code>https://mirror.ccs.tencentyun.com</code></p><p>daocloud</p><p><code>http://{your_id}.m.daocloud.io</code></p><p>一般来说 用网易的或者阿里或者中科大都可</p>`,47),On=n("br",null,null,-1),An={href:"https://cr.console.aliyun.com/",target:"_blank",rel:"noopener noreferrer"},Pn=n("br",null,null,-1),Mn={href:"https://1234abcd.mirror.aliyuncs.com",target:"_blank",rel:"noopener noreferrer"},In=t(`<p>我的是<code>https://dvxjv1j7.mirror.aliyuncs.com</code></p><h3 id="非root用户使用docker" tabindex="-1"><a class="header-anchor" href="#非root用户使用docker" aria-hidden="true">#</a> 非root用户使用docker</h3><p>首先来个root用户 输入如下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#创建docker用户组 最新版本应该不用这一步了 直接下面的步骤即可</span>
 <span class="token function">sudo</span> <span class="token function">groupadd</span> <span class="token function">docker</span>
 <span class="token comment"># 应用用户加入docker用户组</span>
 <span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> <span class="token variable">\${<span class="token environment constant">USER</span>}</span>
 <span class="token comment"># 重启docker服务</span>
 <span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>
 <span class="token comment"># 进入指定的user</span>
 <span class="token function">su</span> - <span class="token variable">\${<span class="token environment constant">USER</span>}</span>
 <span class="token comment"># 测试</span>
 <span class="token function">docker</span> run hello-world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="image-20220104163355780" tabindex="0" loading="lazy"><figcaption>image-20220104163355780</figcaption></figure><h2 id="docker常用命令" tabindex="-1"><a class="header-anchor" href="#docker常用命令" aria-hidden="true">#</a> Docker常用命令</h2><h3 id="帮助命令" tabindex="-1"><a class="header-anchor" href="#帮助命令" aria-hidden="true">#</a> 帮助命令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> version
<span class="token function">docker</span> info <span class="token comment">#显示docker的系统信息</span>
<span class="token function">docker</span> xxx <span class="token parameter variable">--help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),Rn={href:"https://docs.docker.com/engine/reference/run/",target:"_blank",rel:"noopener noreferrer"},Tn=t(`<h3 id="images查看image" tabindex="-1"><a class="header-anchor" href="#images查看image" aria-hidden="true">#</a> images查看image</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images <span class="token parameter variable">--help</span>

<span class="token comment">## 结果</span>
Usage:  <span class="token function">docker</span> images <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>REPOSITORY<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span><span class="token punctuation">]</span>

List images

Options:
  -a, <span class="token parameter variable">--all</span>             列出所有的镜像
      <span class="token parameter variable">--digests</span>         Show digests
  -f, <span class="token parameter variable">--filter</span> filter   Filter output based on conditions provided 过滤的
      <span class="token parameter variable">--format</span> string   Pretty-print images using a Go template 同上
      --no-trunc        Don&#39;t truncate output
  -q, <span class="token parameter variable">--quiet</span>           只显示镜像的id
 <span class="token comment"># 可以组合使用</span>
 <span class="token function">docker</span> images <span class="token parameter variable">-aq</span>
 <span class="token comment"># 查看所有已经下载的镜像id</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="search搜索image" tabindex="-1"><a class="header-anchor" href="#search搜索image" aria-hidden="true">#</a> search搜索image</h3>`,3),En={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},Nn=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search <span class="token parameter variable">--help</span>

<span class="token comment"># 结果</span>
Usage:  <span class="token function">docker</span> search <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token environment constant">TERM</span>

Search the Docker Hub <span class="token keyword">for</span> images

Options:
  -f, <span class="token parameter variable">--filter</span> filter   Filter output based on conditions provided 过滤
      <span class="token parameter variable">--format</span> string   Pretty-print search using a Go template 渲染
      <span class="token parameter variable">--limit</span> int       Max number of search results <span class="token punctuation">(</span>default <span class="token number">25</span><span class="token punctuation">)</span> 分页
      --no-trunc        Don&#39;t truncate output
      
 <span class="token comment"># 例子： 搜索start大于3000的mysql镜像</span>
 <span class="token function">docker</span> search mysql <span class="token parameter variable">--filter</span><span class="token operator">=</span>STARS<span class="token operator">=</span><span class="token number">3000</span>
 
 <span class="token comment"># 结果：</span>
NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
mysql     MySQL is a widely used, open-source relation…   <span class="token number">11905</span>     <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>       
mariadb   MariaDB Server is a high performing <span class="token function">open</span> sou…   <span class="token number">4556</span>      <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pull下载image" tabindex="-1"><a class="header-anchor" href="#pull下载image" aria-hidden="true">#</a> pull下载image</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 如果不指定版本，默认是下载最新的</span>
<span class="token function">docker</span> pull mysql

<span class="token comment"># 可以指定版本 一定要在docker hub上找到的到的.. 例如mysql</span>
<span class="token comment"># https://hub.docker.com/_/mysql?tab=tags</span>
docekr pull mysql:5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rmi删除image" tabindex="-1"><a class="header-anchor" href="#rmi删除image" aria-hidden="true">#</a> rmi删除image</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi mysql
<span class="token comment"># 也可通过镜像id来删除</span>
<span class="token function">docker</span> rmi 7ebbdadjakdjakdladad
<span class="token comment"># 可以同时删除多个</span>
<span class="token function">docker</span> rmi mysql redis wordpress
<span class="token comment"># 当然 id也可以</span>
<span class="token function">docker</span> rmi xxxx xxx xxx

<span class="token comment"># 还可以通过表达式来删除多个，例如删除全部</span>
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> <span class="token variable">\${docker images -aq}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><p>我们有了镜像才能创建容器</p><p>我们先来拉一个ubuntu镜像吧~</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull ubuntu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="run命令一览" tabindex="-1"><a class="header-anchor" href="#run命令一览" aria-hidden="true">#</a> run命令一览</h3><p>只能说 docker最核心的地方就是这个了<br> 命令相当多</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--help</span>

<span class="token comment"># 结果</span>

Usage:  <span class="token function">docker</span> run <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span>

Run a <span class="token builtin class-name">command</span> <span class="token keyword">in</span> a new container

Options:
      --add-host list                  Add a custom host-to-IP mapping <span class="token punctuation">(</span>host:ip<span class="token punctuation">)</span>
  -a, <span class="token parameter variable">--attach</span> list                    Attach to STDIN, STDOUT or STDERR
      --blkio-weight uint16            Block IO <span class="token punctuation">(</span>relative weight<span class="token punctuation">)</span>, between <span class="token number">10</span> and <span class="token number">1000</span>, or <span class="token number">0</span> to disable <span class="token punctuation">(</span>default <span class="token number">0</span><span class="token punctuation">)</span>
      --blkio-weight-device list       Block IO weight <span class="token punctuation">(</span>relative device weight<span class="token punctuation">)</span> <span class="token punctuation">(</span>default <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      --cap-add list                   Add Linux capabilities
      --cap-drop list                  Drop Linux capabilities
      --cgroup-parent string           Optional parent cgroup <span class="token keyword">for</span> the container
      <span class="token parameter variable">--cgroupns</span> string                Cgroup namespace to use <span class="token punctuation">(</span>host<span class="token operator">|</span>private<span class="token punctuation">)</span>
                                       <span class="token string">&#39;host&#39;</span><span class="token builtin class-name">:</span>    Run the container <span class="token keyword">in</span> the Docker <span class="token function">host</span><span class="token string">&#39;s cgroup namespace
                                       &#39;</span>private<span class="token string">&#39;: Run the container in its own private cgroup namespace
                                       &#39;</span>&#39;:        Use the cgroup namespace as configured by the
                                                  default-cgroupns-mode option on the daemon <span class="token punctuation">(</span>default<span class="token punctuation">)</span>
      <span class="token parameter variable">--cidfile</span> string                 Write the container ID to the <span class="token function">file</span>
      --cpu-period int                 Limit CPU CFS <span class="token punctuation">(</span>Completely Fair Scheduler<span class="token punctuation">)</span> period
      --cpu-quota int                  Limit CPU CFS <span class="token punctuation">(</span>Completely Fair Scheduler<span class="token punctuation">)</span> <span class="token function">quota</span>
      --cpu-rt-period int              Limit CPU real-time period <span class="token keyword">in</span> microseconds
      --cpu-rt-runtime int             Limit CPU real-time runtime <span class="token keyword">in</span> microseconds
  -c, --cpu-shares int                 CPU shares <span class="token punctuation">(</span>relative weight<span class="token punctuation">)</span>
      <span class="token parameter variable">--cpus</span> decimal                   Number of CPUs
      --cpuset-cpus string             CPUs <span class="token keyword">in</span> <span class="token function">which</span> to allow execution <span class="token punctuation">(</span><span class="token number">0</span>-3, <span class="token number">0,1</span><span class="token punctuation">)</span>
      --cpuset-mems string             MEMs <span class="token keyword">in</span> <span class="token function">which</span> to allow execution <span class="token punctuation">(</span><span class="token number">0</span>-3, <span class="token number">0,1</span><span class="token punctuation">)</span>
  -d, <span class="token parameter variable">--detach</span>                         Run container <span class="token keyword">in</span> background and print container ID
      --detach-keys string             Override the key sequence <span class="token keyword">for</span> detaching a container
      <span class="token parameter variable">--device</span> list                    Add a <span class="token function">host</span> device to the container
      --device-cgroup-rule list        Add a rule to the cgroup allowed devices list
      --device-read-bps list           Limit <span class="token builtin class-name">read</span> rate <span class="token punctuation">(</span>bytes per second<span class="token punctuation">)</span> from a device <span class="token punctuation">(</span>default <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      --device-read-iops list          Limit <span class="token builtin class-name">read</span> rate <span class="token punctuation">(</span>IO per second<span class="token punctuation">)</span> from a device <span class="token punctuation">(</span>default <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      --device-write-bps list          Limit <span class="token function">write</span> rate <span class="token punctuation">(</span>bytes per second<span class="token punctuation">)</span> to a device <span class="token punctuation">(</span>default <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      --device-write-iops list         Limit <span class="token function">write</span> rate <span class="token punctuation">(</span>IO per second<span class="token punctuation">)</span> to a device <span class="token punctuation">(</span>default <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      --disable-content-trust          Skip image verification <span class="token punctuation">(</span>default <span class="token boolean">true</span><span class="token punctuation">)</span>
      <span class="token parameter variable">--dns</span> list                       Set custom DNS servers
      --dns-option list                Set DNS options
      --dns-search list                Set custom DNS search domains
      <span class="token parameter variable">--domainname</span> string              Container NIS domain name
      <span class="token parameter variable">--entrypoint</span> string              Overwrite the default ENTRYPOINT of the image
  -e, <span class="token parameter variable">--env</span> list                       Set environment variables
      --env-file list                  Read <span class="token keyword">in</span> a <span class="token function">file</span> of environment variables
      <span class="token parameter variable">--expose</span> list                    Expose a port or a range of ports
      <span class="token parameter variable">--gpus</span> gpu-request               GPU devices to <span class="token function">add</span> to the container <span class="token punctuation">(</span><span class="token string">&#39;all&#39;</span> to pass all GPUs<span class="token punctuation">)</span>
      --group-add list                 Add additional <span class="token function">groups</span> to <span class="token function">join</span>
      --health-cmd string              Command to run to check health
      --health-interval duration       Time between running the check <span class="token punctuation">(</span>ms<span class="token operator">|</span>s<span class="token operator">|</span>m<span class="token operator">|</span>h<span class="token punctuation">)</span> <span class="token punctuation">(</span>default 0s<span class="token punctuation">)</span>
      --health-retries int             Consecutive failures needed to report unhealthy
      --health-start-period duration   Start period <span class="token keyword">for</span> the container to initialize before starting health-retries
                                       countdown <span class="token punctuation">(</span>ms<span class="token operator">|</span>s<span class="token operator">|</span>m<span class="token operator">|</span>h<span class="token punctuation">)</span> <span class="token punctuation">(</span>default 0s<span class="token punctuation">)</span>
      --health-timeout duration        Maximum <span class="token function">time</span> to allow one check to run <span class="token punctuation">(</span>ms<span class="token operator">|</span>s<span class="token operator">|</span>m<span class="token operator">|</span>h<span class="token punctuation">)</span> <span class="token punctuation">(</span>default 0s<span class="token punctuation">)</span>
      <span class="token parameter variable">--help</span>                           Print usage
  -h, <span class="token parameter variable">--hostname</span> string                Container <span class="token function">host</span> name
      <span class="token parameter variable">--init</span>                           Run an init inside the container that forwards signals and reaps processes
  -i, <span class="token parameter variable">--interactive</span>                    Keep STDIN <span class="token function">open</span> even <span class="token keyword">if</span> not attached
      <span class="token parameter variable">--ip</span> string                      IPv4 address <span class="token punctuation">(</span>e.g., <span class="token number">172.30</span>.100.104<span class="token punctuation">)</span>
      <span class="token parameter variable">--ip6</span> string                     IPv6 address <span class="token punctuation">(</span>e.g., <span class="token number">2001</span>:db8::33<span class="token punctuation">)</span>
      <span class="token parameter variable">--ipc</span> string                     IPC mode to use
      <span class="token parameter variable">--isolation</span> string               Container isolation technology
      --kernel-memory bytes            Kernel memory limit
  -l, <span class="token parameter variable">--label</span> list                     Set meta data on a container
      --label-file list                Read <span class="token keyword">in</span> a line delimited <span class="token function">file</span> of labels
      <span class="token parameter variable">--link</span> list                      Add <span class="token function">link</span> to another container
      --link-local-ip list             Container IPv4/IPv6 link-local addresses
      --log-driver string              Logging driver <span class="token keyword">for</span> the container
      --log-opt list                   Log driver options
      --mac-address string             Container MAC address <span class="token punctuation">(</span>e.g., <span class="token number">92</span>:d0:c6:0a:29:33<span class="token punctuation">)</span>
  -m, <span class="token parameter variable">--memory</span> bytes                   Memory limit
      --memory-reservation bytes       Memory soft limit
      --memory-swap bytes              Swap limit equal to memory plus swap: <span class="token string">&#39;-1&#39;</span> to <span class="token builtin class-name">enable</span> unlimited swap
      --memory-swappiness int          Tune container memory swappiness <span class="token punctuation">(</span><span class="token number">0</span> to <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>default -1<span class="token punctuation">)</span>
      <span class="token parameter variable">--mount</span> <span class="token function">mount</span>                    Attach a filesystem <span class="token function">mount</span> to the container
      <span class="token parameter variable">--name</span> string                    Assign a name to the container
      <span class="token parameter variable">--network</span> network                Connect a container to a network
      --network-alias list             Add network-scoped <span class="token builtin class-name">alias</span> <span class="token keyword">for</span> the container
      --no-healthcheck                 Disable any container-specified HEALTHCHECK
      --oom-kill-disable               Disable OOM Killer
      --oom-score-adj int              Tune <span class="token function">host</span><span class="token string">&#39;s OOM preferences (-1000 to 1000)
      --pid string                     PID namespace to use
      --pids-limit int                 Tune container pids limit (set -1 for unlimited)
      --platform string                Set platform if server is multi-platform capable
      --privileged                     Give extended privileges to this container
  -p, --publish list                   Publish a container&#39;</span>s port<span class="token punctuation">(</span>s<span class="token punctuation">)</span> to the <span class="token function">host</span>
  -P, --publish-all                    Publish all exposed ports to random ports
      <span class="token parameter variable">--pull</span> string                    Pull image before running <span class="token punctuation">(</span><span class="token string">&quot;always&quot;</span><span class="token operator">|</span><span class="token string">&quot;missing&quot;</span><span class="token operator">|</span><span class="token string">&quot;never&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>default <span class="token string">&quot;missing&quot;</span><span class="token punctuation">)</span>
      --read-only                      Mount the container&#39;s root filesystem as <span class="token builtin class-name">read</span> only
      <span class="token parameter variable">--restart</span> string                 Restart policy to apply when a container exits <span class="token punctuation">(</span>default <span class="token string">&quot;no&quot;</span><span class="token punctuation">)</span>
      <span class="token parameter variable">--rm</span>                             Automatically remove the container when it exits
      <span class="token parameter variable">--runtime</span> string                 Runtime to use <span class="token keyword">for</span> this container
      --security-opt list              Security Options
      --shm-size bytes                 Size of /dev/shm
      --sig-proxy                      Proxy received signals to the process <span class="token punctuation">(</span>default <span class="token boolean">true</span><span class="token punctuation">)</span>
      --stop-signal string             Signal to stop a container <span class="token punctuation">(</span>default <span class="token string">&quot;SIGTERM&quot;</span><span class="token punctuation">)</span>
      --stop-timeout int               Timeout <span class="token punctuation">(</span>in seconds<span class="token punctuation">)</span> to stop a container
      --storage-opt list               Storage driver options <span class="token keyword">for</span> the container
      <span class="token parameter variable">--sysctl</span> map                     Sysctl options <span class="token punctuation">(</span>default map<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token parameter variable">--tmpfs</span> list                     Mount a tmpfs directory
  -t, <span class="token parameter variable">--tty</span>                            Allocate a pseudo-TTY
      <span class="token parameter variable">--ulimit</span> <span class="token builtin class-name">ulimit</span>                  Ulimit options <span class="token punctuation">(</span>default <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  -u, <span class="token parameter variable">--user</span> string                    Username or <span class="token environment constant">UID</span> <span class="token punctuation">(</span>format: <span class="token operator">&lt;</span>name<span class="token operator">|</span>uid<span class="token operator">&gt;</span><span class="token punctuation">[</span>:<span class="token operator">&lt;</span>group<span class="token operator">|</span>gid<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token parameter variable">--userns</span> string                  User namespace to use
      <span class="token parameter variable">--uts</span> string                     UTS namespace to use
  -v, <span class="token parameter variable">--volume</span> list                    Bind <span class="token function">mount</span> a volume
      --volume-driver string           Optional volume driver <span class="token keyword">for</span> the container
      --volumes-from list              Mount volumes from the specified container<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
  -w, <span class="token parameter variable">--workdir</span> string                 Working directory inside the container
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker最基本的启动容器" tabindex="-1"><a class="header-anchor" href="#docker最基本的启动容器" aria-hidden="true">#</a> docker最基本的启动容器</h3><p>为什么说是最基本的呢….因为这玩意非常五花八门</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">[</span>可选参数<span class="token punctuation">]</span> image的名字或者id

<span class="token comment"># 最简单的参数</span>
<span class="token parameter variable">--name</span> <span class="token string">&quot;abc&quot;</span> 用来区分容器
<span class="token parameter variable">--name</span><span class="token operator">=</span><span class="token string">&quot;abc&quot;</span> 同上
<span class="token parameter variable">-d</span> 			以后台方式启动
<span class="token parameter variable">-it</span>			使用交互方式运行，进入容器查看内容
<span class="token parameter variable">-p</span>			指定容器的端口，例如，要将容器内的8080端口映射到本地的6666端口，则：-p <span class="token number">6666</span>:8080
	<span class="token parameter variable">-p</span> 主机端口:容器端口 实际中百分之九十是用这个方式
	<span class="token parameter variable">-p</span> ip:主机端口:容器端口
	<span class="token parameter variable">-p</span> 容器端口
	<span class="token parameter variable">-p</span> 啥都不填 随机生成 没人用过这种方式
	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先来启动下刚刚pull的ubuntu</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> ubuntu <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入到ubuntu的bash目录（根路径），然后你可以像正常操作ubuntu那样，键入<code>exit</code>退出</p><h3 id="ps查看正在运行的容器" tabindex="-1"><a class="header-anchor" href="#ps查看正在运行的容器" aria-hidden="true">#</a> ps查看正在运行的容器</h3><p>语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Usage:  <span class="token function">docker</span> <span class="token function">ps</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span>

List containers

Options:
  -a, <span class="token parameter variable">--all</span>            <span class="token comment"># 列出当前正在运行的容器，和历史运行过的容器</span>
  -f, <span class="token parameter variable">--filter</span> filter   Filter output based on conditions provided
      <span class="token parameter variable">--format</span> string   Pretty-print containers using a Go template
  -n, <span class="token parameter variable">--last</span> int       <span class="token comment"># 语法 -n=number 或者 -n number number是int 可以通过这个参数来指定显示最近创建的容器</span>
  -l, <span class="token parameter variable">--latest</span>          Show the latest created container <span class="token punctuation">(</span>includes all states<span class="token punctuation">)</span>
      --no-trunc        Don&#39;t truncate output
  -q, <span class="token parameter variable">--quiet</span>         <span class="token comment"># 只显示容器的id，可以配合 -a 也就是： -qa 显示出所有的容器</span>
  -s, <span class="token parameter variable">--size</span>            Display total <span class="token function">file</span> sizes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般都是 -qa -a，用的多</p><h3 id="退出容器和不停止退出" tabindex="-1"><a class="header-anchor" href="#退出容器和不停止退出" aria-hidden="true">#</a> 退出容器和不停止退出</h3><p>我们先进入下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> ubuntu <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后你输入<code>exit</code>，再用<code>docker ps</code>什么都看不到</p><p>但如果你在进入这个容器后，按下<code>Ctrl+p+q</code> ---没错，就是这种组合快捷键，然后再到ps查看</p><figure><img src="`+u+`" alt="image-20220104201536544" tabindex="0" loading="lazy"><figcaption>image-20220104201536544</figcaption></figure><p>你就能看到你的容器了</p><h3 id="结束运行的容器和删除容器" tabindex="-1"><a class="header-anchor" href="#结束运行的容器和删除容器" aria-hidden="true">#</a> 结束运行的容器和删除容器</h3><p>结束：</p><p>比如说刚刚的那个ubuntu 它的id是b5187daa2403</p><p>我要直接停止它只需要</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop b5187daa2403
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后删除容器只需要</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> b5187daa2403
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意 要先停止 再删除</p><p>如果一定要直接删除的话</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 不走停止步骤 直接删除</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> b5187daa2403
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要批量删除的话：删除所有容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable">\${docker ps -qa}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者通过linux的管道符来批量删除</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span>
<span class="token comment"># xargs就是将上个命里的输出作为参数传递给docker rm这个命令</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动和停止容器的操作" tabindex="-1"><a class="header-anchor" href="#启动和停止容器的操作" aria-hidden="true">#</a> 启动和停止容器的操作</h3><p>比如说我现在启动了一个mysql</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mysql1 -p:3306:3306 <span class="token parameter variable">-d</span> mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我想停止它</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop mysql
<span class="token comment"># 或者kill，但通常情况下都是stop kill可能存在一些bug</span>
<span class="token comment"># kill是强制停止</span>
<span class="token function">docker</span> <span class="token function">kill</span> mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我想重启它</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> start mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我想直接重启它</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="后台启动" tabindex="-1"><a class="header-anchor" href="#后台启动" aria-hidden="true">#</a> 后台启动</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>docekr run <span class="token parameter variable">-d</span> ubuntu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有些时候 你启动了一个容器 比如说这个ubuntu</p><p>然后你会发现它不在你的ps正在运行的列表中</p><p>这是因为 这个容器没有任何正在运行的任务 所以会自动停止</p><p>如果docker容器使用后台运行 那么他必须要一个前台进程</p><p>docker如果发现没有应用，就会自动停止</p><h3 id="logs查看日志" tabindex="-1"><a class="header-anchor" href="#logs查看日志" aria-hidden="true">#</a> logs查看日志</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Usage:  <span class="token function">docker</span> logs <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER

Fetch the logs of a container

Options:
      <span class="token parameter variable">--details</span>        Show extra details provided to logs 显示提供给日志的额外详细信息
  -f, <span class="token parameter variable">--follow</span>         Follow log output 按照日志输出
      <span class="token parameter variable">--since</span> string   Show logs since timestamp <span class="token punctuation">(</span>e.g. <span class="token number">2013</span>-01-02T13:23:37Z<span class="token punctuation">)</span> or relative <span class="token punctuation">(</span>e.g. 42m <span class="token keyword">for</span> <span class="token number">42</span> minutes<span class="token punctuation">)</span>  显示自时间戳记起的日志（例如 <span class="token number">2013</span>-01-02T13： <span class="token number">23</span>:37Z）或相关（例如 42m 为 <span class="token number">42</span> 分钟）
  -n, <span class="token parameter variable">--tail</span> string    Number of lines to show from the end of the logs <span class="token punctuation">(</span>default <span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span> 从日志末尾显示的行数（默认为“all”） 例如  <span class="token parameter variable">--tail</span> <span class="token number">10</span> 就是显示最新的十条记录
  -t, <span class="token parameter variable">--timestamps</span>     Show timestamps 显示时间戳
      <span class="token parameter variable">--until</span> string   Show logs before a timestamp <span class="token punctuation">(</span>e.g. <span class="token number">2013</span>-01-02T13:23:37Z<span class="token punctuation">)</span> or relative <span class="token punctuation">(</span>e.g. 42m <span class="token keyword">for</span> <span class="token number">42</span> minutes<span class="token punctuation">)</span> 在时间戳（例如 <span class="token number">2013</span>-01-02T13:23:37Z）或相关（例如 42m 为 <span class="token number">42</span> 分钟）之前的日志
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些一般情况下都有可能用得上 最常用的大概是<code>-t</code>和<code>-f</code>以及<code>-n</code>了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看最近10条log，包含时间戳</span>
<span class="token function">docker</span> logs <span class="token parameter variable">-t</span> <span class="token parameter variable">-n</span> <span class="token number">10</span> 容器
<span class="token comment">#  显示42分钟之前的日志 包含时间戳</span>
 <span class="token function">docker</span> logs <span class="token parameter variable">--until</span> 42m <span class="token parameter variable">-t</span> 容器
<span class="token comment"># 显示xxx号开始，40分钟之前的日志 包含时间戳</span>
<span class="token function">docker</span> logs <span class="token parameter variable">--since</span> <span class="token string">&quot;2011-11-11&quot;</span> <span class="token parameter variable">--until</span> 40m 容器
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="top查看容器内的进程信息" tabindex="-1"><a class="header-anchor" href="#top查看容器内的进程信息" aria-hidden="true">#</a> top查看容器内的进程信息</h3><p>比如我有个容器运行了mysql 我想看看里面的进程信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">docker</span> <span class="token function">top</span> mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果</p><figure><img src="`+m+`" alt="image-20220104204917613" tabindex="0" loading="lazy"><figcaption>image-20220104204917613</figcaption></figure><h3 id="inspect查看容器的所有原信息" tabindex="-1"><a class="header-anchor" href="#inspect查看容器的所有原信息" aria-hidden="true">#</a> inspect查看容器的所有原信息</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">docker</span> inspect mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果非常多</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//容器ID</span>
        <span class="token property">&quot;Id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;9f21f81da25373b2896b7945ab6d6dafc69cf3f2e8623a428f95383dcb6e2f54&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// 创建时间</span>
        <span class="token property">&quot;Created&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2021-09-26T08:00:11.915899405Z&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// 默认的bash控制台</span>
        <span class="token property">&quot;Path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;docker-entrypoint.sh&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// 传递的参数</span>
        <span class="token property">&quot;Args&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token string">&quot;mysqld&quot;</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token comment">// 状态</span>
        <span class="token property">&quot;State&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;Status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;running&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Running&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Paused&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Restarting&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;OOMKilled&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Dead&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Pid&quot;</span><span class="token operator">:</span> <span class="token number">1003688</span><span class="token punctuation">,</span>
            <span class="token property">&quot;ExitCode&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Error&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;StartedAt&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2022-01-04T12:48:29.623170827Z&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;FinishedAt&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2021-12-21T09:14:39.402134711Z&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 是通过哪个image创建的</span>
        <span class="token property">&quot;Image&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sha256:0716d6ebcc1a61c5a296fcb187e71f93531e510d4e4400267e2e502103d0194c&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;ResolvConfPath&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/var/lib/docker/containers/9f21f81da25373b2896b7945ab6d6dafc69cf3f2e8623a428f95383dcb6e2f54/resolv.conf&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;HostnamePath&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/var/lib/docker/containers/9f21f81da25373b2896b7945ab6d6dafc69cf3f2e8623a428f95383dcb6e2f54/hostname&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;HostsPath&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/var/lib/docker/containers/9f21f81da25373b2896b7945ab6d6dafc69cf3f2e8623a428f95383dcb6e2f54/hosts&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;LogPath&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/var/lib/docker/containers/9f21f81da25373b2896b7945ab6d6dafc69cf3f2e8623a428f95383dcb6e2f54/9f21f81da25373b2896b7945ab6d6dafc69cf3f2e8623a428f95383dcb6e2f54-json.log&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// 主机的配置</span>
        <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/mysql&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;RestartCount&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Driver&quot;</span><span class="token operator">:</span> <span class="token string">&quot;overlay2&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Platform&quot;</span><span class="token operator">:</span> <span class="token string">&quot;linux&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;MountLabel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;ProcessLabel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;AppArmorProfile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;docker-default&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;ExecIDs&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
        <span class="token comment">// 端口之类的配置</span>
        <span class="token property">&quot;HostConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;Binds&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;ContainerIDFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;LogConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;json-file&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;Config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;NetworkMode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;PortBindings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;3306/tcp&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                    <span class="token punctuation">{</span>
                        <span class="token property">&quot;HostIp&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                        <span class="token property">&quot;HostPort&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3306&quot;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;RestartPolicy&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;no&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;MaximumRetryCount&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;AutoRemove&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;VolumeDriver&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;VolumesFrom&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;CapAdd&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;CapDrop&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;CgroupnsMode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;host&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Dns&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;DnsOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;DnsSearch&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;ExtraHosts&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;GroupAdd&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;IpcMode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;private&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Cgroup&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Links&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;OomScoreAdj&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;PidMode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Privileged&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;PublishAllPorts&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;ReadonlyRootfs&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;SecurityOpt&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;UTSMode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;UsernsMode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;ShmSize&quot;</span><span class="token operator">:</span> <span class="token number">67108864</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Runtime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;runc&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;ConsoleSize&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token number">0</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Isolation&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;CpuShares&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Memory&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;NanoCpus&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;CgroupParent&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;BlkioWeight&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;BlkioWeightDevice&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;BlkioDeviceReadBps&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;BlkioDeviceWriteBps&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;BlkioDeviceReadIOps&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;BlkioDeviceWriteIOps&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;CpuPeriod&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;CpuQuota&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;CpuRealtimePeriod&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;CpuRealtimeRuntime&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;CpusetCpus&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;CpusetMems&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Devices&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;DeviceCgroupRules&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;DeviceRequests&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;KernelMemory&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;KernelMemoryTCP&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;MemoryReservation&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;MemorySwap&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;MemorySwappiness&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;OomKillDisable&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;PidsLimit&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Ulimits&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;CpuCount&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;CpuPercent&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;IOMaximumIOps&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;IOMaximumBandwidth&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;MaskedPaths&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&quot;/proc/asound&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;/proc/acpi&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;/proc/kcore&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;/proc/keys&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;/proc/latency_stats&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;/proc/timer_list&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;/proc/timer_stats&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;/proc/sched_debug&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;/proc/scsi&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;/sys/firmware&quot;</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;ReadonlyPaths&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&quot;/proc/bus&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;/proc/fs&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;/proc/irq&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;/proc/sys&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;/proc/sysrq-trigger&quot;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;GraphDriver&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;Data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;LowerDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/var/lib/docker/overlay2/25d2c9aecfed8840414278a14f2f2549069a27ec07b268e0acd4f9649a462a51-init/diff:/var/lib/docker/overlay2/9f1869bece0ef786bf2728d5a9b5382d35f2d1129b0c34b7c8a4ce0ba96db65b/diff:/var/lib/docker/overlay2/5ba831e614fc8249b892624286b87d99de8a1cf0002af63dd5b1b78c14afb02c/diff:/var/lib/docker/overlay2/7a46fd9b22b210e0e03af3e7769c508ee6c664180d23b231cd4c1807a41c28f3/diff:/var/lib/docker/overlay2/04483e1d79d5ebe5dd267433079c9ae7bfe5f2ae1bd236763afee15631ac040f/diff:/var/lib/docker/overlay2/13875c72f323a9b4494d16aae350ccf2fb7cc017955dfa25b70033b71268e538/diff:/var/lib/docker/overlay2/f796562cea5598a9ad118d294e6a1753c9e56260d6dd9a2ab28c7e7721cb8487/diff:/var/lib/docker/overlay2/d9dce547d72843ffd026fea1a76b77bba364073acbb71ccdd3e03959730fc070/diff:/var/lib/docker/overlay2/2313046eeca90ad031a5210b5de4cb2596d9020e4a434b5a23031b321882cded/diff:/var/lib/docker/overlay2/ad4cb3141a2f4cf39e264b886cf31b0d303b11909a1f56b49fc7422c45035d1a/diff:/var/lib/docker/overlay2/c4c4cfbd4b4b01ca95b7cda32507f45c96e8a4e932c31f15311135416d831676/diff:/var/lib/docker/overlay2/f7eb97beb793d4b34a2d20c526f11f3369a9430fc8c9d22296121b60e1e39940/diff:/var/lib/docker/overlay2/ddbc25b697c64e7f46cb77e545aae9fde56d11d45778a6b2d13578fd61dcb7a6/diff&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;MergedDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/var/lib/docker/overlay2/25d2c9aecfed8840414278a14f2f2549069a27ec07b268e0acd4f9649a462a51/merged&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;UpperDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/var/lib/docker/overlay2/25d2c9aecfed8840414278a14f2f2549069a27ec07b268e0acd4f9649a462a51/diff&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;WorkDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/var/lib/docker/overlay2/25d2c9aecfed8840414278a14f2f2549069a27ec07b268e0acd4f9649a462a51/work&quot;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;overlay2&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Mounts&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token property">&quot;Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;volume&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;4e006693351035d468b0b79ddec3dec1710c96cce8424437b65405a4e7e20e03&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;Source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/var/lib/docker/volumes/4e006693351035d468b0b79ddec3dec1710c96cce8424437b65405a4e7e20e03/_data&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;Destination&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/var/lib/mysql&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;Driver&quot;</span><span class="token operator">:</span> <span class="token string">&quot;local&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;Mode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;RW&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;Propagation&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;Hostname&quot;</span><span class="token operator">:</span> <span class="token string">&quot;9f21f81da253&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Domainname&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;User&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;AttachStdin&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;AttachStdout&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;AttachStderr&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;ExposedPorts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;3306/tcp&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token property">&quot;33060/tcp&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Tty&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;OpenStdin&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;StdinOnce&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Env&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&quot;MYSQL_ROOT_PASSWORD=123456789&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;GOSU_VERSION=1.12&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;MYSQL_MAJOR=8.0&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;MYSQL_VERSION=8.0.26-1debian10&quot;</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Cmd&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&quot;mysqld&quot;</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Image&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Volumes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;/var/lib/mysql&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;WorkingDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Entrypoint&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&quot;docker-entrypoint.sh&quot;</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;OnBuild&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Labels&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 网络的一些信息</span>
        <span class="token property">&quot;NetworkSettings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;Bridge&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;SandboxID&quot;</span><span class="token operator">:</span> <span class="token string">&quot;46656b4e57a5381633087312627c8c66bfd36515ef7dbabb0978f4e94a71ad6a&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;HairpinMode&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;LinkLocalIPv6Address&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;LinkLocalIPv6PrefixLen&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Ports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;3306/tcp&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                    <span class="token punctuation">{</span>
                        <span class="token property">&quot;HostIp&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.0.0.0&quot;</span><span class="token punctuation">,</span>
                        <span class="token property">&quot;HostPort&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3306&quot;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token punctuation">{</span>
                        <span class="token property">&quot;HostIp&quot;</span><span class="token operator">:</span> <span class="token string">&quot;::&quot;</span><span class="token punctuation">,</span>
                        <span class="token property">&quot;HostPort&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3306&quot;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token property">&quot;33060/tcp&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;SandboxKey&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/var/run/docker/netns/46656b4e57a5&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;SecondaryIPAddresses&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;SecondaryIPv6Addresses&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">&quot;EndpointID&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1d1797f34b09434542f50e955a80ff45ab5cd6dad3f00c743af8fdacbfc39058&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Gateway&quot;</span><span class="token operator">:</span> <span class="token string">&quot;172.17.0.1&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;GlobalIPv6Address&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;GlobalIPv6PrefixLen&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;IPAddress&quot;</span><span class="token operator">:</span> <span class="token string">&quot;172.17.0.3&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;IPPrefixLen&quot;</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>
            <span class="token property">&quot;IPv6Gateway&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;MacAddress&quot;</span><span class="token operator">:</span> <span class="token string">&quot;02:42:ac:11:00:03&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Networks&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;bridge&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;IPAMConfig&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;Links&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;Aliases&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;NetworkID&quot;</span><span class="token operator">:</span> <span class="token string">&quot;d00c679d51fa5d3a4485eaadfdfcc7181aa634bfb13f553027f4b0fd4f2a3aa6&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;EndpointID&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1d1797f34b09434542f50e955a80ff45ab5cd6dad3f00c743af8fdacbfc39058&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;Gateway&quot;</span><span class="token operator">:</span> <span class="token string">&quot;172.17.0.1&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;IPAddress&quot;</span><span class="token operator">:</span> <span class="token string">&quot;172.17.0.3&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;IPPrefixLen&quot;</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;IPv6Gateway&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;GlobalIPv6Address&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;GlobalIPv6PrefixLen&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;MacAddress&quot;</span><span class="token operator">:</span> <span class="token string">&quot;02:42:ac:11:00:03&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;DriverOpts&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exec和attach进入容器" tabindex="-1"><a class="header-anchor" href="#exec和attach进入容器" aria-hidden="true">#</a> exec和attach进入容器</h3><p>这是非常重要的命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Usage:  <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER COMMAND <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span>

Run a <span class="token builtin class-name">command</span> <span class="token keyword">in</span> a running container

Options:
  -d, <span class="token parameter variable">--detach</span>               Detached mode: run <span class="token builtin class-name">command</span> <span class="token keyword">in</span> the background
      --detach-keys string   Override the key sequence <span class="token keyword">for</span> detaching a container
  -e, <span class="token parameter variable">--env</span> list             Set environment variables
      --env-file list        Read <span class="token keyword">in</span> a <span class="token function">file</span> of environment variables
  -i, <span class="token parameter variable">--interactive</span>          Keep STDIN <span class="token function">open</span> even <span class="token keyword">if</span> not attached
      <span class="token parameter variable">--privileged</span>           Give extended privileges to the <span class="token builtin class-name">command</span>
  -t, <span class="token parameter variable">--tty</span>                  Allocate a pseudo-TTY
  -u, <span class="token parameter variable">--user</span> string          Username or <span class="token environment constant">UID</span> <span class="token punctuation">(</span>format: <span class="token operator">&lt;</span>name<span class="token operator">|</span>uid<span class="token operator">&gt;</span><span class="token punctuation">[</span>:<span class="token operator">&lt;</span>group<span class="token operator">|</span>gid<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  -w, <span class="token parameter variable">--workdir</span> string       Working directory inside the container
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最常用的是：</p><p><code>-it</code> 交互模式</p><p>例如进入mysql</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后你就可以自由的更改你的mysql</p><p>或者还有一种方式可以进入容器</p><p>下面这个是正在运行的命令行（例如mysql 进入后你将会看到正在运行的mysql 注意 实际工程中百分之一万不会用到这个）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> attach mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>docker exec 进入容器后开启一个新的终端 可以在里面操作</li><li>docker attach 进入容器正在执行的终端，不会启动新的进程</li></ul><h3 id="cp-容器和主机的文件互相传递" tabindex="-1"><a class="header-anchor" href="#cp-容器和主机的文件互相传递" aria-hidden="true">#</a> cp--容器和主机的文件互相传递</h3><p>从容器内拷贝到主机上</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> 容器id:容器内的路径（要从根路径开始） 主机路径（也是要从根路径开始）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如</p><p>我现在的ubuntu容器内<code>/home</code>路径下有一个<code>abc.java</code></p><p>我想拷贝到我主机的<code>/home/root</code>路径下</p><p>无论容器有没有启动，都可以用cp来进行拷贝</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> ubuntu:/home/abc.java /home/root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果说要把主机的拷贝到容器 反着来就行了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> /home/root/abc.java ubuntu:/home
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="✨docker命令一图概括" tabindex="-1"><a class="header-anchor" href="#✨docker命令一图概括" aria-hidden="true">#</a> ✨Docker命令一图概括</h2><figure><img src="`+k+`" alt="image-20220104210746142" tabindex="0" loading="lazy"><figcaption>image-20220104210746142</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ttach    <span class="token comment">#当前shell下attach连接指定运行镜像</span>
build      <span class="token comment">#通过Dockerfile定制镜像</span>
commit      <span class="token comment">#提交当前容器为新的镜像</span>
<span class="token function">cp</span>     <span class="token comment">#从容器中拷贝指定文件或者目录到宿主机中</span>
create      <span class="token comment">#创建一个新的容器，同run 但不启动容器</span>
<span class="token function">diff</span>      <span class="token comment">#查看docker容器变化</span>
events    <span class="token comment">#从docker服务获取容器实时事件</span>
<span class="token builtin class-name">exec</span>    <span class="token comment">#在已存在的容器上运行命令</span>
<span class="token builtin class-name">export</span>    <span class="token comment">#导出容器的内容流作为一个tar归档文件(对应import)</span>
<span class="token function">history</span>    <span class="token comment">#展示一个镜像形成历史</span>
images    <span class="token comment">#列出系统当前镜像</span>
<span class="token function">import</span>    <span class="token comment">#从tar包中的内容创建一个新的文件系统映像(对应export)</span>
info     <span class="token comment">#显示系统相关信息</span>
inspect    <span class="token comment">#查看容器详细信息</span>
<span class="token function">kill</span>    <span class="token comment">#kill指定docker容器</span>
load     <span class="token comment">#从一个tar包中加载一个镜像(对应save)</span>
login    <span class="token comment">#注册或者登陆一个docker源服务器</span>
<span class="token builtin class-name">logout</span>    <span class="token comment">#从当前Docker registry退出</span>
logs    <span class="token comment">#输出当前容器日志信息</span>
pause    <span class="token comment">#暂停容器</span>
port    <span class="token comment">#查看映射端口对应的容器内部源端口</span>
<span class="token function">ps</span>    <span class="token comment">#列出容器列表</span>
pull      <span class="token comment">#从docker镜像源服务器拉取指定镜像或者库镜像</span>
push     <span class="token comment">#推送指定镜像或者库镜像至docker源服务器</span>
<span class="token function">rename</span>     <span class="token comment">#重命名容器</span>
restart    <span class="token comment">#重启运行的容器</span>
<span class="token function">rm</span>    <span class="token comment">#移除一个或者多个容器</span>
rmi    <span class="token comment">#移除一个或多个镜像(无容器使用该镜像才可以删除，否则需要删除相关容器才可以继续或者-f强制删除)</span>
run      <span class="token comment">#创建一个新的容器并运行一个命令</span>
save    <span class="token comment">#保存一个镜像为一个tar包(对应load)</span>
search     <span class="token comment">#在dockerhub中搜索镜像</span>
start   <span class="token comment">#启动容器</span>
stats      <span class="token comment">#统计容器使用资源</span>
stop    <span class="token comment">#停止容器</span>
tag          <span class="token comment">#给源中镜像打标签</span>
<span class="token function">top</span>      <span class="token comment">#查看容器中运行的进程信息</span>
unpause     <span class="token comment">#取消暂停容器</span>
version   <span class="token comment">#查看容器版本号</span>
<span class="token function">wait</span>       <span class="token comment">#截取容器停止时的退出状态值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="部署测试" tabindex="-1"><a class="header-anchor" href="#部署测试" aria-hidden="true">#</a> 部署测试</h2><h3 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx" aria-hidden="true">#</a> Nginx</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> nginx01 <span class="token parameter variable">-p</span> <span class="token number">3344</span>:80 nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> localhost:3344
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Welcome to nginx!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
            <span class="token selector">html</span> <span class="token punctuation">{</span> <span class="token property">color-scheme</span><span class="token punctuation">:</span> light dark<span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token selector">body</span> <span class="token punctuation">{</span> <span class="token property">width</span><span class="token punctuation">:</span> 35em<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
                <span class="token property">font-family</span><span class="token punctuation">:</span> Tahoma<span class="token punctuation">,</span> Verdana<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span> <span class="token punctuation">}</span>
        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Welcome to nginx!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If you see this page, the nginx web server is successfully installed and
            working. Further configuration is required.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>For online documentation and support please refer to
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://nginx.org/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>nginx.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
            Commercial support is available at
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://nginx.com/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>nginx.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>Thank you for using nginx.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+'" alt="image-20220104211904044" tabindex="0" loading="lazy"><figcaption>image-20220104211904044</figcaption></figure><h3 id="tomcat以及启动时-rm命令" tabindex="-1"><a class="header-anchor" href="#tomcat以及启动时-rm命令" aria-hidden="true">#</a> Tomcat以及启动时--rm命令</h3>',106),zn={href:"https://hub.docker.com/_/tomcat",target:"_blank",rel:"noopener noreferrer"},Ln=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">-p</span> <span class="token number">8888</span>:8080 tomcat:9.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个<code>--rm</code>意思其实非产简单---用完就自动的删除（退出后自动执行docker rm xxx）</p><p>但是image不会删除</p><p>接着访问 404 正常</p><figure><img src="`+b+`" alt="image-20220104214250828" tabindex="0" loading="lazy"><figcaption>image-20220104214250828</figcaption></figure><p>说明我们的tomcat下没有配置root</p><p>我们退出 后台启动并进入一下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> tomcat <span class="token parameter variable">-p</span> <span class="token number">8888</span>:8080 tomcat:9.0
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> tomcat <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+g+'" alt="image-20220104214744642" tabindex="0" loading="lazy"><figcaption>image-20220104214744642</figcaption></figure><p>可以看到 有两个webapps文件夹 已知webapps里面没有东西</p><p>所以我们看看webapps.dist</p><figure><img src="'+h+`" alt="image-20220104214827117" tabindex="0" loading="lazy"><figcaption>image-20220104214827117</figcaption></figure><p>果真都在这</p><p>所以把他重命名即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rm</span> <span class="token parameter variable">-rf</span> webapps/
<span class="token function">mv</span> webapps.dist/ webapps
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着访问，东西就有了</p><figure><img src="`+f+'" alt="image-20220104215004188" tabindex="0" loading="lazy"><figcaption>image-20220104215004188</figcaption></figure><h3 id="elasticsearch-kibana图形化面板" tabindex="-1"><a class="header-anchor" href="#elasticsearch-kibana图形化面板" aria-hidden="true">#</a> ElasticSearch+Kibana图形化面板</h3><p>md 不太想部署这个玩意 主要是太费内存了</p>',19),jn={href:"https://hub.docker.com/_/elasticsearch",target:"_blank",rel:"noopener noreferrer"},Hn=t(`<p>他需要两行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 这里是创建一个网关 之后会说</span>
<span class="token function">docker</span> network create somenetwork
<span class="token comment"># -e是额外的参数 -net是指定网关</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> elasticsearch <span class="token parameter variable">--net</span> somenetwork <span class="token parameter variable">-p</span> <span class="token number">9200</span>:9200 <span class="token parameter variable">-p</span> <span class="token number">9300</span>:9300 <span class="token parameter variable">-e</span> <span class="token string">&quot;discovery.type=single-node&quot;</span> elasticsearch:7.16.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动完毕后 如果你的服务器是1g2h，建议不要这样做…</p><p>你可以输入：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stats
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看服务状态</p><figure><img src="`+q+`" alt="image-20220104215807989" tabindex="0" loading="lazy"><figcaption>image-20220104215807989</figcaption></figure><p>md 两个G太卡了吧这</p><p>接下来测试下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> localhost:9200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;81343bfa8cac&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;cluster_name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;docker-cluster&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;cluster_uuid&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;U-jQ8AFxSFOS2mfEVHbsJw&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;number&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;7.16.2&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build_flavor&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build_type&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;docker&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build_hash&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;2b937c44140b6559905130a8650c64dbd0879cfb&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build_date&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;2021-12-18T19:42:46.604893745Z&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build_snapshot&quot;</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lucene_version&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;8.10.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;minimum_wire_compatibility_version&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;6.8.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;minimum_index_compatibility_version&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;6.0.0-beta1&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;tagline&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;You Know, for Search&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题来了：我们改如何控制它的内存</p>`,13),Un={href:"https://www.elastic.co/guide/en/elasticsearch/reference/index.html",target:"_blank",rel:"noopener noreferrer"},Fn=t('<p>点进去 找到自己的版本</p><figure><img src="'+y+`" alt="image-20220104220233176" tabindex="0" loading="lazy"><figcaption>image-20220104220233176</figcaption></figure><p>emm不对啊 我们用过es 可以通过修改配置文件来解决啊</p><p>我们先kill这个玩意</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> elasticsearch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后重新指定参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> elasticsearch <span class="token parameter variable">--net</span> somenetwork <span class="token parameter variable">-p</span> <span class="token number">9200</span>:9200 <span class="token parameter variable">-p</span> <span class="token number">9300</span>:9300 <span class="token parameter variable">-e</span> <span class="token string">&quot;discovery.type=single-node&quot;</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">&quot;-Xms64m -Xmx512m&quot;</span> elasticsearch:7.16.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里是给他启动的时候加参数 我们加了一个jvm的内存限制参数</p>`,8),Bn={href:"https://www.cnblogs.com/likehua/p/3369823.html",target:"_blank",rel:"noopener noreferrer"},Vn=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> xxx.class <span class="token parameter variable">-Xms64m</span> <span class="token parameter variable">-Xmx512m</span> <span class="token assign-left variable">discovery.type</span><span class="token operator">=</span>single-node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+x+`" alt="image-20220104220735753" tabindex="0" loading="lazy"><figcaption>image-20220104220735753</figcaption></figure><p>是不是好多了</p><p>再访问下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> localhost:9200
<span class="token comment"># 结果</span>
<span class="token punctuation">{</span>
  <span class="token string">&quot;name&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;d9715b359c73&quot;</span>,
  <span class="token string">&quot;cluster_name&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;docker-cluster&quot;</span>,
  <span class="token string">&quot;cluster_uuid&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;VjWWATzsTKWEreDkUfjoPg&quot;</span>,
  <span class="token string">&quot;version&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;number&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;7.16.2&quot;</span>,
    <span class="token string">&quot;build_flavor&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;default&quot;</span>,
    <span class="token string">&quot;build_type&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;docker&quot;</span>,
    <span class="token string">&quot;build_hash&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;2b937c44140b6559905130a8650c64dbd0879cfb&quot;</span>,
    <span class="token string">&quot;build_date&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;2021-12-18T19:42:46.604893745Z&quot;</span>,
    <span class="token string">&quot;build_snapshot&quot;</span> <span class="token builtin class-name">:</span> false,
    <span class="token string">&quot;lucene_version&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;8.10.1&quot;</span>,
    <span class="token string">&quot;minimum_wire_compatibility_version&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;6.8.0&quot;</span>,
    <span class="token string">&quot;minimum_index_compatibility_version&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;6.0.0-beta1&quot;</span>
  <span class="token punctuation">}</span>,
  <span class="token string">&quot;tagline&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;You Know, for Search&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来再启动下kibana</p>`,6),Wn={href:"https://hub.docker.com/_/kibana",target:"_blank",rel:"noopener noreferrer"},Kn=t(`<p>两条命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create somenetwork
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> kibana <span class="token parameter variable">--net</span> somenetwork <span class="token parameter variable">-p</span> <span class="token number">5601</span>:5601 kibana:tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们之前已经创建过网关了，所以第一条不需要 只需要第二条即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> kibana <span class="token parameter variable">--net</span> somenetwork <span class="token parameter variable">-p</span> <span class="token number">5601</span>:5601 kibana:7.16.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着等待一会儿，浏览器进入5601就可以了</p><figure><img src="`+_+'" alt="image-20220104221743328" tabindex="0" loading="lazy"><figcaption>image-20220104221743328</figcaption></figure><h3 id="docker可视化web图形管理页面" tabindex="-1"><a class="header-anchor" href="#docker可视化web图形管理页面" aria-hidden="true">#</a> Docker可视化web图形管理页面</h3><p>这里先使用<strong>Portainer</strong></p>',8),Yn={href:"https://docs.portainer.io/v/ce-2.9/start/install/agent/docker/linux",target:"_blank",rel:"noopener noreferrer"},$n=t(`<p>一条命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9001</span>:9001 <span class="token parameter variable">--name</span> portainer_agent <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token parameter variable">-v</span> /var/lib/docker/volumes:/var/lib/docker/volumes cr.portainer.io/portainer/agent:2.9.3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>restart指的是会跟随系统启动而启动</p><p>-v 是映射本地路径</p><p>–privileged是授权让其能访问docker和其他对应数据的</p><p>当然也有国人汉化版本的</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search portainer
<span class="token comment"># 结果：</span>
NAME                                DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
<span class="token number">6053537</span>/portainer-ce                portainer-ce中文汉化版                               <span class="token number">16</span>
lihaixin/portainer                  <span class="token function">docker</span> ui                                       <span class="token number">15</span>                   <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>
<span class="token number">6053537</span>/portainer                   portainer中文版，完整汉化，汉化程度95%以上                     <span class="token number">6</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以我们只需要：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9001 <span class="token parameter variable">--name</span> portainer_agent <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token parameter variable">-v</span> /var/lib/docker/volumes:/var/lib/docker/volumes <span class="token number">6053537</span>/portainer-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我这里省事 设置了9k</p><p>等待他部署好，访问<code>9000</code>端口设置账号密码即可</p><p>接下来看看最终效果</p><figure><img src="`+w+'" alt="image-20220104222935979" tabindex="0" loading="lazy"><figcaption>image-20220104222935979</figcaption></figure><h2 id="docker镜像说明" tabindex="-1"><a class="header-anchor" href="#docker镜像说明" aria-hidden="true">#</a> Docker镜像说明</h2><h3 id="镜像是啥" tabindex="-1"><a class="header-anchor" href="#镜像是啥" aria-hidden="true">#</a> 镜像是啥</h3><p>镜像是一个轻量级，可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需要的所有内容，包括代码、运行时的库、环境变量和配置文件</p><p>所有的应用，直接打包成docker镜像，就可以跑起来</p><p>如何得到镜像</p><ul><li>从远程仓库clone</li><li>从朋友那嫖</li><li>自己制作一个镜像Dockerfile</li></ul><h3 id="docker镜像加载原理" tabindex="-1"><a class="header-anchor" href="#docker镜像加载原理" aria-hidden="true">#</a> Docker镜像加载原理</h3><blockquote><p>UnionFS（联合文件系统）</p></blockquote><p>这是一种分层、轻量级、高性能的文件系统，<strong>它支持对文件系统的修改作为一次提交来一层层叠加</strong>，同时可以将不同目录挂载到同一个虚拟文件系统下，UnionFS是Docker镜像的基础，镜像可以通过分层来继承（没有父镜像），可以制作各种具体的应用镜像</p><figure><img src="'+D+'" alt="image-20220104224728009" tabindex="0" loading="lazy"><figcaption>image-20220104224728009</figcaption></figure><p>特性：一次性同时加载多个文件系统，从外表看起来，只看得到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统包含所有底层的文件目录</p><p>比如说我们先有两个 镜像 一个tomcat 一个mysql 都用上了同版本的ubuntu 然后他们其中一个的ubuntu将会公用（也就是有一方不需要启动ubuntu，直接用另外一个的）</p><figure><img src="'+S+'" alt="image-20220104224931947" tabindex="0" loading="lazy"><figcaption>image-20220104224931947</figcaption></figure><figure><img src="'+C+'" alt="image-20220104225352499" tabindex="0" loading="lazy"><figcaption>image-20220104225352499</figcaption></figure><figure><img src="'+O+'" alt="image-20220104225509194" tabindex="0" loading="lazy"><figcaption>image-20220104225509194</figcaption></figure><figure><img src="'+A+'" alt="image-20220104225522848" tabindex="0" loading="lazy"><figcaption>image-20220104225522848</figcaption></figure><figure><img src="'+P+'" alt="image-20220104225620567" tabindex="0" loading="lazy"><figcaption>image-20220104225620567</figcaption></figure><figure><img src="'+M+'" alt="image-20220104225645879" tabindex="0" loading="lazy"><figcaption>image-20220104225645879</figcaption></figure><figure><img src="'+I+'" alt="image-20220104230006641" tabindex="0" loading="lazy"><figcaption>image-20220104230006641</figcaption></figure><figure><img src="'+R+`" alt="image-20220104230123481" tabindex="0" loading="lazy"><figcaption>image-20220104230123481</figcaption></figure><h2 id="✨commit镜像" tabindex="-1"><a class="header-anchor" href="#✨commit镜像" aria-hidden="true">#</a> ✨Commit镜像</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> commit 提交容器成为一个新的副本
<span class="token comment"># 命令和git类似</span>
<span class="token function">docker</span> commit <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">&quot;提交的描述信息&quot;</span> <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">&quot;作者&quot;</span> 容器id 目标镜像名:<span class="token punctuation">[</span>Tag<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先启动一个镜像 并做一些修改</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> tomcat <span class="token parameter variable">-p</span> <span class="token number">8888</span>:8080 <span class="token parameter variable">-d</span> tomcat
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> tomcat <span class="token function">bash</span>
<span class="token function">mv</span> webapps.dist/* webapps/
<span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来提交</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> commit <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">&quot;一个平平淡淡的人&quot;</span> <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">&quot;add webapps app&quot;</span> tomcat tomcat02:1.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来你就能在<code>dokcer images</code>中看到它了</p><figure><img src="`+T+`" alt="image-20220104231223999" tabindex="0" loading="lazy"><figcaption>image-20220104231223999</figcaption></figure><p>以后我们就可以直接使用我们修改过后的镜像了</p><p>先把正在用的镜像删掉</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> tomcat
<span class="token comment"># 再启动自己的</span>
<span class="token function">docker</span> run <span class="token parameter variable">--name</span> myTomcat <span class="token parameter variable">-p</span> <span class="token number">8888</span>:8080 <span class="token parameter variable">-d</span> tomcat02:1.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">curl</span> localhost:8888
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你就能看到我们之前整的内容了</p><p>这玩意就像是Git一样 方便快捷好用</p><p>好，如果你看到了这里，恭喜你，你已经真正的<strong>入门</strong>了Docker</p><h2 id="✨容器数据卷" tabindex="-1"><a class="header-anchor" href="#✨容器数据卷" aria-hidden="true">#</a> ✨容器数据卷</h2><h3 id="概述-1" tabindex="-1"><a class="header-anchor" href="#概述-1" aria-hidden="true">#</a> 概述</h3><p>我们的数据如果都存储在容器之中，那么只要容器一删除，数据就会丢失</p><p>现在有一个需求：让数据持久化到本地硬盘，例如Mysql的</p><p>所以说我们可以通过配置容器数据卷 来让数据存储到本地 从而实现持久化</p><p>这就是卷技术--人话：将我们容器的目录，挂载到Linux上面</p><h3 id="使用数据卷-映射" tabindex="-1"><a class="header-anchor" href="#使用数据卷-映射" aria-hidden="true">#</a> 使用数据卷-映射</h3><blockquote><p>方式一：直接使用命令来挂载 <code>-v</code></p><p>-v 表示， 初始化时，主机目录/文件 覆盖容器目录/文件 之后开始双向同步</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-v</span> 主机目录:容器内目录 可以配置多个 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如我们把自己之前创建的tomcat镜像内的webappss存放在</p><p><code>/home/root/java/webappss</code>这个目录下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> testTomcat <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8888</span>:8080 <span class="token parameter variable">-v</span> /home/你的用户名/java/webapps:/usr/local/tomcat/webapps tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着你会发现无论是容器内还是外部的文件内 都没有任何内容</p><p>但是我们可以自己手动添加一个</p><p>首先在自己的tomcat目录下新建一个ROOT文件夹和一个index.html，html文件内写一个Hello World（注意 要root权限）</p><p>接着curl测试下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">curl</span> localhost:8888
 <span class="token comment"># 结果</span>
 Hello World
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们继续看下这个容器的信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect testTomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到一个信息</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;Mounts&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bind&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// 本机地址</span>
        <span class="token property">&quot;Source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/home/root/java/webapps&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// 容器内地址</span>
        <span class="token property">&quot;Destination&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/usr/local/tomcat/webapps&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Mode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;RW&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Propagation&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rprivate&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们尝试在这个docker容器内加一点东西</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> testTomcat <span class="token function">bash</span>
<span class="token builtin class-name">cd</span> webapps
<span class="token function">mkdir</span> home 
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Hello Home&quot;</span><span class="token operator">&gt;</span>index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着返回本机 可以看到 本地的路径下也多了个文件夹</p><figure><img src="`+E+`" alt="image-20220104234146298" tabindex="0" loading="lazy"><figcaption>image-20220104234146298</figcaption></figure><p>接着我们访问下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> localhost:8888/home/
<span class="token comment"># 结果：Hello Home</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当然 也可以指定文件 例如nginx制定本机的配置文件映射到容器内 这里就不多做讨论了</p><h3 id="具名挂载和匿名挂载" tabindex="-1"><a class="header-anchor" href="#具名挂载和匿名挂载" aria-hidden="true">#</a> 具名挂载和匿名挂载</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 匿名挂载</span>
<span class="token parameter variable">-v</span> 容器内路径（这个的主机地址之后会说到） 或者 主机路径:容器路径
<span class="token comment"># 这样会自动生成主机路径</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以通过</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来查看映射卷</p><p>通常来说是这样的</p><figure><img src="`+N+`" alt="image-20220104235934545" tabindex="0" loading="lazy"><figcaption>image-20220104235934545</figcaption></figure><p>就相当于是Java的匿名内部类一样</p><p>当然 查看想要的卷的信息也非常简单</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect 卷名，例如：0ad3c188c086845507bb70c08b8f0763f5d6f210b92d0529fcd56abbd9edc2ae
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;CreatedAt&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2021-09-26T14:46:54+08:00&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Driver&quot;</span><span class="token operator">:</span> <span class="token string">&quot;local&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Labels&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Mountpoint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/var/lib/docker/volumes/0ad3c188c086845507bb70c08b8f0763f5d6f210b92d0529fcd56abbd9edc2ae/_data&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0ad3c188c086845507bb70c08b8f0763f5d6f210b92d0529fcd56abbd9edc2ae&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Options&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Scope&quot;</span><span class="token operator">:</span> <span class="token string">&quot;local&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要使用具名挂载的话，只需要：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">5333</span>:80 <span class="token parameter variable">--name</span> test_nginx <span class="token parameter variable">-v</span> nginx-test:/etc/nginx nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着查看：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">docker</span> volume <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+z+`" alt="image-20220105000827945" tabindex="0" loading="lazy"><figcaption>image-20220105000827945</figcaption></figure><p>接着看看他的信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect nginx-test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token string">&quot;CreatedAt&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;2022-01-05T00:07:04+08:00&quot;</span>,
        <span class="token string">&quot;Driver&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;local&quot;</span>,
        <span class="token string">&quot;Labels&quot;</span><span class="token builtin class-name">:</span> null,
        <span class="token string">&quot;Mountpoint&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;/var/lib/docker/volumes/nginx-test/_data&quot;</span>,
        <span class="token string">&quot;Name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;nginx-test&quot;</span>,
        <span class="token string">&quot;Options&quot;</span><span class="token builtin class-name">:</span> null,
        <span class="token string">&quot;Scope&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;local&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>挂载到了<code>/var/lib/docker/volumes/赋予的数据卷的名称/_data目录下</code></p><p>所以docker所有没有指定的 都在这</p><h3 id="总结以及读写权限" tabindex="-1"><a class="header-anchor" href="#总结以及读写权限" aria-hidden="true">#</a> 总结以及读写权限</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 指定路径挂载形式</span>
<span class="token punctuation">-</span>v 容器内路径 <span class="token comment"># 匿名挂载</span>
<span class="token punctuation">-</span>v 卷名<span class="token punctuation">:</span>容器内路径 <span class="token comment"># 具名挂载</span>
<span class="token punctuation">-</span>v 主机路径<span class="token punctuation">:</span>容器内路径 <span class="token comment"># 指定路径挂载</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后还有一个参数</p><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 nginx <span class="token parameter variable">-v</span> jump-nginx:/etc/nginx:ro nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个-ro</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>:ro <span class="token comment">#表示只读 readonly</span>
:rw <span class="token comment">#表示可读可写 readwrite</span>
<span class="token comment"># 如果设置了ro，容器内将无法修改该文件 只能读取该文件</span>

反正看到ro就说明该路径只能是我们主机来操作，容器内部是无法修改的，默认是rw，
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一个最简单的dockerfile" tabindex="-1"><a class="header-anchor" href="#一个最简单的dockerfile" aria-hidden="true">#</a> 一个最简单的dockerfile</h3><p>可以把这个理解为用文件来替代我们手动commit镜像</p><p>我们随便找一个文件夹，里面创建一个dockerfile01，无需后缀</p><p>然后填入如下内容</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment">#  文件中的内容分为指令和参数 指令大小写不敏感</span>

<span class="token comment"># 导入ubuntu镜像</span>
<span class="token instruction"><span class="token keyword">from</span> ubuntu</span>

<span class="token comment"># 镜像的挂载卷 这里可以指定多个 等同于 -v</span>
<span class="token instruction"><span class="token keyword">volume</span> [<span class="token string">&quot;volume01&quot;</span>,<span class="token string">&quot;volume02&quot;</span>]</span>

<span class="token comment"># 我们要执行的命令</span>
<span class="token instruction"><span class="token keyword">cmd</span> echo <span class="token string">&quot;---end---&quot;</span></span>
<span class="token instruction"><span class="token keyword">cmd</span> /bin/bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在控制台输入如下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-f</span> ./dockerfile01 <span class="token parameter variable">-t</span> my/ubuntu:1.0 <span class="token builtin class-name">.</span>
<span class="token comment">#      构建   通过文件           打上表桥          注意这个点</span>

<span class="token comment"># 结果：</span>
Sending build context to Docker daemon  <span class="token number">2</span>.048kB
Step <span class="token number">1</span>/4 <span class="token builtin class-name">:</span> from ubuntu
 ---<span class="token operator">&gt;</span> ba6acccedd29
Step <span class="token number">2</span>/4 <span class="token builtin class-name">:</span> volume <span class="token punctuation">[</span><span class="token string">&quot;volume01&quot;</span>,<span class="token string">&quot;volume02&quot;</span><span class="token punctuation">]</span>
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> 05a165d67ad3
Removing intermediate container 05a165d67ad3
 ---<span class="token operator">&gt;</span> fe33c84c3f12
Step <span class="token number">3</span>/4 <span class="token builtin class-name">:</span> cmd <span class="token builtin class-name">echo</span> <span class="token string">&quot;---end---&quot;</span>
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> a8e799afcc38
Removing intermediate container a8e799afcc38
 ---<span class="token operator">&gt;</span> bef8e13dba1a
Step <span class="token number">4</span>/4 <span class="token builtin class-name">:</span> cmd /bin/bash
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> 5a946a331840
Removing intermediate container 5a946a331840
 ---<span class="token operator">&gt;</span> 2b87daccb8f7
Successfully built 2b87daccb8f7
Successfully tagged my/ubuntu:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们run一下</p>`,115),Gn=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{bash:"",class:"language-bash"},[n("code",null,[s(),n("span",{class:"token function"},"docker"),s(" run "),n("span",{class:"token parameter variable"},"-it"),s(` my/ubuntu:1.0
 
 `),n("span",{class:"token comment"},"# 然后看看容器内文件"),s(`
 `),n("span",{class:"token function"},"ls"),s(` - l
 
 `),n("span",{class:"token comment"},"# 结果"),s(`
 total `),n("span",{class:"token number"},"56"),s(`
lrwxrwxrwx   `),n("span",{class:"token number"},"1"),s(" root root    "),n("span",{class:"token number"},"7"),s(" Oct  "),n("span",{class:"token number"},"6"),s(),n("span",{class:"token number"},"16"),s(":47 bin -"),n("span",{class:"token operator"},">"),s(` usr/bin
drwxr-xr-x   `),n("span",{class:"token number"},"2"),s(" root root "),n("span",{class:"token number"},"4096"),s(" Apr "),n("span",{class:"token number"},"15"),s("  "),n("span",{class:"token number"},"2020"),s(` boot
drwxr-xr-x   `),n("span",{class:"token number"},"5"),s(" root root  "),n("span",{class:"token number"},"360"),s(" Jan  "),n("span",{class:"token number"},"5"),s(` 04:42 dev
drwxr-xr-x   `),n("span",{class:"token number"},"1"),s(" root root "),n("span",{class:"token number"},"4096"),s(" Jan  "),n("span",{class:"token number"},"5"),s(` 04:42 etc
drwxr-xr-x   `),n("span",{class:"token number"},"2"),s(" root root "),n("span",{class:"token number"},"4096"),s(" Apr "),n("span",{class:"token number"},"15"),s("  "),n("span",{class:"token number"},"2020"),s(` home
lrwxrwxrwx   `),n("span",{class:"token number"},"1"),s(" root root    "),n("span",{class:"token number"},"7"),s(" Oct  "),n("span",{class:"token number"},"6"),s(),n("span",{class:"token number"},"16"),s(":47 lib -"),n("span",{class:"token operator"},">"),s(` usr/lib
lrwxrwxrwx   `),n("span",{class:"token number"},"1"),s(" root root    "),n("span",{class:"token number"},"9"),s(" Oct  "),n("span",{class:"token number"},"6"),s(),n("span",{class:"token number"},"16"),s(":47 lib32 -"),n("span",{class:"token operator"},">"),s(` usr/lib32
lrwxrwxrwx   `),n("span",{class:"token number"},"1"),s(" root root    "),n("span",{class:"token number"},"9"),s(" Oct  "),n("span",{class:"token number"},"6"),s(),n("span",{class:"token number"},"16"),s(":47 lib64 -"),n("span",{class:"token operator"},">"),s(` usr/lib64
lrwxrwxrwx   `),n("span",{class:"token number"},"1"),s(" root root   "),n("span",{class:"token number"},"10"),s(" Oct  "),n("span",{class:"token number"},"6"),s(),n("span",{class:"token number"},"16"),s(":47 libx32 -"),n("span",{class:"token operator"},">"),s(` usr/libx32
drwxr-xr-x   `),n("span",{class:"token number"},"2"),s(" root root "),n("span",{class:"token number"},"4096"),s(" Oct  "),n("span",{class:"token number"},"6"),s(),n("span",{class:"token number"},"16"),s(`:47 media
drwxr-xr-x   `),n("span",{class:"token number"},"2"),s(" root root "),n("span",{class:"token number"},"4096"),s(" Oct  "),n("span",{class:"token number"},"6"),s(),n("span",{class:"token number"},"16"),s(`:47 mnt
drwxr-xr-x   `),n("span",{class:"token number"},"2"),s(" root root "),n("span",{class:"token number"},"4096"),s(" Oct  "),n("span",{class:"token number"},"6"),s(),n("span",{class:"token number"},"16"),s(`:47 opt
dr-xr-xr-x `),n("span",{class:"token number"},"241"),s(" root root    "),n("span",{class:"token number"},"0"),s(" Jan  "),n("span",{class:"token number"},"5"),s(` 04:42 proc
drwx------   `),n("span",{class:"token number"},"2"),s(" root root "),n("span",{class:"token number"},"4096"),s(" Oct  "),n("span",{class:"token number"},"6"),s(),n("span",{class:"token number"},"16"),s(`:58 root
drwxr-xr-x   `),n("span",{class:"token number"},"5"),s(" root root "),n("span",{class:"token number"},"4096"),s(" Oct  "),n("span",{class:"token number"},"6"),s(),n("span",{class:"token number"},"16"),s(`:58 run
lrwxrwxrwx   `),n("span",{class:"token number"},"1"),s(" root root    "),n("span",{class:"token number"},"8"),s(" Oct  "),n("span",{class:"token number"},"6"),s(),n("span",{class:"token number"},"16"),s(":47 sbin -"),n("span",{class:"token operator"},">"),s(` usr/sbin
drwxr-xr-x   `),n("span",{class:"token number"},"2"),s(" root root "),n("span",{class:"token number"},"4096"),s(" Oct  "),n("span",{class:"token number"},"6"),s(),n("span",{class:"token number"},"16"),s(`:47 srv
dr-xr-xr-x  `),n("span",{class:"token number"},"13"),s(" root root    "),n("span",{class:"token number"},"0"),s(" Jan  "),n("span",{class:"token number"},"5"),s(` 04:42 sys
drwxrwxrwt   `),n("span",{class:"token number"},"2"),s(" root root "),n("span",{class:"token number"},"4096"),s(" Oct  "),n("span",{class:"token number"},"6"),s(),n("span",{class:"token number"},"16"),s(`:58 tmp
drwxr-xr-x  `),n("span",{class:"token number"},"13"),s(" root root "),n("span",{class:"token number"},"4096"),s(" Oct  "),n("span",{class:"token number"},"6"),s(),n("span",{class:"token number"},"16"),s(`:47 usr
drwxr-xr-x  `),n("span",{class:"token number"},"11"),s(" root root "),n("span",{class:"token number"},"4096"),s(" Oct  "),n("span",{class:"token number"},"6"),s(),n("span",{class:"token number"},"16"),s(`:58 var
drwxr-xr-x   `),n("span",{class:"token number"},"2"),s(" root root "),n("span",{class:"token number"},"4096"),s(" Jan  "),n("span",{class:"token number"},"5"),s(` 04:42 volume01
drwxr-xr-x   `),n("span",{class:"token number"},"2"),s(" root root "),n("span",{class:"token number"},"4096"),s(" Jan  "),n("span",{class:"token number"},"5"),s(` 04:42 volume02
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," ")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Jn=t(`<p>可以看到 最后两个目录，就是我们生成镜像的时候自动挂载的数据卷目录</p><p>也就是说 这个卷一定是和外部有一个卷是同步的</p><p>但我们之前是<code> volume [&quot;volume01&quot;,&quot;volume02&quot;]</code></p><p>匿名挂载的 所以说得通过<code>inspect</code>来查看</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;Mounts&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;volume&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;6ee8e6c78e4b01f488d22cb35aa55d87713d540e01b45908399e830751222bea&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/var/lib/docker/volumes/6ee8e6c78e4b01f488d22cb35aa55d87713d540e01b45908399e830751222bea/_data&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Destination&quot;</span><span class="token operator">:</span> <span class="token string">&quot;volume01&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Driver&quot;</span><span class="token operator">:</span> <span class="token string">&quot;local&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Mode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;RW&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Propagation&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;volume&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;26efe6b8dfad81f3985149cd14daf4f26b44c115a88b89f61ca76c5584b123f8&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/var/lib/docker/volumes/26efe6b8dfad81f3985149cd14daf4f26b44c115a88b89f61ca76c5584b123f8/_data&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Destination&quot;</span><span class="token operator">:</span> <span class="token string">&quot;volume02&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Driver&quot;</span><span class="token operator">:</span> <span class="token string">&quot;local&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Mode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;RW&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Propagation&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多个容器之间数据卷共享" tabindex="-1"><a class="header-anchor" href="#多个容器之间数据卷共享" aria-hidden="true">#</a> 多个容器之间数据卷共享</h3><p>注意，这个玩意貌似不能实现mysql之类的数据共享</p><p>我们先启动一个</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> docker01 my/ubuntu:1.0
 <span class="token comment"># 进入后 ctrl+pq暂时退出</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之前制作过对应的镜像 所以他有两个挂载卷 volume01 和02</p><p>我现在想让另一个容器来继承它 和它使用同一个数据卷，只需要</p><p>语法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-name</span> 容器名 --volumes-from 父容器 父容器名 镜像
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> docker02 --volumes-from docker01 my/ubuntu:1.0
 <span class="token comment">#								让容器的数据卷继承指定的容器</span>
 <span class="token comment"># 接着进入docker01容器</span>
  <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> docker01 <span class="token function">bash</span>
  <span class="token comment"># 接下来 cd 到 v1 然后 touch aaa.txt 并ctrl+pq退出</span>
 <span class="token comment">#接着进入第二个容器</span>
 <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> docker02 <span class="token function">bash</span>
 <span class="token builtin class-name">cd</span> ./volume01
 <span class="token function">ls</span>
 <span class="token comment"># 然后你就能看到刚刚创建的文件</span>
 <span class="token comment"># 同时你还可以 echo &quot;bbb&quot;&gt;bb.txt，然后进入docker01容器查看 他们两之间的数据是互通的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个继承是可以套娃的，就像是Java那样</p><p>你可以写多个东西来继承docker01 或者docker02 嘛都会自动挂载</p><p>并且之后你删掉1 另外两个依旧会共享数据</p><p>当然 你可以用portainer来看差数据卷的共享情况，一目了然</p><figure><img src="`+L+'" alt="image-20220105131700746" tabindex="0" loading="lazy"><figcaption>image-20220105131700746</figcaption></figure><p>volumes-from就是捆绑多少个就多少个数据卷共享，即使docker01被停止</p><h2 id="✨dockerfile" tabindex="-1"><a class="header-anchor" href="#✨dockerfile" aria-hidden="true">#</a> ✨Dockerfile</h2><p>dockerfile是用来构建docker镜像文件的命令参数脚本</p><p>构建步骤：</p><ul><li>编写一个dockerfile文件</li><li>docker build成为一个镜像</li><li>docker run 运行镜像</li><li>docker push 发布镜像（Dockerhub 或者腾讯阿里云之类的）</li></ul>',25),Qn={href:"https://hub.docker.com/_/ubuntu",target:"_blank",rel:"noopener noreferrer"},Xn=n("p",null,"进去后，它有一个链接",-1),Zn=n("figure",null,[n("img",{src:j,alt:"image-20220105140313843",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20220105140313843")],-1),ns=n("p",null,"点击会发现跳转到了github",-1),ss={href:"https://github.com/tianon/docker-brew-ubuntu-core/blob/bf61e139e84e04f9d87fff5dc588a3f0398da627/focal/Dockerfile",target:"_blank",rel:"noopener noreferrer"},as=t(`<p>然后得到如下内容</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># 这是最基本的镜像 可以理解为Java的Object类</span>
<span class="token instruction"><span class="token keyword">FROM</span> scratch</span>
<span class="token instruction"><span class="token keyword">ADD</span> ubuntu-focal-oci-amd64-root.tar.gz /</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;bash&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+H+'" alt="image-20220105141103036" tabindex="0" loading="lazy"><figcaption>image-20220105141103036</figcaption></figure><figure><img src="'+U+`" alt="image-20220105140848278" tabindex="0" loading="lazy"><figcaption>image-20220105140848278</figcaption></figure><h3 id="dockerfile命令一览" tabindex="-1"><a class="header-anchor" href="#dockerfile命令一览" aria-hidden="true">#</a> Dockerfile命令一览</h3><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">from</span> 		#	基础镜像，一切重这里开始构建</span>
<span class="token instruction"><span class="token keyword">maintainer</span> 	#	镜像是谁写的==姓名+邮箱</span>
<span class="token instruction"><span class="token keyword">label</span> 		#	同上 目前来说一般通过这个来制定姓名+邮箱</span>
<span class="token instruction"><span class="token keyword">run</span> 		#	镜像构建的时候要运行的命令</span>
<span class="token instruction"><span class="token keyword">add</span> 		#	添加别的内容 例如添加一个tomcat.tar.gz压缩包的内容</span>
<span class="token instruction"><span class="token keyword">workdir</span> 	#	镜像的工作目录</span>
<span class="token instruction"><span class="token keyword">volume</span> 		#	挂载的目录 等同于 -v</span>
<span class="token instruction"><span class="token keyword">expose</span> 		#	保留端口配置 等同于-p</span>
<span class="token instruction"><span class="token keyword">cmd</span> 		#	指定这个容器启动的时候要运行的命令，一行只能写一个命令</span>
<span class="token instruction"><span class="token keyword">entrypoint</span>	#	指定这个容器启动的时候要运行的命令，可以最追加命令 （一行可以写多个命令）</span>
<span class="token instruction"><span class="token keyword">onbuild</span>		#	当构建一个被继承的Dockerfile的时候，就会运行onbuild中的指令，也就是一个触发指令</span>
<span class="token instruction"><span class="token keyword">copy</span>		#	类似于add命令，将我们的文件拷贝到镜像中</span>
<span class="token instruction"><span class="token keyword">env</span>			#	构建的时候设置环境变量</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+F+'" alt="image-20220105141218399" tabindex="0" loading="lazy"><figcaption>image-20220105141218399</figcaption></figure><ul><li><p>FROM-构建镜像基于哪个镜像</p></li><li><p>MAINTAINER-镜像维护者姓名或邮箱地址—目前官方已经不在推荐使用它，而是建议使用label来替代</p></li><li><p>RUN-构建镜像时运行的指令</p></li><li><p>CMD-运行容器时执行的shell环境</p></li><li><p>VOLUME-指定容器挂载点到宿主机自动生成的目录或其他容器</p></li><li><p>USER-为RUN、CMD、和 ENTRYPOINT 执行命令指定运行用户</p></li><li><p>WORKDIR-为 RUN、CMD、ENTRYPOINT、COPY 和 ADD 设置工作目录，就是切换目录</p></li><li><p>HEALTHCHECH-健康检查</p></li><li><p>ARG-构建时指定的一些参数</p></li><li><p>EXPOSE-声明容器的服务端口（仅仅是声明）</p></li><li><p>ENV-设置容器环境变量</p></li><li><p>ADD-拷贝文件或目录到容器中，如果是URL或压缩包便会自动下载或自动解压</p></li><li><p>COPY-拷贝文件或目录到容器中，跟ADD类似，但不具备自动下载或解压的功能</p></li><li><p>ENTRYPOINT 运行容器时执行的shell命令</p></li></ul><h3 id="构建一个自己的镜像" tabindex="-1"><a class="header-anchor" href="#构建一个自己的镜像" aria-hidden="true">#</a> 构建一个自己的镜像</h3><p>我们之前看ubuntu的时候，发现有一个特殊的镜像</p>',10),es=n("div",{class:"language-docker line-numbers-mode","data-ext":"docker"},[n("pre",{dockerfile:"",class:"language-docker"},[n("code",null,[n("span",{class:"token instruction"},[n("span",{class:"token keyword"},"FROM"),s(" scratch")]),s(`
`),n("span",{class:"token instruction"},[n("span",{class:"token keyword"},"ADD"),s(" ubuntu-focal-oci-amd64-root.tar.gz /")]),s(`
`),n("span",{class:"token instruction"},[n("span",{class:"token keyword"},"CMD"),s(" ["),n("span",{class:"token string"},'"bash"'),s("]")]),s(`
`)])]),n("div",{class:"highlight-lines"},[n("div",{class:"highlight-line"}," "),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ts={href:"https://docs.docker.com/develop/develop-images/baseimages/",target:"_blank",rel:"noopener noreferrer"},is={href:"https://docs.docker.com/glossary/#parent-image",target:"_blank",rel:"noopener noreferrer"},os=n("code",null,"FROM",-1),ps={href:"https://docs.docker.com/glossary/#base-image",target:"_blank",rel:"noopener noreferrer"},ls=n("code",null,"FROM scratch",-1),cs=t(`<p>也就是说，市面上百分之百的镜像都是依赖于它，它就相当于Java的Object类</p><p>例如：</p><p>PS：这样依旧安装不起vim 反正把run当做是bash命令即可</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># 指定基础镜像</span>
<span class="token instruction"><span class="token keyword">FROM</span> ubuntu</span>
<span class="token comment"># 设置作者</span>
<span class="token instruction"><span class="token keyword">MAINTAINER</span> amayakite&lt;amayakite@qq.com&gt;</span>

<span class="token comment"># 添加一些我们自己的内容</span>
<span class="token instruction"><span class="token keyword">ENV</span> mypath /usr/local</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> <span class="token variable">$mypath</span></span>

<span class="token comment"># 构建时候的命令</span>
<span class="token comment"># 先添加下依赖</span>

<span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">&#39;deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse \\n\\
           deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse \\n\\
           deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse \\n\\
           deb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse \\n\\
           deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse \\n\\
           deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse \\n\\
           deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse \\n\\
           deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse \\n\\
           deb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse \\n\\
           deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse \\n&#39;</span><span class="token operator">\\</span>
              &gt; /etc/apt/sources.list</span>
<span class="token instruction"><span class="token keyword">RUN</span> [<span class="token string">&quot;apt-get&quot;</span>, <span class="token string">&quot;update&quot;</span>]</span>
<span class="token instruction"><span class="token keyword">RUN</span> [<span class="token string">&quot;apt-get&quot;</span>,<span class="token string">&quot;install&quot;</span>,<span class="token string">&quot; vim&quot;</span>,<span class="token string">&quot;-y&quot;</span>]</span>

<span class="token instruction"><span class="token keyword">EXPOSE</span> 663</span>

<span class="token instruction"><span class="token keyword">CMD</span> echo <span class="token variable">$mypath</span></span>
<span class="token instruction"><span class="token keyword">CMD</span> echo <span class="token string">&quot;---end---&quot;</span></span>
<span class="token instruction"><span class="token keyword">CMD</span> /bin/bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看镜像的构成方式" tabindex="-1"><a class="header-anchor" href="#查看镜像的构成方式" aria-hidden="true">#</a> 查看镜像的构成方式</h3><p>非常简单 例如我想看nginx是怎么样构成的</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">history</span> mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>IMAGE          CREATED        CREATED BY                                      SIZE      COMMENT
0716d6ebcc1a   4 months ago   /bin/sh -c #(nop)  CMD [&quot;mysqld&quot;]               0B
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">&gt;</span></span>      4 months ago   /bin/sh -c #(nop)  EXPOSE 3306 33060            0B
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">&gt;</span></span>      4 months ago   /bin/sh -c #(nop)  ENTRYPOINT [&quot;docker-entry…   0B
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">&gt;</span></span>      4 months ago   /bin/sh -c ln -s usr/local/bin/docker-entryp…   34B
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">&gt;</span></span>      4 months ago   /bin/sh -c #(nop) COPY file:345a22fe55d3e678…   14.5kB
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">&gt;</span></span>      4 months ago   /bin/sh -c #(nop) COPY dir:2e040acc386ebd23b…   1.12kB
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">&gt;</span></span>      4 months ago   /bin/sh -c #(nop)  VOLUME [/var/lib/mysql]      0B
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">&gt;</span></span>      4 months ago   /bin/sh -c {   echo mysql-community-server m…   378MB
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">&gt;</span></span>      4 months ago   /bin/sh -c echo &#39;deb http://repo.mysql.com/a…   55B
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">&gt;</span></span>      4 months ago   /bin/sh -c #(nop)  ENV MYSQL_VERSION=8.0.26-…   0B
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">&gt;</span></span>      4 months ago   /bin/sh -c #(nop)  ENV MYSQL_MAJOR=8.0          0B
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">&gt;</span></span>      4 months ago   /bin/sh -c set -ex;  key=&#39;A4A9406876FCBD3C45…   1.84kB
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">&gt;</span></span>      4 months ago   /bin/sh -c apt-get update &amp;&amp; apt-get install…   52.2MB
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">&gt;</span></span>      4 months ago   /bin/sh -c mkdir /docker-entrypoint-initdb.d    0B
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">&gt;</span></span>      4 months ago   /bin/sh -c set -eux;  savedAptMark=&quot;$(apt-ma…   4.17MB
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">&gt;</span></span>      4 months ago   /bin/sh -c #(nop)  ENV GOSU_VERSION=1.12        0B
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">&gt;</span></span>      4 months ago   /bin/sh -c apt-get update &amp;&amp; apt-get install…   9.34MB
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">&gt;</span></span>      4 months ago   /bin/sh -c groupadd -r mysql &amp;&amp; useradd -r -…   329kB
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">&gt;</span></span>      4 months ago   /bin/sh -c #(nop)  CMD [&quot;bash&quot;]                 0B
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>missing</span><span class="token punctuation">&gt;</span></span>      4 months ago   /bin/sh -c #(nop) ADD file:4ff85d9f6aa246746…   69.3MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cmd和entrypoint的区别" tabindex="-1"><a class="header-anchor" href="#cmd和entrypoint的区别" aria-hidden="true">#</a> cmd和entrypoint的区别</h3><p>例如：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">from</span> ubuntu</span>
<span class="token instruction"><span class="token keyword">cmd</span> [<span class="token string">&quot;ls&quot;</span>,<span class="token string">&quot;-a&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着运行将会直接列出根路径下的所有内容</p><p>但是如果我想在运行的时候追加额外的参数</p><p>例如 这里是-a 我想</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run xxx <span class="token parameter variable">-l</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你就会发现报错</p><p>但是替换成这样</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run xx <span class="token function">ls</span> <span class="token parameter variable">-al</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将不会报错</p><p>RUN就是：我们在运行的时候输入的命令会替换掉其中的命令</p><p>但如果是entrypoint的话 则不会这样</p><p>docker run中的命令是直接替换CMD指定的命令与参数，使用ENTRYPOINT命令后，CMD指定的命令则是作为参数列表，作为ENTRYPOINT命令的参数使用</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">from</span> ubuntu</span>
<span class="token instruction"><span class="token keyword">entrypoint</span> [<span class="token string">&quot;ls&quot;</span>,<span class="token string">&quot;-a&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>你再运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run xxx <span class="token parameter variable">-l</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>就能完整的模拟出<code>ls -al</code>的效果</p><h3 id="✨docker制作tomcat镜像" tabindex="-1"><a class="header-anchor" href="#✨docker制作tomcat镜像" aria-hidden="true">#</a> ✨docker制作tomcat镜像</h3><ol><li>准备文件：tomcat压缩包，jdk的压缩包</li><li>准备dockerfile文件</li></ol><p>首先下载java压缩包和tomcat压缩包</p>`,30),rs={href:"https://www.oracle.com/java/technologies/downloads/",target:"_blank",rel:"noopener noreferrer"},ds={href:"https://tomcat.apache.org/download-90.cgi",target:"_blank",rel:"noopener noreferrer"},us=t('<p>然后传输到你的服务器上（创建好一个文件夹）</p><p>接着我们编写<code>DockerFIle</code>文件，记住这个名字 官方在build的时候会默认寻找这个文件</p><p>DockerFIle和那两个压缩包在同一个文件夹内</p><p>我这里最终是如下两个文件</p><figure><img src="'+B+`" alt="image-20220119174116464" tabindex="0" loading="lazy"><figcaption>image-20220119174116464</figcaption></figure><p>接着创建<code>Dockerfile</code>，然后编写其中的内容</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu</span>

<span class="token instruction"><span class="token keyword">MAINTAINER</span> <span class="token string">&quot;Amayakite&quot;</span></span>

<span class="token comment"># 使用add命令添加文件会自动解压 这里第一个参数是文件名，相对路径</span>
<span class="token comment"># 第二个参数是容器内的路径，解压后的文件将会存放至该路径下</span>

<span class="token comment"># 添加jdk</span>
<span class="token instruction"><span class="token keyword">ADD</span> jdk-8u321-linux-x64.tar.gz /usr/local</span>

<span class="token comment"># 添加tomcat</span>
<span class="token instruction"><span class="token keyword">ADD</span> apache-tomcat-9.0.56.tar.gz /usr/local</span>

<span class="token comment"># 设置工作目录</span>
<span class="token instruction"><span class="token keyword">ENV</span> MYPATH=/usr/local</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> <span class="token variable">$MYPATH</span></span>

<span class="token comment"># 设置JAva的工作目录 这里填写解压后的路径 jdk压缩包解压后默认是还有一个文件夹</span>
<span class="token comment"># 里面是一个Java的版本号：例如:jdk1.8.0_111</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_HOME=/usr/local/jdk1.8.0_321</span>

<span class="token instruction"><span class="token keyword">ENV</span> CLASSSPATH=<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar</span>

<span class="token comment"># 配置tomcat目录</span>
<span class="token instruction"><span class="token keyword">ENV</span> CATALINA_HOME=/usr/local/apache-tomcat-9.0.56</span>

<span class="token comment"># 设置tomcat的运行目录</span>
<span class="token instruction"><span class="token keyword">ENV</span> PATH=<span class="token variable">$PATH</span>:<span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$CATALINA_HOME</span>/lib:<span class="token variable">$CATALINA_HOME</span>/bin</span>

<span class="token comment">## 启动后暴露的端口</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8080</span>

<span class="token comment"># 启动时运行的命令</span>
<span class="token instruction"><span class="token keyword">CMD</span> <span class="token variable">$CATALINA_HOME</span>/bin/startup.sh &amp;&amp; tail -F <span class="token variable">$CATALINA_HOME</span>/logs/catalina.out</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来运行构建命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> mytomcat <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不出意外，你的控制台应该打印如下内容</p><figure><img src="`+V+'" alt="image-20220119180519935" tabindex="0" loading="lazy"><figcaption>image-20220119180519935</figcaption></figure><p>接下来你可以通过<code>docker images</code>看到你刚刚创建的镜像</p><figure><img src="'+W+'" alt="image-20220119180547179" tabindex="0" loading="lazy"><figcaption>image-20220119180547179</figcaption></figure><p>emm事后我发现事情并没有我想的那么简单</p><p><strong>下载的jdk无法自动解压</strong></p><p>于是乎我分别尝试了如下几种方式</p>',16),ms={href:"https://www.openlogic.com/openjdk-downloads?field_java_parent_version_target_id=416&field_operating_system_target_id=426&field_architecture_target_id=391&field_java_package_target_id=396",target:"_blank",rel:"noopener noreferrer"},ks={href:"https://github.com/alibaba/dragonwell8",target:"_blank",rel:"noopener noreferrer"},vs=t(`<p>但是当我想要下载阿里巴巴的jdk的时候，那啥open啥啥啥的jdk下载好了，于是我就用上了它家的</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu</span>

<span class="token instruction"><span class="token keyword">MAINTAINER</span> <span class="token string">&quot;Amayakite&quot;</span></span>

<span class="token comment"># 使用add命令添加文件会自动解压 这里第一个参数是文件名，相对路径</span>
<span class="token comment"># 第二个参数是容器内的路径，解压后的文件将会存放至该路径下</span>

<span class="token comment"># 添加jdk</span>
<span class="token instruction"><span class="token keyword">ADD</span> openlogic-openjdk-8u262-b10-linux-x64.tar.gz /usr/local</span>

<span class="token comment"># 添加tomcat</span>
<span class="token instruction"><span class="token keyword">ADD</span> apache-tomcat-9.0.56.tar.gz /usr/local</span>

<span class="token comment"># 设置工作目录</span>
<span class="token instruction"><span class="token keyword">ENV</span> MYPATH=/usr/local</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> <span class="token variable">$MYPATH</span></span>

<span class="token comment"># 设置JAva的工作目录 这里填写解压后的路径 jdk压缩包解压后默认是还有一个文件夹</span>
<span class="token comment"># 里面是一个Java的版本号：例如:jdk1.8.0_111</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_HOME=/usr/local/openlogic-openjdk-8u262-b10-linux-64</span>

<span class="token instruction"><span class="token keyword">ENV</span> CLASSSPATH=<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar</span>

<span class="token comment"># 配置tomcat目录</span>
<span class="token instruction"><span class="token keyword">ENV</span> CATALINA_HOME=/usr/local/apache-tomcat-9.0.56</span>

<span class="token comment"># 设置tomcat的运行目录</span>
<span class="token instruction"><span class="token keyword">ENV</span> PATH=<span class="token variable">$PATH</span>:<span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$CATALINA_HOME</span>/lib:<span class="token variable">$CATALINA_HOME</span>/bin</span>

<span class="token comment">## 启动后暴露的端口</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8080</span>



<span class="token comment"># 启动时运行的命令</span>
<span class="token instruction"><span class="token keyword">CMD</span> <span class="token variable">$CATALINA_HOME</span>/bin/startup.sh &amp;&amp; tail -F <span class="token variable">$CATALINA_HOME</span>/logs/catalina.out</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>成功运行</p><figure><img src="`+K+`" alt="image-20220119193933882" tabindex="0" loading="lazy"><figcaption>image-20220119193933882</figcaption></figure><p>然后尝试访问（我这里开的映射是9001）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> localhost:9001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>成功获取到结果</p><figure><img src="`+Y+'" alt="image-20220119194007032" tabindex="0" loading="lazy"><figcaption>image-20220119194007032</figcaption></figure><p>并且可以看到容器内都有内容了</p><figure><img src="'+$+'" alt="image-20220119194245470" tabindex="0" loading="lazy"><figcaption>image-20220119194245470</figcaption></figure><p>当然你也可以选择挂载卷之类的。。</p><h3 id="发布自己的tomcat到dockerhub" tabindex="-1"><a class="header-anchor" href="#发布自己的tomcat到dockerhub" aria-hidden="true">#</a> 发布自己的tomcat到dockerhub</h3>',12),bs={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},gs=t(`<li><p>登陆账号</p><ol><li><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> login <span class="token parameter variable">--help</span>
<span class="token comment"># 查看帮助一览</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>例如</p></li><li><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> login <span class="token parameter variable">-u</span> youUserName <span class="token parameter variable">-p</span> youPassord
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol></li>`,1),hs=n("p",null,"提交",-1),fs=t(`<li><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> push <span class="token parameter variable">--help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>push的时候要带上自己的名字，上传的镜像名必须是【用户名/镜像名】，所以我们得重新构建一个镜像</p></li><li><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> amayakite/diytomcat:1.0.0 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>或者用重命名的方式</p></li><li><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> tag diytomcat amayakite/diytomcat:1.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>然后push</p></li><li><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> push amayakite/diytomcat:1.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>结果</p></li><li><figure><img src="`+G+'" alt="image-20220119200457890" tabindex="0" loading="lazy"><figcaption>image-20220119200457890</figcaption></figure></li><li><p>上传是比较慢的….因为人家是国外的服务器</p></li><li><p>上传完毕后，是这样的</p></li><li><figure><img src="'+J+'" alt="image-20220119200759277" tabindex="0" loading="lazy"><figcaption>image-20220119200759277</figcaption></figure></li>',12),qs={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},ys=n("li",null,[n("figure",null,[n("img",{src:Q,alt:"image-20220119200847859",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20220119200847859")])],-1),xs=t(`<p>可以看到我们的镜像已经上传了(另外那个貌似是创建docker账号的时候自动创建的)</p><p>如果你要上传到阿里云或者腾讯云之类的地方的话，可以自行去他们官网上，一般都会要求创建命名空间，创建完毕后，会有详细的push教程</p><h3 id="docker打包容器" tabindex="-1"><a class="header-anchor" href="#docker打包容器" aria-hidden="true">#</a> docker打包容器</h3><blockquote><p>将容器保存成镜像</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#语法：</span>
<span class="token function">docker</span> commit <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>REPOSITORY<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token comment"># 例如</span>
<span class="token function">docker</span> commit <span class="token parameter variable">-a</span> <span class="token string">&quot;Amayakite&quot;</span> mytomcat  imagexxx:1.1.1
<span class="token parameter variable">-a</span> :提交的镜像作者；
<span class="token parameter variable">-c</span> :使用Dockerfile指令来创建镜像；
<span class="token parameter variable">-m</span> :提交时的说明文字；
<span class="token parameter variable">-p</span> :在commit时，将容器暂停。
imagexxx 是新创建的镜像的名字
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>将镜像打包成tar包</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span>  save  <span class="token parameter variable">-o</span> xxx.tar  imagexxx1.1.1  <span class="token comment"># 当前路径下会生成一个xxx.tar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>将tar包再次压缩为gz包</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-zcvf</span> xxx.tar.gz     xxx.tar    <span class="token comment"># 当前路径生成一个xxx.tar.gz压缩包</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后假设你在一台新的电脑上获取了这个tar.gz包并且想要使用它</p><blockquote><p>解压缩得到tar包</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> xxx.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>将tar包生成镜像</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>docke load <span class="token operator">&lt;</span> xxx.tar <span class="token comment">#生成的镜像信息和打包之前的一样</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后照常运行即可</p><h2 id="docker网络" tabindex="-1"><a class="header-anchor" href="#docker网络" aria-hidden="true">#</a> Docker网络</h2><h3 id="docker0网络" tabindex="-1"><a class="header-anchor" href="#docker0网络" aria-hidden="true">#</a> Docker0网络</h3><p>当你连接上服务器的时候，应该有注意到过这个玩意</p><figure><img src="`+X+`" alt="image-20220119212308383" tabindex="0" loading="lazy"><figcaption>image-20220119212308383</figcaption></figure><p>那么现在我有个问题，例如我有个mysql容器，映射了6000到本地，那么我能不能直接访问它的3306呢</p><p>接下来我进入我的mysql容器看看ip</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql <span class="token function">bash</span>
<span class="token function">cat</span> /etc/hosts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1       localhost
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
<span class="token number">172.17</span>.0.4      9f21f81da253
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有个<code>172.17.0.4</code>比较令人在意，那么我尝试下本地ping下</p><figure><img src="`+Z+`" alt="image-20220119214058287" tabindex="0" loading="lazy"><figcaption>image-20220119214058287</figcaption></figure><p>看来是可以的，也就是说我在容器外面也可以通过访问这个地址的3306来进行访问</p><p>换一种方式尝试，我开一个tomcat，映射本地9999</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9999</span>:8080 <span class="token parameter variable">-name</span> testTomcat tomcat
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span>  testTomcat <span class="token function">bash</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> webapps <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> webapps.dist/ webapps
<span class="token function">cat</span> /etc/hosts


<span class="token comment"># Host结果为</span>
<span class="token number">127.0</span>.0.1       localhost
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
<span class="token number">172.17</span>.0.5      b352b627f9c7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来退出容器，然后访问下这个<code>172.17.0.5:8080</code>试试</p><p>得到了html</p><figure><img src="`+nn+`" alt="image-20220119214548354" tabindex="0" loading="lazy"><figcaption>image-20220119214548354</figcaption></figure><p>那么容器和容器之间是否可以ping通呢？答案是可以的，你可以自行尝试</p><p>docker0相当于网卡，同一个网段内是可以互相连接的</p><h3 id="容器互联-link" tabindex="-1"><a class="header-anchor" href="#容器互联-link" aria-hidden="true">#</a> 容器互联-link</h3><p>好了，下面的话是你学完SpringCloud再过来学的了</p><p>我现在有两个服务，tomcat1和tomcat2，能否像在Spring Cloud中的那样(Fegin)，通过服务名来互相调用呢？</p><p>我们先给当前的Tomcat安装下ping之类的工具</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mv</span> /etc/apt/sources.list /etc/apt/sources.list.bak

<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;</span>/etc/apt/sources.list</span>
deb http://mirrors.ustc.edu.cn/debian stable main contrib non-free
deb http://mirrors.ustc.edu.cn/debian stable-updates main contrib non-free
EOF</span>
<span class="token function">apt</span> update
<span class="token function">apt</span> <span class="token function">install</span> iputils-ping
<span class="token function">apt</span> <span class="token function">install</span> net-tools
<span class="token builtin class-name">exit</span>
<span class="token comment"># 然后打包成一个镜像</span>
<span class="token function">docker</span> commit testTomcat mytomcat

<span class="token comment"># 然后运行两个</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9001</span>:8080 <span class="token parameter variable">--name</span> tomcat1 mytomcat
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9002</span>:8080 <span class="token parameter variable">--name</span> tomcat2 mytomcat

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后ping一下 是ping不通的</p><figure><img src="`+sn+`" alt="image-20220119222108897" tabindex="0" loading="lazy"><figcaption>image-20220119222108897</figcaption></figure><p>所以Docker给我们提供了一个解决方案，link</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run  <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9003</span>:8080 <span class="token parameter variable">--link</span> tomcat2 <span class="token parameter variable">--name</span> tomcat3 mytomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们只需要在启动的时候，加一个link命令，指定要桥接的容器即可</p><p>接下来进入tomcat3</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> tomcat3 <span class="token function">bash</span>
<span class="token function">ping</span> tomcat2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现ping通了</p><figure><img src="`+an+`" alt="image-20220119222336320" tabindex="0" loading="lazy"><figcaption>image-20220119222336320</figcaption></figure><p>但是此时，tomcat2可以ping通tomcat3吗？</p><p>实际上是不可以的….</p><p>因为我们没有配置tomcat2的link…</p><p>现在，我们来看下docker的网卡信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">docker</span> network <span class="token function">ls</span>
 <span class="token comment"># 结果</span>
 NETWORK ID     NAME                DRIVER    SCOPE
2addf569c311   bridge              bridge    <span class="token builtin class-name">local</span>
。。。。等一系列网卡信息
<span class="token comment"># 这里的bridge就是docker的基础网卡 我们来看看这个网卡的信息</span>
 <span class="token function">docker</span> network  inspect bridge
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现你的全部网络，例如tomcat2和3</p><figure><img src="`+en+`" alt="image-20220119222915944" tabindex="0" loading="lazy"><figcaption>image-20220119222915944</figcaption></figure><p>那么看着两个的配置不用多说了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect tomcat3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到，在它的<code>HostConfig</code>内，有一个配置</p><figure><img src="`+tn+`" alt="image-20220119223715561" tabindex="0" loading="lazy"><figcaption>image-20220119223715561</figcaption></figure><p>但是在tomcat2中这个地方是没有东西的</p><p>并且你进入Tomcat3，可以在<code> /etc/hosts</code>看到</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> tomcat3 <span class="token function">bash</span>
<span class="token function">cat</span> /etc/hosts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+on+`" alt="image-20220119223910780" tabindex="0" loading="lazy"><figcaption>image-20220119223910780</figcaption></figure><p>这里就是直接来了个转发，就像是windows的修改hosts文件那样，所以可以直接ping通</p><p>当然，现在完Docker已经不推荐用<code>--link</code>这个玩意了</p><p>因为docker0毕竟是官方默认的，使用过多容易造成混乱，并且不易维护</p><h3 id="自定义网络-创建" tabindex="-1"><a class="header-anchor" href="#自定义网络-创建" aria-hidden="true">#</a> 自定义网络-创建</h3><p>创建</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NETWORK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>OPtions参数如下</li></ul><table><thead><tr><th>简参数,参数</th><th>默认</th><th>描述</th></tr></thead><tbody><tr><td>--attachable</td><td></td><td>API 1.25+启用手动容器附件</td></tr><tr><td>--aux-address</td><td></td><td>网络驱动程序使用的辅助IPv4或IPv6地址</td></tr><tr><td>--config-from</td><td></td><td>API 1.30+从中复制配置的网络</td></tr><tr><td>--config-only</td><td></td><td>API 1.30+创建仅配置网络</td></tr><tr><td>-d,--driver</td><td>bridge</td><td>驱动程序来管理网络</td></tr><tr><td><strong>--gateway</strong></td><td></td><td><strong>主子网的IPv4或IPv6网关</strong><br>这个相当于是暴露给主机的网络</td></tr><tr><td>--ingress</td><td></td><td>API 1.29+创建群集路由网状网络</td></tr><tr><td>--internal</td><td></td><td>限制外部访问网络</td></tr><tr><td>--ip-range</td><td></td><td>从子范围分配容器ip</td></tr><tr><td>--ipam-driver</td><td></td><td>IP地址管理驱动程序</td></tr><tr><td>--ipam-opt</td><td></td><td>设置IPAM驱动程序特定选项</td></tr><tr><td>--ipv6</td><td></td><td>启用IPv6网络</td></tr><tr><td>--label</td><td></td><td>在网络上设置元数据</td></tr><tr><td>-o,--opt</td><td></td><td>设置驱动程序特定选项</td></tr><tr><td>--scope</td><td></td><td>API 1.30+控制网络范围</td></tr><tr><td><strong>--subnet</strong></td><td></td><td><strong>代表网段的CIDR格式的子网</strong><br>这个比较重要，也就是配置这个网卡的虚拟地址</td></tr></tbody></table><p>我们接下来创建一个</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create <span class="token parameter variable">--subnet</span> <span class="token number">233.33</span>.0.0/16 <span class="token parameter variable">--gateway</span> <span class="token number">233.33</span>.0.1 mynet
<span class="token comment"># 这里的16代表双路啥啥啥的，反正最多能创建65535个子网，如果说这里写了24，那就只有255个</span>
<span class="token comment">#貌似也指的是前面16位固定 不过无所谓 反正这玩意知道咋用就行</span>
<span class="token comment"># 后面的表示主机能通过哪个地址来访问到这个网卡</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以看到我们刚刚创建的网卡了</p><figure><img src="`+pn+`" alt="image-20220119232745245" tabindex="0" loading="lazy"><figcaption>image-20220119232745245</figcaption></figure><p>之后，从<code>233.33.0.2</code>一直到<code>233.33.255.255</code>中都属于他</p><p>自此，我们的自定义网络就创建好了，你可以看看他的具体内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network inspect  mynet
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mynet&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;39ac7d62a102c2b9eb7bd179119022942d3db33a317ed03530e0714ba5022cd7&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Created&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2022-01-19T23:27:03.473039445+08:00&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Scope&quot;</span><span class="token operator">:</span> <span class="token string">&quot;local&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Driver&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bridge&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;EnableIPv6&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token property">&quot;IPAM&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;Driver&quot;</span><span class="token operator">:</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Options&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;Config&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    <span class="token property">&quot;Subnet&quot;</span><span class="token operator">:</span> <span class="token string">&quot;233.33.0.0/16&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;Gateway&quot;</span><span class="token operator">:</span> <span class="token string">&quot;233.33.0.1&quot;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Internal&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Attachable&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Ingress&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token property">&quot;ConfigFrom&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;Network&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;ConfigOnly&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Containers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Options&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Labels&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>emm然后我尝试创建一个容器，桥接这个网卡</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9001</span>:8080 <span class="token parameter variable">--net</span> mynet <span class="token parameter variable">--name</span> tomcat-net1 mytomcat
 <span class="token comment"># -net就是桥接网卡 不填写的话就是默认的那个东西</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后发现了如下异常</p><figure><img src="`+ln+`" alt="image-20220119234052518" tabindex="0" loading="lazy"><figcaption>image-20220119234052518</figcaption></figure><p>大意就是网络地址不可用，没事，我们删掉重新创建一个1xx的</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-fv</span> tomcat-net1
<span class="token function">docker</span> network <span class="token function">rm</span> mynet
<span class="token function">docker</span> network create <span class="token parameter variable">--subnet</span> <span class="token number">160.1</span>.0.0/16 <span class="token parameter variable">--gateway</span> <span class="token number">160.1</span>.0.1 mynet
6503247b85489d8f7e8f68e69c62d9b7ea2632bcb31c56d441559caa288bb3b3
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9001</span>:8080 <span class="token parameter variable">--net</span> mynet <span class="token parameter variable">--name</span> tomcat-net1 mytomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+cn+`" alt="image-20220119234145202" tabindex="0" loading="lazy"><figcaption>image-20220119234145202</figcaption></figure><p>创建成功，再来创建一个2吧</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9002</span>:8080 <span class="token parameter variable">--net</span> mynet <span class="token parameter variable">--name</span> tomcat-net2 mytomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再来尝试ping一下，你就会发现神奇的事情</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span>  <span class="token parameter variable">-it</span> tomcat-net1 <span class="token function">ping</span> tomcat-net2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+rn+'" alt="image-20220119234338393" tabindex="0" loading="lazy"><figcaption>image-20220119234338393</figcaption></figure><p>居然ping通了….</p><p>这就非常舒服了</p><p>原理就是这两个容器都是连的自定义网络，连接在同一个自定义网络的容器之间端口会自动相互暴露，而且不会向以外的显示任何端口，这样就更好的进行了容器见相互通信和隔离</p><h3 id="网络连通" tabindex="-1"><a class="header-anchor" href="#网络连通" aria-hidden="true">#</a> 网络连通</h3><p>现在我们想把docker0和mynet之间也实现可以通过直接通过名字来访问的方式，又该怎么做呢？</p><p>也就是在docker0上面的tomcat1和tomcat2和在mynet上面的tomcat-net1和tomcat-net2如何通过名字来实现互相访问</p><p>也就是这样</p><figure><img src="'+dn+'" alt="image-20220119234953131" tabindex="0" loading="lazy"><figcaption>image-20220119234953131</figcaption></figure><p>这个是想都不用想的，压根不可能的，所以说我们应该换一种想法</p><p>让在docekr0上面的容器能连接上mynet</p><figure><img src="'+un+`" alt="image-20220119235138175" tabindex="0" loading="lazy"><figcaption>image-20220119235138175</figcaption></figure><p>在<code>docker networ</code>中，有如下几个命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Usage:  <span class="token function">docker</span> network COMMAND

Manage networks

Commands:
  connect     Connect a container to a network
  create      Create a network
  disconnect  Disconnect a container from a network
  inspect     Display detailed information on one or <span class="token function">more</span> networks
  <span class="token function">ls</span>          List networks
  prune       Remove all unused networks
  <span class="token function">rm</span>          Remove one or <span class="token function">more</span> networks

Run <span class="token string">&#39;docker network COMMAND --help&#39;</span> <span class="token keyword">for</span> <span class="token function">more</span> information on a command.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中第一个就是我们要用的：<strong>将容器连接到网络</strong></p><p>看看他的参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Usage:  <span class="token function">docker</span> network connect <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NETWORK CONTAINER

Connect a container to a network

Options:

<span class="token comment"># 为容器添加网络范围的别名</span>
<span class="token parameter variable">--alias</span> strings           Add network-scoped <span class="token builtin class-name">alias</span> <span class="token keyword">for</span> the container

<span class="token comment">#网络的驱动程序选项</span>
--driver-opt strings      driver options <span class="token keyword">for</span> the network

<span class="token comment">#IPv4 地址（例如，172.30.100.104）</span>
<span class="token parameter variable">--ip</span> string               IPv4 address <span class="token punctuation">(</span>e.g., <span class="token number">172.30</span>.100.104<span class="token punctuation">)</span>

<span class="token comment">#IPv6 地址（例如，2001:db8::33） </span>
<span class="token parameter variable">--ip6</span> string              IPv6 address <span class="token punctuation">(</span>e.g., <span class="token number">2001</span>:db8::33<span class="token punctuation">)</span>

<span class="token comment">#添加到另一个容器的链接</span>
<span class="token parameter variable">--link</span> list               Add <span class="token function">link</span> to another container

<span class="token comment">#为容器添加链接本地地址</span>
--link-local-ip strings   Add a link-local address <span class="token keyword">for</span> the container

当然这些参数并不是最重要的，它的语句是这样的

<span class="token function">docker</span> network connect <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> 网络 容器
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以我们只需要</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network connect mynet tomcat1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行之后，没有任何事情发生，但是我们这个时候尝试ping下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span>  <span class="token parameter variable">-it</span> tomcat1 <span class="token function">ping</span> tomcat-net1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+mn+`" alt="image-20220119235724607" tabindex="0" loading="lazy"><figcaption>image-20220119235724607</figcaption></figure><p>居然ping通了</p><p>那么如何解除呢？</p><p>依旧是看看network</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Usage:  <span class="token function">docker</span> network COMMAND

Manage networks

Commands:
<span class="token comment"># 连接</span>
  connect     Connect a container to a network
  <span class="token comment"># 创建</span>
  create      Create a network
  <span class="token comment"># 解除连接</span>
  disconnect  Disconnect a container from a network
  <span class="token comment"># 查看</span>
  inspect     Display detailed information on one or <span class="token function">more</span> networks
  <span class="token comment"># 列表</span>
  <span class="token function">ls</span>          List networks
  <span class="token comment"># 自动删除没人用的</span>
  prune       Remove all unused networks
  <span class="token comment"># 指定删除</span>
  <span class="token function">rm</span>          Remove one or <span class="token function">more</span> networks

Run <span class="token string">&#39;docker network COMMAND --help&#39;</span> <span class="token keyword">for</span> <span class="token function">more</span> information on a command.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看看取消连接有哪些参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Usage:  <span class="token function">docker</span> network disconnect <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NETWORK CONTAINER

Disconnect a container from a network

Options:
  -f, <span class="token parameter variable">--force</span>   Force the container to disconnect from a network 强制容器断开网络连接
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以我们只需要</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network disconnect mynet tomcat1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后再ping，就会发现ping不上了</p><figure><img src="`+kn+'" alt="image-20220120000044659" tabindex="0" loading="lazy"><figcaption>image-20220120000044659</figcaption></figure><h2 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose" aria-hidden="true">#</a> Docker Compose</h2><h3 id="概述-2" tabindex="-1"><a class="header-anchor" href="#概述-2" aria-hidden="true">#</a> 概述</h3><p>我们现在配置Docker有三个步骤：</p><ol><li>DockerFIle</li><li>Docker Build</li><li>Docker Run</li></ol><p>这三步全都是手动操作，并且一次只能操作单个容器</p><p>但是假设我们现在有100个微服务，宕机了我们就要手动重启，非常麻烦，而他们之中还存在依赖关系，配置起来非常麻烦</p><p>Docker Compose就是来解决这个问题的，他可以轻松搞笑的管理容器，定义运行多个容器</p>',130),_s={href:"https://docs.docker.com/compose/",target:"_blank",rel:"noopener noreferrer"},ws=t(`<ol><li>准备好<code>DockerFile</code></li><li>准备好一个<code>docker-compose.yml</code></li><li>运行<code>docker-compose up</code></li></ol><p>作用是：批量容器编排</p><p>Compose是Docker官方的开源项目，需要额外自行安装</p><p><code>Dockerfile</code>让程序在任何地方可以运行web服务等，web服务、redis、mysql、nginx….多个容器</p><p><code>docker-compose.yml</code>让这些容器可以一键部署</p><p>官方文档中这个yml的格式为</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.9&quot;</span>  <span class="token comment"># optional since v1.27.0</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;5000:5000&quot;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> .<span class="token punctuation">:</span>/code
      <span class="token punctuation">-</span> logvolume01<span class="token punctuation">:</span>/var/log
    <span class="token key atrule">links</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> redis
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">logvolume01</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这看起来就像是：image用了redis，然后volumes指定了挂在卷，然后定义了端口暴露..</p><p>Compose有两个重要的概念</p><ul><li>服务Service：容器，应用(web/redis/mysql…)</li><li>项目Project，一组关联的容器</li></ul><h3 id="docker-compose的安装" tabindex="-1"><a class="header-anchor" href="#docker-compose的安装" aria-hidden="true">#</a> Docker Compose的安装</h3>`,11),Ds={href:"https://docs.docker.com/compose/install/",target:"_blank",rel:"noopener noreferrer"},Ss={href:"https://github.com/docker/compose",target:"_blank",rel:"noopener noreferrer"},Cs=n("p",null,"我这里看的最新的是v2.2.3",-1),Os={href:"https://github.com/docker/compose/releases",target:"_blank",rel:"noopener noreferrer"},As=t(`<blockquote><p>后续补充：不建议用v2.0+的版本，有很多地方不太兼容</p><p>建议是用1.29.2</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> https://get.daocloud.io/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">\`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">\`</span></span>-<span class="token variable"><span class="token variable">\`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">\`</span></span> <span class="token operator">&gt;</span> /usr/local/bin/docker-compose

<span class="token comment"># 或者另一个加速</span>
<span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://download.fastgit.org/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>&quot;</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose

<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>&quot;</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然，因为直接下载速度较慢，可以选择加速</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://github.91chi.fun//https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>&quot;</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),Ps={href:"https://fastgit.org/",target:"_blank",rel:"noopener noreferrer"},Ms={href:"https://doc.fastgit.org/zh-cn/guide.html#web-%E7%9A%84%E4%BD%BF%E7%94%A8",target:"_blank",rel:"noopener noreferrer"},Is=t('<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://download.fastgit.org/docker/compose/releases/download/v2.2.3/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>&quot;</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以及daocloud的，看个人心情，反正加速的都可以用，最稳的就是这个daocloud</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-L</span> https://get.daocloud.io/docker/compose/releases/download/v2.2.3/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">`</span></span> <span class="token operator">&gt;</span> /usr/local/bin/docker-compose\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后赋予可执行权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后测试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token parameter variable">--version</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="'+vn+`" alt="image-20220120114317974" tabindex="0" loading="lazy"><figcaption>image-20220120114317974</figcaption></figure><p>当然 我们还可以使用Python-pip来进行安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip3 <span class="token function">install</span> <span class="token function">docker-compose</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者你可以使用贴心的包管理来一键安装（并不推荐，版本有点旧）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">docker-compose</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3>`,13),Rs={href:"https://docs.docker.com/compose/gettingstarted/",target:"_blank",rel:"noopener noreferrer"},Ts=t(`<p>先创建个文件夹</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">mkdir</span> composetest
 <span class="token builtin class-name">cd</span> composetest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后创建一个<code>app.py</code></p><p>??貌似用到了redis</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">import</span> <span class="token function">time</span>

<span class="token comment"># 导入redis</span>
<span class="token function">import</span> redis
<span class="token comment"># 导入Flask  这类似于Java的SpringWeb</span>
from flask <span class="token function">import</span> Flask

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
<span class="token comment"># 监听redis</span>
cache <span class="token operator">=</span> redis.Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;redis&#39;</span>, <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>

<span class="token comment"># 一个方法 反正每次调用都是执行redis的一个自增</span>
def get_hit_count<span class="token punctuation">(</span><span class="token punctuation">)</span>:
    retries <span class="token operator">=</span> <span class="token number">5</span>
    <span class="token keyword">while</span> True:
        try:
            <span class="token builtin class-name">return</span> cache.incr<span class="token punctuation">(</span><span class="token string">&#39;hits&#39;</span><span class="token punctuation">)</span>
        except redis.exceptions.ConnectionError as exc:
            <span class="token keyword">if</span> retries <span class="token operator">==</span> <span class="token number">0</span>:
                raise exc
            retries -<span class="token operator">=</span> <span class="token number">1</span>
            time.sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>

<span class="token comment"># 访问根路径调用方法，并使用模板字符串渲染</span>
@app.route<span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
def hello<span class="token punctuation">(</span><span class="token punctuation">)</span>:
    count <span class="token operator">=</span> get_hit_count<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token builtin class-name">return</span> <span class="token string">&#39;Hello World! I have been seen {} times.\\n&#39;</span>.format<span class="token punctuation">(</span>count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后创建一个pip的<code>requirements.txt</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flask
redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后编写一个DockerFile</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># syntax=docker/dockerfile:1</span>
<span class="token instruction"><span class="token keyword">FROM</span> python:3.7-alpine</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /code</span>
<span class="token instruction"><span class="token keyword">ENV</span> FLASK_APP=app.py</span>
<span class="token instruction"><span class="token keyword">ENV</span> FLASK_RUN_HOST=0.0.0.0</span>
<span class="token instruction"><span class="token keyword">RUN</span> apk add --no-cache gcc musl-dev linux-headers</span>
<span class="token instruction"><span class="token keyword">COPY</span> requirements.txt requirements.txt</span>
<span class="token instruction"><span class="token keyword">RUN</span> pip install -r requirements.txt</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 5000</span>
<span class="token instruction"><span class="token keyword">COPY</span> . .</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;flask&quot;</span>, <span class="token string">&quot;run&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从 Python 3.7 映像开始构建映像。</li><li>将工作目录设置为<code>/code</code>.</li><li>设置命令使用的环境变量<code>flask</code>。</li><li>安装 gcc 和其他依赖项</li><li>复制<code>requirements.txt</code>并安装 Python 依赖项。</li><li>向镜像添加元数据以描述容器正在侦听端口 5000</li><li>将项目中的当前目录复制<code>.</code>到镜像中的workdir <code>.</code>。</li><li>将容器的默认命令设置为<code>flask run</code>.</li></ul><blockquote><p>然后定义我们的service的yml：<code>docker-compose.yml</code></p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 版本号</span>
<span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.9&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
 <span class="token comment"># 这里是使用DockerFile构建的镜像</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
  <span class="token comment"># 构建目录</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token comment"># 暴露的端口</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;5000:5000&quot;</span>
  <span class="token comment"># 下面这里是使用了官方的redis的镜像</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&quot;redis:alpine&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后只需要在当前文件夹下执行一条命令即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后你就能看到如下内容</p><figure><img src="`+bn+'" alt="image-20220120120148671" tabindex="0" loading="lazy"><figcaption>image-20220120120148671</figcaption></figure><p>最后一个下载可能会比较慢…</p><p>草，会非常非常的慢，尤其是那个gcc</p><p>所以说我们改动下脚本</p><figure><img src="'+gn+'" alt="image-20220120124603233" tabindex="0" loading="lazy"><figcaption>image-20220120124603233</figcaption></figure><p>这行删掉，重新构建（或者你在那里自己指定代理）</p><p>然后你就能得到</p><figure><img src="'+hn+'" alt="image-20220120124734036" tabindex="0" loading="lazy"><figcaption>image-20220120124734036</figcaption></figure><p>然后开下5000端口，外网访问下看看</p><figure><img src="'+fn+'" alt="image-20220120124915265" tabindex="0" loading="lazy"><figcaption>image-20220120124915265</figcaption></figure><p>成功，然后尝试下退出</p><figure><img src="'+qn+'" alt="image-20220120125100136" tabindex="0" loading="lazy"><figcaption>image-20220120125100136</figcaption></figure><p>然后您能得到这两个镜像</p><figure><img src="'+yn+'" alt="image-20220120125230085" tabindex="0" loading="lazy"><figcaption>image-20220120125230085</figcaption></figure><p>并且在docker images里面多了一个内容</p><figure><img src="'+xn+'" alt="image-20220120125354954" tabindex="0" loading="lazy"><figcaption>image-20220120125354954</figcaption></figure><p>并且，我们看看network</p><figure><img src="'+_n+`" alt="image-20220120131325324" tabindex="0" loading="lazy"><figcaption>image-20220120131325324</figcaption></figure><p>可以看到，多出了一个网络，也就是说我们部署的容器都是可以互通的</p><h3 id="compose常用命令一览" tabindex="-1"><a class="header-anchor" href="#compose常用命令一览" aria-hidden="true">#</a> Compose常用命令一览</h3><p>注意 以下命令都是要cd到指定文件夹下才行</p><blockquote><p>普通运行</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>后台运行</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>一次性运行</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>查看正在运行的容器(通过Compose构建的)</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>结束服务</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>完全关闭、删除容器，并且删除对应的数据卷</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> down <span class="token parameter variable">--volumes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="compose文件编写规则" tabindex="-1"><a class="header-anchor" href="#compose文件编写规则" aria-hidden="true">#</a> Compose文件编写规则</h2>`,49),Es={href:"https://docs.docker.com/compose/compose-file/",target:"_blank",rel:"noopener noreferrer"},Ns=t('<h3 id="version约定" tabindex="-1"><a class="header-anchor" href="#version约定" aria-hidden="true">#</a> version约定</h3><p>表示这个Compose文件支持哪些指定的Docker版本</p><p>一般来说现在都是写3.9</p><table><thead><tr><th style="text-align:left;">版本号</th><th style="text-align:left;">对应的Docker版本</th></tr></thead><tbody><tr><td style="text-align:left;">Compose specification</td><td style="text-align:left;">19.03.0+</td></tr><tr><td style="text-align:left;">3.8</td><td style="text-align:left;">19.03.0+</td></tr><tr><td style="text-align:left;">3.7</td><td style="text-align:left;">18.06.0+</td></tr><tr><td style="text-align:left;">3.6</td><td style="text-align:left;">18.02.0+</td></tr><tr><td style="text-align:left;">3.5</td><td style="text-align:left;">17.12.0+</td></tr><tr><td style="text-align:left;">3.4</td><td style="text-align:left;">17.09.0+</td></tr><tr><td style="text-align:left;">3.3</td><td style="text-align:left;">17.06.0+</td></tr><tr><td style="text-align:left;">3.2</td><td style="text-align:left;">17.04.0+</td></tr><tr><td style="text-align:left;">3.1</td><td style="text-align:left;">1.13.1+</td></tr><tr><td style="text-align:left;">3.0</td><td style="text-align:left;">1.13.0+</td></tr><tr><td style="text-align:left;">2.4</td><td style="text-align:left;">17.12.0+</td></tr><tr><td style="text-align:left;">2.3</td><td style="text-align:left;">17.06.0+</td></tr><tr><td style="text-align:left;">2.2</td><td style="text-align:left;">1.13.0+</td></tr><tr><td style="text-align:left;">2.1</td><td style="text-align:left;">1.12.0+</td></tr><tr><td style="text-align:left;">2.0</td><td style="text-align:left;">1.10.0+</td></tr></tbody></table><h3 id="compose-service" tabindex="-1"><a class="header-anchor" href="#compose-service" aria-hidden="true">#</a> Compose-Service</h3>',5),zs={href:"https://docs.docker.com/compose/compose-file/compose-file-v3/#service-configuration-reference",target:"_blank",rel:"noopener noreferrer"},Ls={href:"https://blog.csdn.net/qq_36148847/article/details/79427878",target:"_blank",rel:"noopener noreferrer"},js=t(`<p>反正总共就三层概念</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;版本号&quot;</span>
<span class="token key atrule">service</span><span class="token punctuation">:</span> <span class="token comment">#服务</span>
	<span class="token key atrule">服务1</span><span class="token punctuation">:</span> web
		images
		build
		network
		<span class="token punctuation">...</span>.
    <span class="token key atrule">服务2</span><span class="token punctuation">:</span> redis。。。
    <span class="token key atrule">服务3</span><span class="token punctuation">:</span> redis。。。
<span class="token comment"># 其他配置：网络、数据卷、全局规则</span>
<span class="token key atrule">volumes</span><span class="token punctuation">:</span> 
<span class="token key atrule">networks</span><span class="token punctuation">:</span>
<span class="token key atrule">configs</span><span class="token punctuation">:</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写一个wordpress博客" tabindex="-1"><a class="header-anchor" href="#编写一个wordpress博客" aria-hidden="true">#</a> 编写一个WordPress博客</h3><p>随便创建一个文件夹，然后创建一个docker-compose.yml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.1&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>

  <span class="token key atrule">wordpress</span><span class="token punctuation">:</span>
  <span class="token comment"># 使用镜像</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> wordpress
    <span class="token comment"># 是否自动启动</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token comment"># 容器端口</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">80</span>
    <span class="token comment"># 容器环境变量</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">WORDPRESS_DB_HOST</span><span class="token punctuation">:</span> db
      <span class="token key atrule">WORDPRESS_DB_USER</span><span class="token punctuation">:</span> exampleuser
      <span class="token key atrule">WORDPRESS_DB_PASSWORD</span><span class="token punctuation">:</span> examplepass
      <span class="token key atrule">WORDPRESS_DB_NAME</span><span class="token punctuation">:</span> exampledb
    <span class="token comment"># 挂载的数据卷</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> wordpress<span class="token punctuation">:</span>/var/www/html

  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> exampledb
      <span class="token key atrule">MYSQL_USER</span><span class="token punctuation">:</span> exampleuser
      <span class="token key atrule">MYSQL_PASSWORD</span><span class="token punctuation">:</span> examplepass
      <span class="token key atrule">MYSQL_RANDOM_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token string">&#39;1&#39;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> db<span class="token punctuation">:</span>/var/lib/mysql

<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">wordpress</span><span class="token punctuation">:</span>
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后就行了</p><p>删除：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> down <span class="token parameter variable">--volumes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10);function Hs(Us,Fs){const a=o("ExternalLinkIcon");return p(),l("div",null,[Dn,n("p",null,[s("Docker"),n("a",Sn,[s("官方文档"),e(a)]),s("非常的清晰 很容易就能上手使用")]),Cn,n("p",null,[s("阿里云申请教程"),On,n("a",An,[s("https://cr.console.aliyun.com/"),e(a)]),Pn,s(" 点进去之后，有一个镜像工具，点进去之后，有一个镜像加速器，里面有大概类似于这样一个地址")]),n("p",null,[n("a",Mn,[s("https://1234abcd.mirror.aliyuncs.com"),e(a)])]),In,n("p",null,[s("官方文档cli"),n("a",Rn,[s("命令一览"),e(a)])]),Tn,n("p",null,[s("网上搜索："),n("a",En,[s("https://hub.docker.com/"),e(a)]),s("左上搜索，请")]),Nn,n("p",null,[s("关于tomcat 可以在其"),n("a",zn,[s("官方文档"),e(a)]),s("中看到这样一条启动命令")]),Ln,n("p",null,[s("首先看看"),n("a",jn,[s("部署文档"),e(a)])]),Hn,n("p",null,[s("在它的docker hub主页面内 可以看到一个"),n("a",Un,[s("here"),e(a)])]),Fn,n("p",null,[s("嘛，JVM的大概就是"),n("a",Bn,[s("这些"),e(a)]),s("，目前来说也只需要知道这些就行了，这里就类似于")]),Vn,n("p",null,[s("这个非常简单，看下"),n("a",Wn,[s("文档"),e(a)])]),Kn,n("p",null,[n("a",Yn,[s("https://docs.portainer.io/v/ce-2.9/start/install/agent/docker/linux"),e(a)])]),$n,Gn,Jn,n("p",null,[s("我们先来看看一般的镜像是怎么样的，例如"),n("a",Qn,[s("ubuntu"),e(a)])]),Xn,Zn,ns,n("p",null,[n("a",ss,[s("https://github.com/tianon/docker-brew-ubuntu-core/blob/bf61e139e84e04f9d87fff5dc588a3f0398da627/focal/Dockerfile"),e(a)])]),as,es,n("p",null,[s("在"),n("a",ts,[s("官方文档"),e(a)]),s("中，是这样说明的：")]),n("ul",null,[n("li",null,[s("一个"),n("a",is,[s("父映像"),e(a)]),s("是你的形象是基于图像。它指的是"),os,s("Dockerfile 中指令的内容。Dockerfile 中的每个后续声明都会修改此父映像。大多数 Dockerfile 从父映像开始，而不是从基础映像开始。但是，这些术语有时可以互换使用。")]),n("li",null,[n("a",ps,[s("基本图像"),e(a)]),s("具有"),ls,s("在其Dockerfile。")])]),cs,n("p",null,[s("JDK："),n("a",rs,[s("https://www.oracle.com/java/technologies/downloads/"),e(a)]),s("往下拉找到x64 Compressed Archive下载即可")]),n("p",null,[s("Tomcat："),n("a",ds,[s("https://tomcat.apache.org/download-90.cgi"),e(a)])]),us,n("p",null,[s("使用OpenLogic的"),n("a",ms,[s("JDK"),e(a)])]),n("p",null,[s("在下载的时候，我突然想到，阿里巴巴不是也有jdk来着，于是也尝试了下阿里巴巴的"),n("a",ks,[s("JDK"),e(a)])]),vs,n("ol",null,[n("li",null,[n("p",null,[s("注册账号"),n("a",bs,[s("https://hub.docker.com/"),e(a)])])]),gs,n("li",null,[hs,n("ul",null,[fs,n("li",null,[n("p",null,[s("然后你就能在自己的"),n("a",qs,[s("Docker Hub"),e(a)]),s("上看到如下内容了")])]),ys])])]),xs,n("p",null,[s("根据它的"),n("a",_s,[s("官方文档"),e(a)]),s("中描述，可以得知，我们使用的话需要三步")]),ws,n("p",null,[s("参照官方文档"),n("a",Ds,[s("https://docs.docker.com/compose/install/"),e(a)])]),n("p",null,[s("文档中有git的命令，于是我去Compose的"),n("a",Ss,[s("仓库"),e(a)]),s("看了看")]),Cs,n("p",null,[s("你可以到这个链接里面去看看"),n("a",Os,[s("https://github.com/docker/compose/releases"),e(a)])]),As,n("p",null,[s("我这里的话，比较块的加速还是这个"),n("a",Ps,[s("https://fastgit.org/"),e(a)])]),n("p",null,[s("这个加速的使用"),n("a",Ms,[s("教程"),e(a)])]),Is,n("p",null,[s("参考官方文档"),n("a",Rs,[s("https://docs.docker.com/compose/gettingstarted/"),e(a)])]),Ts,n("p",null,[s("参照官方文档"),n("a",Es,[s("https://docs.docker.com/compose/compose-file/"),e(a)])]),Ns,n("p",null,[s("详细的可以去看"),n("a",zs,[s("官方文档"),e(a)])]),n("p",null,[s("或者这篇"),n("a",Ls,[s("博客"),e(a)]),s("（这篇博客比较齐全）")]),js])}const Ws=i(wn,[["render",Hs],["__file","00-Docker.html.vue"]]);export{Ws as default};
