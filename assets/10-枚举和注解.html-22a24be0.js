import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-3ab2953d.js";const e="/images/Java/JavaSE/10-枚举和注解/image-20211102221045495.png",p="/images/Java/JavaSE/10-枚举和注解/image-20211102222508104.png",o="/images/Java/JavaSE/10-枚举和注解/image-20211102234344147.png",c="/images/Java/JavaSE/10-枚举和注解/image-20211102234328409.png",i="/images/Java/JavaSE/10-枚举和注解/image-20211102234854228.png",l="/images/Java/JavaSE/10-枚举和注解/image-20211103001631830.png",u="/images/Java/JavaSE/10-枚举和注解/image-20211103001932462.png",r="/images/Java/JavaSE/10-枚举和注解/image-20211103002105765.png",k={},d=t(`<h2 id="枚举介绍" tabindex="-1"><a class="header-anchor" href="#枚举介绍" aria-hidden="true">#</a> 枚举介绍</h2><blockquote><p>开始前，先来看一个需求：创建季节（Season）对象，请设计并完成</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>enum_</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 *
 * <span class="token keyword">@author</span> Amayakite
 * <span class="token keyword">@version</span> 1.0.0
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Enumeration01</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        使用</span>
        <span class="token class-name">Season</span> season <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;春天&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;冷&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Season</span> season1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;夏天&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;热&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Season</span> season2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;秋天&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;冷&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Season</span> season3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;冬天&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;冷&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        看起来很正常，但是假如说某一天来了个憨批，写了个：</span>
        <span class="token class-name">Season</span> season4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;大黑暗天&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Genshin Impact&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        或者又有个人，把已创建的对象的值修改了:</span>
        season<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">&quot;热死了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        season<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;北风天&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        这显然就不符合逻辑了...因为对于季节而言，他的具体的值就是固定的四个，不会有更多的取值范围</span>

<span class="token comment">//        按照目前的设计思路，不能提现季节是固定的四个对象</span>
<span class="token comment">//        因此，这样的设计不好</span>
<span class="token comment">//        所以，就得用到枚举类了[枚：一个一个；举：列举；即把对象一个一个列举出来，只能选取其中某个]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Season</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span><span class="token comment">// 描述</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建Season对象有如下几个特点：</p><ol><li>季节的值是有限的几个值(Spring,Summer,Autumn,Winter)</li><li>只读，不需要修改</li></ol><p>解决方案：枚举</p><h3 id="枚举的介绍" tabindex="-1"><a class="header-anchor" href="#枚举的介绍" aria-hidden="true">#</a> 枚举的介绍</h3><ol><li>枚举对应英文：<code>enumeration</code>，简写<code>enum</code></li><li>枚举是一组常量的集合</li><li>可以理解为：枚举属于一种特殊的类，里面只包含有一租有限定的特定对象</li></ol><h2 id="自定义类实现枚举" tabindex="-1"><a class="header-anchor" href="#自定义类实现枚举" aria-hidden="true">#</a> 自定义类实现枚举</h2><p>自定义类实现枚举-应用案例</p><ol><li>不需要提供setXXX方法，因为枚举对象值为只读</li><li>对美剧对象、属性使用final+static共同修饰，实现底层加载优化</li><li>枚举对象名通常使用全部大写，常量的命名规范</li><li>枚举对象根据需要，也可以有多个属性</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>enum_</span><span class="token punctuation">;</span>

<span class="token comment">/*
 * @author &lt;a href=&quot;mail to: amayakite@qq.com&quot; rel=&quot;nofollow&quot;&gt;作者&lt;/a&gt;
 * @version v1.0.0
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Enumeration02</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Season</span><span class="token punctuation">.</span><span class="token constant">AUTUMN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 演示自定义枚举实现
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Season</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span><span class="token comment">// 描述</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token comment">//    2 将set去掉，防止被修改</span>

<span class="token comment">//    3 在season内部，直接创建固定的对象</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">SPRING</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;春天&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;温暖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">SUMMER</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;夏天&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;热&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">AUTUMN</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;秋天&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;凉爽&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">WINTER</span> <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;冬天&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;寒冷&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//    这个时候看起来已经解决了前面的一些问题，自己先定义了几个静态资源</span>
<span class="token comment">//    并且令它的属性不能被修改</span>
<span class="token comment">//</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Season{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, desc=&#39;&quot;</span> <span class="token operator">+</span> desc <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//   1.  将构造器私有化，防止被new出来</span>
    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="enum关键字实现枚举" tabindex="-1"><a class="header-anchor" href="#enum关键字实现枚举" aria-hidden="true">#</a> enum关键字实现枚举</h2><p>想看结果</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>enum_</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Enumeration03</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Season2</span><span class="token punctuation">.</span><span class="token constant">SPRING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Season2</span><span class="token punctuation">.</span><span class="token constant">AUTUMN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Season2</span><span class="token punctuation">.</span><span class="token constant">WINTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Season2</span><span class="token punctuation">.</span><span class="token constant">SUMMER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//使用enum关键字来实现枚举类</span>
<span class="token keyword">enum</span> <span class="token class-name">Season2</span> <span class="token punctuation">{</span>
    
<span class="token comment">//    如果使用了enum来实现枚举类</span>
<span class="token comment">//    1. 使用关键字enum来替代class</span>
<span class="token comment">//    2. public static final Season SPRING = new Season(&quot;春天&quot;, &quot;温暖&quot;); 直接使用</span>
<span class="token comment">//    3. SPRING(&quot;春天&quot;,&quot;温暖&quot;);解读： 常量名(实参列表)</span>
<span class="token comment">//    4. 如果有多个常量(对象)，使用逗号来间隔即可</span>
<span class="token comment">//    5. 如果使用enum来实现枚举，要求将定义的常量对象写在最前面，写在其他地方会报错</span>
    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">&quot;春天&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;温暖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">&quot;夏天&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;热&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">&quot;秋天&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;凉爽&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">&quot;冬天&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;寒冷&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span><span class="token comment">// 描述</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Season{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, desc=&#39;&quot;</span> <span class="token operator">+</span> desc <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//   将构造器私有化，防止被new出来</span>
    <span class="token keyword">private</span> <span class="token class-name">Season2</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可以看到，这玩意很方便的就把之前的一大长条的public static final xxx =new xxx给替换掉了，接下来说说它的注意事项</p></blockquote><ol><li><p>当我们使用<code>enum</code>关键字开发一个枚举类时，默认会继承Enum类<br> 使用javap-反编译来演示：</p><p><img src="`+e+`" alt="image-20211102221045495" loading="lazy">可以看到底层实际上就是将这个类是一个<strong>final类</strong>，继承Enum类，并且，他之中的所有我们定义的常量对象都转换成了<code>public static final......</code><br> 在IEDA中可以通过<code>ctrl+H</code>来查看这个Enum类的一些细节，可以发现：</p><p>它的tostring：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public String toString() {
    return name;
}
//这个tostring就相当于，我定义的是啥，返回的就是啥，比如：定义了一个枚举常量AGE 那么这个name就是age：
sout(xx.AGE.toString());// AGE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>传统的<code>public static final Season SPRING = new Season(&quot;春天&quot;, &quot;温暖&quot;);</code>，简化成<code>SPRING(&quot;春天&quot;,&quot;温暖&quot;)</code>，这你必须要知道，它是调用哪个构造器</p></li><li><p>如果使用无参构造器创建枚举对象，则实参列表和小括号都可以省略</p></li><li><p>当有多个枚举对象时，使用,间隔，最后有一个分号结尾</p></li><li><p>枚举对象必须放在枚举类的行首</p></li></ol><h3 id="enum常用方法说明" tabindex="-1"><a class="header-anchor" href="#enum常用方法说明" aria-hidden="true">#</a> enum常用方法说明</h3><p>当使用关键字enum时，会隐式继承Enum类，这样我们就可以使用Enum类的相关方法</p><figure><img src="`+p+`" alt="enum常用方法表" tabindex="0" loading="lazy"><figcaption>enum常用方法表</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>enum_</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumExrices02</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        获取到所有的枚举对象并for打印</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===所有的信息如下===&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Week</span> value <span class="token operator">:</span> <span class="token class-name">Week</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 使用枚举来实现：定义周一至周日的枚举对象，并打印
 */</span>
<span class="token keyword">enum</span> <span class="token class-name">Week</span> <span class="token punctuation">{</span>
    <span class="token function">MONDAY</span><span class="token punctuation">(</span><span class="token string">&quot;一&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">TUESDAY</span><span class="token punctuation">(</span><span class="token string">&quot;二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">WEDNESDAY</span><span class="token punctuation">(</span><span class="token string">&quot;三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">THURSDAY</span><span class="token punctuation">(</span><span class="token string">&quot;四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">FRIDAY</span><span class="token punctuation">(</span><span class="token string">&quot;五&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">SATURDAY</span><span class="token punctuation">(</span><span class="token string">&quot;六&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">SUNDAY</span><span class="token punctuation">(</span><span class="token string">&quot;七&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;星期&quot;</span><span class="token operator">+</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="enum使用细节" tabindex="-1"><a class="header-anchor" href="#enum使用细节" aria-hidden="true">#</a> ENUM使用细节</h3><ol><li><strong>使用enum关键字后，就不能再继承其他类了，因为enum会隐式继承Enum类，而Java是单继承机制</strong></li><li>枚举类和普通类一样，<strong>可以实现接口</strong>，如下所示：<br><code>enum 枚举名 implements 接口1,接口2{}</code></li></ol><blockquote><p>嘛 感觉这Java中的枚举有点菜，不能像Typescript那样非常完美的定义enum(1,2,3)之类的来限制函数的传入值...</p></blockquote><h3 id="枚举的补充-配合switch来使用" tabindex="-1"><a class="header-anchor" href="#枚举的补充-配合switch来使用" aria-hidden="true">#</a> 枚举的补充：配合Switch来使用</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Color</span><span class="token punctuation">{</span>
    <span class="token function">RED</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">BLUE</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> colorR<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> colorG<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> colorB<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Scanne</span><span class="token punctuation">;</span>  <span class="token comment">//获取用户输入的颜色并转换成大写</span>
    color<span class="token operator">=</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>userinput<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换用户输入的值变为枚举常量...</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//在每个case后直接写上定义的枚举常量即可</span>
        <span class="token keyword">case</span> <span class="token constant">RED</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">BLue</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>以此类推
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jdk内置的基本注解类" tabindex="-1"><a class="header-anchor" href="#jdk内置的基本注解类" aria-hidden="true">#</a> JDK内置的基本注解类</h2><blockquote><p>注解的理解</p></blockquote><ol><li>注解(Annotation) 也被称为元数据(Metadata)，用于修饰包，类，方法，属性，构造器，局部变量等数据信息</li><li>和注释代码一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息</li><li>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等，<strong>在JavaEE中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE就版本中所遗留的繁冗代码和XML配置等。</strong></li></ol><h3 id="基本的annotation介绍" tabindex="-1"><a class="header-anchor" href="#基本的annotation介绍" aria-hidden="true">#</a> 基本的Annotation介绍</h3><p>使用Annotation时需要在其前面加@符号，并把该Annotation当成一个修饰符使用，用于修饰它支持的程序元素</p><p>三个基本的Annotation：</p><ol><li><p><code>@Override</code>:<strong>限定某个方法，是重写父类方法，该注解方法只能用于方法</strong><br> 这个不需要过多了解了，天天跟他打交道，方法的含义就是表示这玩意是重写了父类的方法</p><ul><li>@Override 表示指定重写父类的方法（从编译层面验证），如果父类没有能重写的方法或匹配不到相应的方法，则会报错</li><li>入股过不屑@Override注解，而父类任然有public void xxx(){},任然构成重写</li><li>@Override只能修饰方法，不能修饰其他类，包，属性等</li><li>查看@Override注解源码为<code>@Target(ElementType.METHOD)</code>，说明只能修饰方法</li><li>@Target是<strong>修饰注解的注解</strong>，称为元注解</li></ul></li><li><p><code>@Deprecated</code>:<strong>用于表示某个程序元素（类/方法等）已过时，可以修饰 方法 字段 包 参数 等等</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>anntation_</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Deprecated_</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">A</span> a <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//@Deprecated 修饰某个元素，比如修饰某个类，表示该元素已经过时了</span>
<span class="token comment">//过时了并不表示不能用，只是不推荐使用，但是仍然可以使用</span>
<span class="token annotation punctuation">@Deprecated</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Deprecated</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+o+'" alt="image-20211102234344147" tabindex="0" loading="lazy"><figcaption>image-20211102234344147</figcaption></figure><figure><img src="'+c+`" alt="image-20211102234328409" tabindex="0" loading="lazy"><figcaption>image-20211102234328409</figcaption></figure><p>dd</p></li><li><p><code>@SuppressWarnings</code>:抑制编译器警告<br> 比如说现在有一段代码:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>anntation_</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuppressWarnings_</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Tome&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Jock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Alick&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;adad&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+i+`" alt="image-20211102234854228" loading="lazy">编译器报了一堆警告，但是如果我认为这些警告不影响我的使用，就可以使用@SuppressWarnings让编译器强制不显示警告</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>anntation_</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 当我们不希望看到这些警告的时候，可以使用@SuppressWarnings来抑制警告信息
 * 在<span class="token punctuation">{</span>&quot;&quot;<span class="token punctuation">}</span>中，可以写入希望抑制（不显示的）警告信息
 * 详细的关键词可以看下方信息
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuppressWarnings_</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Tome&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Jock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Alick&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;adad&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于SuppressWarnings 作用范围是和写的位置有关，比如放到main上面，就是对整个main生效</p><p><strong>当然，除非在非常明确自己在做什么，不然不要乱用@SuppressWarnings来抑制编译器警告</strong></p></li></ol><ul><li><p>补充：@interface 注解类，比如@override 就是继承至它，他可以定义一个注解类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">SOURCE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Override</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>补充：SuppressWarnings的可用关键字</p></li></ul><table><thead><tr><th style="text-align:center;">关键字</th><th style="text-align:center;">用途</th></tr></thead><tbody><tr><td style="text-align:center;">all</td><td style="text-align:center;">to suppress all warnings（抑制所有警告）</td></tr><tr><td style="text-align:center;">boxing</td><td style="text-align:center;">to suppress warnings relative to boxing/unboxing operations（要抑制与箱/非装箱操作相关的警告）</td></tr><tr><td style="text-align:center;">cast</td><td style="text-align:center;">to suppress warnings relative to cast operations（为了抑制与强制转换操作相关的警告）</td></tr><tr><td style="text-align:center;">dep-ann</td><td style="text-align:center;">to suppress warnings relative to deprecated annotation（要抑制相对于弃用注释的警告）</td></tr><tr><td style="text-align:center;">deprecation</td><td style="text-align:center;">to suppress warnings relative to deprecation（要抑制相对于弃用的警告）</td></tr><tr><td style="text-align:center;">fallthrough</td><td style="text-align:center;">to suppress warnings relative to missing breaks in switch statements（在switch语句中，抑制与缺失中断相关的警告）</td></tr><tr><td style="text-align:center;">finally</td><td style="text-align:center;">to suppress warnings relative to finally block that don’t return（为了抑制警告，相对于最终阻止不返回的警告）</td></tr><tr><td style="text-align:center;">hiding</td><td style="text-align:center;">to suppress warnings relative to locals that hide variable（为了抑制本地隐藏变量的警告）</td></tr><tr><td style="text-align:center;">incomplete-switch</td><td style="text-align:center;">to suppress warnings relative to missing entries in a switch statement (enum case)（为了在switch语句（enum案例）中抑制相对于缺失条目的警告）</td></tr><tr><td style="text-align:center;">nls</td><td style="text-align:center;">to suppress warnings relative to non-nls string literals（要抑制相对于非nls字符串字面量的警告）</td></tr><tr><td style="text-align:center;">null</td><td style="text-align:center;">to suppress warnings relative to null analysis（为了抑制与null分析相关的警告）</td></tr><tr><td style="text-align:center;">rawtypes</td><td style="text-align:center;">to suppress warnings relative to un-specific types when using generics on class params（在类params上使用泛型时，要抑制相对于非特异性类型的警告）</td></tr><tr><td style="text-align:center;">restriction</td><td style="text-align:center;">to suppress warnings relative to usage of discouraged or forbidden references（禁止使用警告或禁止引用的警告）</td></tr><tr><td style="text-align:center;">serial</td><td style="text-align:center;">to suppress warnings relative to missing serialVersionUID field for a serializable class（为了一个可串行化的类，为了抑制相对于缺失的serialVersionUID字段的警告）</td></tr><tr><td style="text-align:center;">static-access</td><td style="text-align:center;">o suppress warnings relative to incorrect static access（o抑制与不正确的静态访问相关的警告）</td></tr><tr><td style="text-align:center;">synthetic-access</td><td style="text-align:center;">to suppress warnings relative to unoptimized access from inner classes（相对于内部类的未优化访问，来抑制警告）</td></tr><tr><td style="text-align:center;">unchecked</td><td style="text-align:center;">to suppress warnings relative to unchecked operations（相对于不受约束的操作，抑制警告）</td></tr><tr><td style="text-align:center;">unqualified-field-access</td><td style="text-align:center;">to suppress warnings relative to field access unqualified（为了抑制与现场访问相关的警告）</td></tr><tr><td style="text-align:center;">unused</td><td style="text-align:center;">to suppress warnings relative to unused code（抑制没有使用过代码的警告）</td></tr></tbody></table><h2 id="元注解-对注解进行注解" tabindex="-1"><a class="header-anchor" href="#元注解-对注解进行注解" aria-hidden="true">#</a> 元注解：对注解进行注解</h2><p>JDK的元Annotation用于修饰其他的Annotation</p><p>元注解：本身作用不大，主要是在看源码的时候明白它是干什么的</p><ul><li>元注解的种类（使用不多，了解即可） <ol><li><code>Retention</code> 指定注解的作用范围：三种：SOURCE，CLASS，RUNTIME</li><li><code>Target</code> 指定注解可以在哪些地方用</li><li><code>Documented</code> 指定该注解是否会在JavaDoc体现<br> 比如看看String类的JavaDOC，可以看到里面那些写了已废弃的。。。</li><li><code>Inherited</code> 子类会继承父类注解<br> 这个使用的特别少，简单说下：<br> 被他修饰的annotation将自动具有继承性，如果某个类使用了@inherited修饰符，则其之类将自动具有该注解</li></ol></li></ul><h3 id="retention注解" tabindex="-1"><a class="header-anchor" href="#retention注解" aria-hidden="true">#</a> @Retention注解</h3><p>说明：</p><blockquote><p>只能用于修饰一个Annotation定义，用于指定该Annotation可以保留多长时间，@Retention包含一个RententionPolicy类型成员变量，使用@Retention时必须为该value成员变量指定值</p></blockquote><p>@Retention的三种值：</p><ol><li><code>RententionPolicy.SOURCE</code>编译器使用后，直接丢弃这种策略来源</li><li><code>RententionPolicy.CLASS</code> 编译器将把注解记录在class文件中，当运行java程序时，JVM不会保留注解，这是默认值</li><li><code>RententionPolicy.RUNTIME</code> 编译器把注释记录在Class文件中，当运行Java程序时，JVM会保留注解，程序可以通过反射来获取该值</li></ol><figure><img src="`+l+'" alt="image-20211103001631830" tabindex="0" loading="lazy"><figcaption>image-20211103001631830</figcaption></figure><h3 id="target" tabindex="-1"><a class="header-anchor" href="#target" aria-hidden="true">#</a> @Target</h3><p>用于修饰annotation定义，用于指定被修饰的annotation能用于修饰哪些元素，@Target也包含一个名为Value的成员变量ElementType</p><figure><img src="'+u+'" alt="image-20211103001932462" tabindex="0" loading="lazy"><figcaption>image-20211103001932462</figcaption></figure><figure><img src="'+r+'" alt="image-20211103002105765" tabindex="0" loading="lazy"><figcaption>image-20211103002105765</figcaption></figure>',49),v=[d];function m(b,g){return s(),a("div",null,v)}const q=n(k,[["render",m],["__file","10-枚举和注解.html.vue"]]);export{q as default};
