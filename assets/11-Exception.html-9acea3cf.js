import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c,d as a,e as n}from"./app-3ab2953d.js";const o="/images/Java/JavaSE/11-Exception/image-20211103143937071.png",i="/images/Java/JavaSE/11-Exception/image-20211103145516146.png",l="/images/Java/JavaSE/11-Exception/image-20211103160838379.png",u="/images/Java/JavaSE/11-Exception/image-20211103161052235.png",r="/images/Java/JavaSE/11-Exception/image-20211103162250515.png",d="/images/Java/JavaSE/11-Exception/image-20211103162939406.png",k="/images/Java/JavaSE/11-Exception/image-20211103164117438.png",m="/images/Java/JavaSE/11-Exception/image-20211103174900422.png",v={},b=n(`<h2 id="异常的概念" tabindex="-1"><a class="header-anchor" href="#异常的概念" aria-hidden="true">#</a> 异常的概念</h2><blockquote><p>在说到异常前，来看一段代码：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>exception_</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exception01</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> num1<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num2 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">//        num1/num2 ==&gt;10/0</span>
<span class="token comment">//        当执行到num1/num2时，程序就会抛出异常：ArithmeticException</span>
<span class="token comment">//        当抛出异常后，程序就结束了（崩溃了），下面的代码就不再执行</span>
<span class="token comment">//        思考，这样的程序好吗？这样不好，不应该因为出现了一个不算致命性的问题，就导致整个程序停止运行/整个系统崩溃</span>
<span class="token comment">//        Java设计者 提供了一个 异常处理机制 来处理该问题</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span>num1<span class="token operator">/</span>num2<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;程序继续运行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上方代码结果：</p><figure><img src="`+o+`" alt="image-20211103143937071" tabindex="0" loading="lazy"><figcaption>image-20211103143937071</figcaption></figure><p>截下来使用try-catch来解决这个问题：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>exception_</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exception01</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> num1<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num2 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">//        如果程序员 认为一段代码可能出现异常/问题，可以使用try-catch机制来处理异常</span>
<span class="token comment">//        从而保证程序的健壮性</span>
<span class="token comment">//        小tips：在IDEA中，可以把想要处理的代码选中，按Ctrl+alt+T来快速创建trycatch</span>
<span class="token comment">//        或者在一句代码后面.try也可以自动生成</span>
<span class="token comment">//        如果进行异常处理，name及时出现了异常，程序也可以继续执行</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> res <span class="token operator">=</span>num1<span class="token operator">/</span>num2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//            e.printStackTrace(); 打印异常</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;出现异常的原因&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出异常的信息</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;程序继续运行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><figure><img src="`+i+'" alt="image-20211103145516146" tabindex="0" loading="lazy"><figcaption>image-20211103145516146</figcaption></figure><p>可以看到，烦人的异常消失了，接下来仔细了解下它</p><h3 id="异常的解决方案-try-catch" tabindex="-1"><a class="header-anchor" href="#异常的解决方案-try-catch" aria-hidden="true">#</a> 异常的解决方案-Try-Catch</h3><h4 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h4><p>Java语言中，将程序执行中发生的不正常情况称之为<em>异常</em>(<strong>开发过程中的语法错误和逻辑错误不是异常</strong>)</p><ul><li>程序执行过程中所发生的异常事件可分为两类 <ol><li><code>Error</code>(错误):<strong>Java虚拟机无法解决的严重问题</strong>，如： <ul><li>JVM内部系统错误，资源耗尽等严重情况，比如： <ul><li><code>Stack Overflow Error</code>栈溢出</li><li><code>OOM(out of memory)</code></li></ul></li><li><strong>ERROR是严重错误，程序会崩溃</strong></li><li>就相当于一个人得了癌症一样，是无法处理的(就目前科技来说)</li></ul></li><li><code>Exception</code>:其他原因变成错误或偶然的外在因素下导致的一般性问题，<strong>可以使用针对性代码进行处理</strong>，例如： <ul><li>空指针访问</li><li>试图读取不存在的文件</li><li>网络连接中断等</li><li>Exception分为两大类：<strong>运行时异常</strong>[<em>程序运行时发生的异常</em>]和<strong>编译时异常</strong>[<em>编程时，由编译器检查出的异常</em>]</li><li>就相当于人得了牙疼 脚疼 手疼 感冒之类的病，可以通过对症下药解决问题</li></ul></li></ol></li><li>运行时异常，编译器检查不出来，一般是指编程时的逻辑错误，是程序员应该避免出现的异常<br><code>Java.lang.RuntimeException</code>类及它的子类都是运行时异常</li><li>对于运行时异常，可以不做处理，因为这类异常很普遍，若全处理可能会对程序的可以毒性和运行效率产生影响</li><li>编译时异常，是编译器要求必须处置的异常</li></ul><p>上方的案例中，所出现的异常就是<em>运行时异常</em>，因为它在编译的时候并没有报任何错误，程序也是正常运行直至<code>res = num1/num2</code>时抛出异常</p><h2 id="异常体系图" tabindex="-1"><a class="header-anchor" href="#异常体系图" aria-hidden="true">#</a> 异常体系图</h2><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3>',17),g=n('<figure><img src="'+l+'" alt="image-20211103160838379" tabindex="0" loading="lazy"><figcaption>image-20211103160838379</figcaption></figure><figure><img src="'+u+'" alt="image-20211103161052235" tabindex="0" loading="lazy"><figcaption>image-20211103161052235</figcaption></figure><p>(使用IEDA自带工具绘制出的一部分异常体系图，展现了他们的继承关系（虚线表示实现了接口，实现表示继承了类）)</p><h2 id="常见的运行时异常" tabindex="-1"><a class="header-anchor" href="#常见的运行时异常" aria-hidden="true">#</a> 常见的运行时异常</h2><h3 id="nullpointerexception-空指针异常" tabindex="-1"><a class="header-anchor" href="#nullpointerexception-空指针异常" aria-hidden="true">#</a> NullPointerException 空指针异常</h3><p>该异常的继承关系图:</p><figure><img src="'+r+`" alt="image-20211103162250515" tabindex="0" loading="lazy"><figcaption>image-20211103162250515</figcaption></figure><blockquote><p>下方异常中没有表明出处的都是直接继承于RuntimeException</p></blockquote><p>当程序试图在需要对象地方使用null时，会抛出该异常</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>exception_</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NullPointerException_</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Exception</span> in thread <span class="token string">&quot;main&quot;</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>NullPointerException</span>
 at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>exception_<span class="token punctuation">.</span></span>NullPointerException_</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">NullPointerException_</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arithmeticexception-数学运算异常" tabindex="-1"><a class="header-anchor" href="#arithmeticexception-数学运算异常" aria-hidden="true">#</a> ArithmeticException 数学运算异常</h3><p>当出现异常的运算条件时，抛出此异常，例如：<em>一个整数除以零</em>时，抛出此类的一个实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>exception_</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticException_</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Exception</span> in thread <span class="token string">&quot;main&quot;</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ArithmeticException</span><span class="token operator">:</span> <span class="token operator">/</span> by zero
 at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>exception_<span class="token punctuation">.</span></span>ArithmeticException_</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException_</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arrayindexoutofboundsexception-数组下标越界异常" tabindex="-1"><a class="header-anchor" href="#arrayindexoutofboundsexception-数组下标越界异常" aria-hidden="true">#</a> ArrayIndexOutOfBoundsException 数组下标越界异常</h3><p>该异常的继承关系图：</p><figure><img src="`+d+`" alt="image-20211103162939406" tabindex="0" loading="lazy"><figcaption>image-20211103162939406</figcaption></figure><p>用非法索引访问数组时抛出异常，如果索引值为负或者大于小于数组大小（arr.length-1），则该索引为非法索引：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>exception_</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayIndexOutOfBoundsException_</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Exception</span> in thread <span class="token string">&quot;main&quot;</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ArrayIndexOutOfBoundsException</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>
 at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>exception_<span class="token punctuation">.</span></span>ArrayIndexOutOfBoundsException_</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">ArrayIndexOutOfBoundsException_</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="classcastexception-类型转换异常" tabindex="-1"><a class="header-anchor" href="#classcastexception-类型转换异常" aria-hidden="true">#</a> ClassCastException 类型转换异常</h3><p>当试图将对象强制转换为不是实例的子类时，抛出异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>exception_</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassCastException_</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">A</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//运行通过 向上转型</span>
        <span class="token class-name">B</span> b2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span> <span class="token comment">//运行通过，向下转型</span>
        <span class="token class-name">C</span> c1 <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">C</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span> <span class="token comment">// 运行失败，没有任何继承关系，向下转型</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Exception</span> in thread <span class="token string">&quot;main&quot;</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ClassCastException</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>exception_<span class="token punctuation">.</span></span>B</span> cannot be cast <span class="token keyword">to</span> <span class="token namespace">com<span class="token punctuation">.</span>exception_<span class="token punctuation">.</span></span><span class="token class-name">C</span>
 at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>exception_<span class="token punctuation">.</span></span>ClassCastException_</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">ClassCastException_</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="numberformatexception-数字格式不正确异常" tabindex="-1"><a class="header-anchor" href="#numberformatexception-数字格式不正确异常" aria-hidden="true">#</a> NumberFormatException 数字格式不正确异常</h3><p>继承关系图：</p><figure><img src="`+k+`" alt="image-20211103164117438" tabindex="0" loading="lazy"><figcaption>image-20211103164117438</figcaption></figure><p>当应用程序试图将字符串转换成以重数组类型，但该字符串不能转换为适当格式时，抛出该异常(使用该异常可以确保最终输入的是数字)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>exception_</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NumberFormatException_</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span><span class="token string">&quot;123465&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//运行通过，因为传进来的值确实是数字</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//123465</span>
        <span class="token class-name">String</span> age <span class="token operator">=</span><span class="token string">&quot;11abcdef613db56d11&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num2 <span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//运行失败，传入的值不是纯数字，会直接抛出异常</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//当然，这里的name啊，age啊都是可以通过Scanner的nextlin来获取，然后试图转换，并处理</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上方运行结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">123465</span>
<span class="token class-name">Exception</span> in thread <span class="token string">&quot;main&quot;</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>NumberFormatException</span><span class="token operator">:</span> <span class="token class-name">For</span> input string<span class="token operator">:</span> <span class="token string">&quot;11abcdef613db56d11&quot;</span>
 at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>NumberFormatException</span><span class="token punctuation">.</span><span class="token function">forInputString</span><span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">65</span><span class="token punctuation">)</span>
 at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">580</span><span class="token punctuation">)</span>
 at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">615</span><span class="token punctuation">)</span>
 at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>exception_<span class="token punctuation">.</span></span>NumberFormatException_</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">NumberFormatException_</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见的编译时异常" tabindex="-1"><a class="header-anchor" href="#常见的编译时异常" aria-hidden="true">#</a> 常见的编译时异常</h2><p>编译异常是指在编译期间，就必须处理的异常，否则代码不能通过编译</p><ul><li>[] SQLException：操作数据库时，查询表可能发生异常</li><li>[] IOException：操作文件时，发生的异常</li><li>[] FileNotFoundException：当操作一个不存在的文件时，发生异常</li><li>[] ClassNotFoundException：加载类，而该类不存在时，异常</li><li>[] EOFException：操作文件时，到文件末尾，发生异常</li><li>[] IllegalArguementException：参数异常</li></ul><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h2><p>异常处理就是当异常发生时，对异常处理的方式</p><ol><li>一般来说，都是<code>try-catch-finally</code>和<code>throws</code>二选一</li><li>如果程序员没有显示的处理异常，默认是使用了<code>throws</code></li></ol><h3 id="try-catch-finally" tabindex="-1"><a class="header-anchor" href="#try-catch-finally" aria-hidden="true">#</a> try-catch-finally</h3><p>程序员在代码中捕获发生的异常， 自行处理</p><p>Java提供try和Catch块来处理异常，Try块用于包含可能出错的代码，Catch块用于处理Try块中发生的异常，可以根据需要在程序中有多个数量的try-catch块</p><p>处理机制：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
    代码<span class="token operator">/</span>可能有异常发生<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//1 捕获到异常</span>
    <span class="token comment">//2 系统将异常封装成Exception对象e，传递给catch</span>
    <span class="token comment">//3 得到异常对象后，程序员自己处理该异常</span>
    <span class="token comment">//4 注意，如果在try中没有发生异常，则catch代码块不会执行</span>
<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
    <span class="token comment">//1 不管try代码块有没有异常发生，始终会执行finally</span>
    <span class="token comment">//1.1 也就是说无论是没有异常，或者是在异常处理结束后，都会调用finally中的内容</span>
    <span class="token comment">//2 这里一般用作于释放资源，关闭连接，比如：关闭跟mysql数据库的连接，关闭IO流等</span>
<span class="token punctuation">}</span>
<span class="token comment">//如果没有finally，语法是可以通过的，比如后面再定义值调用函数之类的</span>
<span class="token keyword">int</span> a <span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token function">runInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="try-catch方式处理异常-注意事项" tabindex="-1"><a class="header-anchor" href="#try-catch方式处理异常-注意事项" aria-hidden="true">#</a> Try-Catch方式处理异常-注意事项</h4><ol><li>如果异常<strong>发生了</strong>，则<strong>异常发生后面的代码不会执行，直接进入到catch块</strong></li><li>如果异常<strong>没有发生</strong>，则<strong>顺序执行try代码块，不会进入到catch</strong></li><li>如果希望<strong>不管是否发生异常</strong>，<strong>都执行某段代码块</strong>(如关闭连接，释放资源等)，则使用<code>final{}</code></li></ol><h3 id="throws" tabindex="-1"><a class="header-anchor" href="#throws" aria-hidden="true">#</a> throws</h3><p>将发生的异常抛出，交给调用者（方法）来处理，<strong>最顶级的处理者就是JVM</strong></p><p>处理机制：</p>`,51),h=n(`<p>Throws基本介绍：</p><ol><li>如果一个方法（中的语句执行时）可能生成某种异常，但是并不能确定如何处理这种异常，由此方法应该显示的声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的<strong>调用者负责处理</strong></li><li>在方法中用throws语句可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>throws_</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Trhows01</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">,</span><span class="token class-name">NullPointerException</span><span class="token punctuation">,</span><span class="token class-name">ArithmeticException</span> <span class="token punctuation">{</span> <span class="token comment">//Exception 也可以这样写，Exception是所有异常的父类</span>
<span class="token comment">//        创建了一个文件流对象，遇到了编译时异常FileNotFoundException</span>
<span class="token comment">//        处理方式1：使用trycatch环绕</span>
<span class="token comment">//        处理方式2：使用throws抛出异常，让调用f1方法的调用者(方法)去处理</span>
<span class="token comment">//        throws后面的异常类型可以是方法中产生的异常类型，还可以是它的父类</span>
<span class="token comment">//        trhows关键之后，也可以是个列表，即：可以抛出多个异常</span>
        <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;D://date.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="throws使用细节" tabindex="-1"><a class="header-anchor" href="#throws使用细节" aria-hidden="true">#</a> Throws使用细节</h4><ol><li><p>对于编译异常，程序中必须处理，比如使用<code>try-catch</code>或<code>throws</code></p></li><li><p>对于运行时异常，程序中如果没有处理，默认就是Throws方法处理</p></li><li><p>子类重写父类方法时，对抛出异常的规定：子类重写的方法：<strong>所抛出的异常类型要么和父类抛出的异常一致，要么为父类抛出的异常类型的子类型</strong>，<strong><u>抛出的异常类型绝不能是父类异常的父类型或者跟父类异常无关的同级异常类型/子类型</u></strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span>  <span class="token class-name">Father</span><span class="token punctuation">{</span>
<span class="token comment">//    子类重写父类方法时，对抛出异常的规定：子类重写的方法：</span>
<span class="token comment">//    所抛出的异常类型要么和父类抛出的异常一致，要么为父类抛出的异常类型的子类型</span>
    <span class="token comment">//这里不能扩大异常范围，比如将异常改成Exception</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NullPointerException</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="image-20211103174900422" tabindex="0" loading="lazy"><figcaption>image-20211103174900422</figcaption></figure></li><li><p>在throws中，如果由方法try-catch，就相当于异常处理，就可以不必throws(二选一)</p></li></ol><h2 id="自定义异常" tabindex="-1"><a class="header-anchor" href="#自定义异常" aria-hidden="true">#</a> 自定义异常</h2><p>当程序中出现了某些“错误“，当该错误信息并没有在<code>Throwable</code>子类中描述，这个时候可以自己设计类异常，用于描述错误信息</p><h3 id="自定义异常的步骤" tabindex="-1"><a class="header-anchor" href="#自定义异常的步骤" aria-hidden="true">#</a> 自定义异常的步骤</h3><ol><li>定义类：自定义异常类名(程序员自己写)，继承<code>Exception</code>或者<code>RuntimeException</code></li><li>如果继承<code>Exception</code>，属于编译异常</li><li>如果继承<code>RuntimeException</code>，属于运行异常（一般来说自定义的异常都是继承于<code>RuntimeException</code>）</li></ol><blockquote><p>实例：当我们接收Person年龄对象时，要求范围在18~120之间，否则抛出一个自定义异常，并给出提示信息</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>customException</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomException</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token comment">/*throws Exception*/</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">133</span><span class="token punctuation">;</span>
<span class="token comment">//        要求范围在18~120类，否则抛出异常</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;=</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//            这里我们可以通过构造器设置它的信息</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AgeException</span><span class="token punctuation">(</span><span class="token string">&quot;年龄需要在18~120之间&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;年龄正确&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//定义一个类，继承RuntimeException，所以它是自定义异常</span>
<span class="token comment">//一般情况下，自定义异常都是继承RuntimeException，</span>
<span class="token comment">//即把自定义异常做成运行时异常，好处是，我们可以使用默认处理机制(throws)来处理它</span>
<span class="token comment">//即：比较方便</span>
<span class="token keyword">class</span> <span class="token class-name">AgeException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token comment">/*Exception */</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">AgeException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        构造器</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="throw和throws的对比" tabindex="-1"><a class="header-anchor" href="#throw和throws的对比" aria-hidden="true">#</a> throw和throws的对比</h2><table><thead><tr><th></th><th style="text-align:center;">意义</th><th style="text-align:center;">位置</th><th style="text-align:center;">后面跟的东西</th></tr></thead><tbody><tr><td>trhows</td><td style="text-align:center;">异常处理的一种方式</td><td style="text-align:center;">方法声明处</td><td style="text-align:center;">异常对象</td></tr><tr><td>throw</td><td style="text-align:center;">手动生成异常对象的关键字</td><td style="text-align:center;">方法体中</td><td style="text-align:center;">异常对象(参数)</td></tr></tbody></table>`,13);function y(x,w){const s=t("Mermaid");return p(),c("div",null,[b,a(s,{id:"mermaid-136",code:"eJxlkM9KAkEcx+/zFB31YE8Qwu7igoc00kMgHkadUtrdkd/OphJBRYeWQhOkKIPoEHZbghBRyZdpd7a3aHaHRLY5Db/Pb75/5ghwu7lVVlGJYWCn/mwWTi785aW4+OOvM6RUyk0KHVwzyE4NsoF7Hjy7kvOnK3495R+LKlIymSxSUzkACtHaz+gx9Lw0UsVcCNePiycEDg3aiTficdFhRX2XmNSCnpzGIlol162TNmtRKxKSTlWkCaYpqX3HYi2T5A42Vvj7jT8fhKu78PU2eJj6gyEfvYhs8mkaaZFuwTFrBHQKJmZrgz9kGHu0ZTECCZK3GqQrcqrUsRp2AioAuFdiFEgCaAa2bQ3bSZ9teWQVNSVj8+V96A3/x46LjT+D/htfTAJ39T3vr+VEpegD9bxBCtRhuki36RWxyAf9Ag6hzPs="}),g,a(s,{id:"mermaid-322",code:"eJxLL0osyFAIceLyCvOtBmKbpCK7p0tank9oe7qn6emOHc9ntTybtvPpnn5dkIyh3ot9k5+274LIPdm/8FnjepC4kd7Lhgag+PMV3U939deCDNPVtat5saH5+ZQVNb6JmXlcIAJJzM0QaOyzzVO5YAwkOVcNNyOIIMjsZ12z4TZqcrmC1D3Zux+oriSjKL+8GFkah6ntq14s7IHqKapMTixJzkD2ItiSjmkvGlqftvUim/t898wnO7qe7Gh4vms5mieoYiQwlLgAPI3W8Q=="}),h])}const j=e(v,[["render",y],["__file","11-Exception.html.vue"]]);export{j as default};
