const s=JSON.parse(`{"key":"v-b4d44e84","path":"/Web/React/02-React-Hooks.html","title":"02-React-Hooks","lang":"zh-CN","frontmatter":{"title":"02-React-Hooks","date":"2022-05-03T19:16:03.000Z","category":"React","tag":["React","ReactHooks"],"description":"概述 面对对象在React中有如下几个缺陷 高阶组件为了复用，导致代码层级变得复杂 生命周期复杂 写成function组件（函数式组件），又因为其无状态性，需要状态，又改成了class，成本高 所以有了React Hooks 现在一般用React都是Hooks+Typescript用的多，用class的没几个（生产中） Use State状态 在function中使用state，只需要这样 import React, {useState} from 'react'; export default function FuncDemo(): JSX.Element { /** * 这里结构获取到了两个值：一个是动态对象，一个是修改这个动态对象的方法 * 这里结构赋值因为是用数组来赋值的，所以说起的名字随意，不过一般都是用state，name之类的来声明 */ const [message, setMessage] = useState&lt;string&gt;(\\"Hello World\\") return ( &lt;&gt; {/*显示对象*/} {message} &lt;button onClick={() =&gt; { //修改对象 setMessage(message + message) }}&gt;Change Message &lt;/button&gt; &lt;/&gt; ) } &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;","head":[["meta",{"property":"og:url","content":"http://www.amayakite.github.io/Web/React/02-React-Hooks.html"}],["meta",{"property":"og:site_name","content":"Amayakite Blogs"}],["meta",{"property":"og:title","content":"02-React-Hooks"}],["meta",{"property":"og:description","content":"概述 面对对象在React中有如下几个缺陷 高阶组件为了复用，导致代码层级变得复杂 生命周期复杂 写成function组件（函数式组件），又因为其无状态性，需要状态，又改成了class，成本高 所以有了React Hooks 现在一般用React都是Hooks+Typescript用的多，用class的没几个（生产中） Use State状态 在function中使用state，只需要这样 import React, {useState} from 'react'; export default function FuncDemo(): JSX.Element { /** * 这里结构获取到了两个值：一个是动态对象，一个是修改这个动态对象的方法 * 这里结构赋值因为是用数组来赋值的，所以说起的名字随意，不过一般都是用state，name之类的来声明 */ const [message, setMessage] = useState&lt;string&gt;(\\"Hello World\\") return ( &lt;&gt; {/*显示对象*/} {message} &lt;button onClick={() =&gt; { //修改对象 setMessage(message + message) }}&gt;Change Message &lt;/button&gt; &lt;/&gt; ) } &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-17T15:23:51.000Z"}],["meta",{"property":"article:author","content":"Amayakite"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:tag","content":"ReactHooks"}],["meta",{"property":"article:published_time","content":"2022-05-03T19:16:03.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-17T15:23:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02-React-Hooks\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-03T19:16:03.000Z\\",\\"dateModified\\":\\"2023-06-17T15:23:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amayakite\\",\\"url\\":\\"https://github.com/Amayakite\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"Use State状态","slug":"use-state状态","link":"#use-state状态","children":[]},{"level":2,"title":"UseEffect 监听属性和初始化值","slug":"useeffect-监听属性和初始化值","link":"#useeffect-监听属性和初始化值","children":[{"level":3,"title":"初始化值","slug":"初始化值","link":"#初始化值","children":[]},{"level":3,"title":"监听属性","slug":"监听属性","link":"#监听属性","children":[]},{"level":3,"title":"监听销毁","slug":"监听销毁","link":"#监听销毁","children":[]},{"level":3,"title":"useLayoutEffect","slug":"uselayouteffect","link":"#uselayouteffect","children":[]}]},{"level":2,"title":"UseCallback","slug":"usecallback","link":"#usecallback","children":[]},{"level":2,"title":"UseMemo","slug":"usememo","link":"#usememo","children":[]},{"level":2,"title":"UseRef","slug":"useref","link":"#useref","children":[]},{"level":2,"title":"useContext","slug":"usecontext","link":"#usecontext","children":[]},{"level":2,"title":"useReducer","slug":"usereducer","link":"#usereducer","children":[]},{"level":2,"title":"扩展-Http请求和跨域处理","slug":"扩展-http请求和跨域处理","link":"#扩展-http请求和跨域处理","children":[]},{"level":2,"title":"扩展-React结合Twindcss","slug":"扩展-react结合twindcss","link":"#扩展-react结合twindcss","children":[]}],"git":{"createdTime":1687015431000,"updatedTime":1687015431000,"contributors":[{"name":"Amayakite","email":"amayakite@qq.com","commits":1}]},"readingTime":{"minutes":9.29,"words":2787},"filePathRelative":"Web/React/02-React-Hooks.md","localizedDate":"2022年5月3日","excerpt":"<h2> 概述</h2>\\n<p>面对对象在React中有如下几个缺陷</p>\\n<ol>\\n<li>高阶组件为了复用，导致代码层级变得复杂</li>\\n<li>生命周期复杂</li>\\n<li>写成function组件（函数式组件），又因为其无状态性，需要状态，又改成了class，成本高</li>\\n</ol>\\n<p>所以有了React Hooks</p>\\n<p>现在一般用React都是Hooks+Typescript用的多，用class的没几个（生产中）</p>\\n<h2> Use State状态</h2>\\n<p>在function中使用state，只需要这样</p>\\n<div class=\\"language-tsx line-numbers-mode\\" data-ext=\\"tsx\\"><pre tsx=\\"\\" class=\\"language-tsx\\"><code><span class=\\"token keyword\\">import</span> React<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>useState<span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'react'</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">default</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">FuncDemo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token constant\\">JSX</span><span class=\\"token punctuation\\">.</span>Element <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token comment\\">/**\\n     * 这里结构获取到了两个值：一个是动态对象，一个是修改这个动态对象的方法\\n     * 这里结构赋值因为是用数组来赋值的，所以说起的名字随意，不过一般都是用state，name之类的来声明\\n     */</span>\\n    <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">[</span>message<span class=\\"token punctuation\\">,</span> setMessage<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token generic-function\\"><span class=\\"token function\\">useState</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token builtin\\">string</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Hello World\\"</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token plain-text\\">\\n            </span><span class=\\"token punctuation\\">{</span><span class=\\"token comment\\">/*显示对象*/</span><span class=\\"token punctuation\\">}</span><span class=\\"token plain-text\\">\\n            </span><span class=\\"token punctuation\\">{</span>message<span class=\\"token punctuation\\">}</span><span class=\\"token plain-text\\">\\n            </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span> <span class=\\"token attr-name\\">onClick</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//修改对象</span>\\n                <span class=\\"token function\\">setMessage</span><span class=\\"token punctuation\\">(</span>message <span class=\\"token operator\\">+</span> message<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token plain-text\\">Change Message\\n            </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token plain-text\\">\\n        </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span></span><span class=\\"token punctuation\\">&gt;</span></span>\\n    <span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"highlight-lines\\"><br><br><br><br><br><br><br><br><div class=\\"highlight-line\\">&nbsp;</div><br><br><br><div class=\\"highlight-line\\">&nbsp;</div><div class=\\"highlight-line\\">&nbsp;</div><div class=\\"highlight-line\\">&nbsp;</div><div class=\\"highlight-line\\">&nbsp;</div><div class=\\"highlight-line\\">&nbsp;</div><div class=\\"highlight-line\\">&nbsp;</div><div class=\\"highlight-line\\">&nbsp;</div><br><br><br></div><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{s as data};
